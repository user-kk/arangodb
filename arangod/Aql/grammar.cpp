/* clang-format off */
/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs

/* First part of user prologue.  */
#line 9 "grammar.y"

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/QueryContext.h"
#include "Aql/types.h"
#include "Basics/StaticStrings.h"
#include "Basics/StringUtils.h"
#include "Containers/HashSet.h"
#include "Containers/SmallVector.h"
#include "Graph/PathType.h"
#include "VocBase/AccessMode.h"

#include <absl/strings/str_cat.h>

#include <algorithm>
#include <cstdint>
#include <string>
#include <string_view>


#line 113 "grammar.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "grammar.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of query string"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_T_FOR = 3,                      /* "FOR declaration"  */
  YYSYMBOL_T_LET = 4,                      /* "LET declaration"  */
  YYSYMBOL_T_FILTER = 5,                   /* "FILTER declaration"  */
  YYSYMBOL_T_RETURN = 6,                   /* "RETURN declaration"  */
  YYSYMBOL_T_COLLECT = 7,                  /* "COLLECT declaration"  */
  YYSYMBOL_T_SORT = 8,                     /* "SORT declaration"  */
  YYSYMBOL_T_LIMIT = 9,                    /* "LIMIT declaration"  */
  YYSYMBOL_T_WINDOW = 10,                  /* "WINDOW declaration"  */
  YYSYMBOL_T_ASC = 11,                     /* "ASC keyword"  */
  YYSYMBOL_T_DESC = 12,                    /* "DESC keyword"  */
  YYSYMBOL_T_IN = 13,                      /* "IN keyword"  */
  YYSYMBOL_T_WITH = 14,                    /* "WITH keyword"  */
  YYSYMBOL_T_INTO = 15,                    /* "INTO keyword"  */
  YYSYMBOL_T_AGGREGATE = 16,               /* "AGGREGATE keyword"  */
  YYSYMBOL_T_GRAPH = 17,                   /* "GRAPH keyword"  */
  YYSYMBOL_T_SHORTEST_PATH = 18,           /* "SHORTEST_PATH keyword"  */
  YYSYMBOL_T_K_SHORTEST_PATHS = 19,        /* "K_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_K_PATHS = 20,                 /* "K_PATHS keyword"  */
  YYSYMBOL_T_ALL_SHORTEST_PATHS = 21,      /* "ALL_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_DISTINCT = 22,                /* "DISTINCT modifier"  */
  YYSYMBOL_T_REMOVE = 23,                  /* "REMOVE command"  */
  YYSYMBOL_T_INSERT = 24,                  /* "INSERT command"  */
  YYSYMBOL_T_UPDATE = 25,                  /* "UPDATE command"  */
  YYSYMBOL_T_REPLACE = 26,                 /* "REPLACE command"  */
  YYSYMBOL_T_UPSERT = 27,                  /* "UPSERT command"  */
  YYSYMBOL_T_NULL = 28,                    /* "null"  */
  YYSYMBOL_T_TRUE = 29,                    /* "true"  */
  YYSYMBOL_T_FALSE = 30,                   /* "false"  */
  YYSYMBOL_T_STRING = 31,                  /* "identifier"  */
  YYSYMBOL_T_QUOTED_STRING = 32,           /* "quoted string"  */
  YYSYMBOL_T_INTEGER = 33,                 /* "integer number"  */
  YYSYMBOL_T_DOUBLE = 34,                  /* "number"  */
  YYSYMBOL_T_PARAMETER = 35,               /* "bind parameter"  */
  YYSYMBOL_T_DATA_SOURCE_PARAMETER = 36,   /* "bind data source parameter"  */
  YYSYMBOL_T_ASSIGN = 37,                  /* "assignment"  */
  YYSYMBOL_T_NOT = 38,                     /* "not operator"  */
  YYSYMBOL_T_AND = 39,                     /* "and operator"  */
  YYSYMBOL_T_OR = 40,                      /* "or operator"  */
  YYSYMBOL_T_NOT_IN = 41,                  /* "not in operator"  */
  YYSYMBOL_T_REGEX_MATCH = 42,             /* "~= operator"  */
  YYSYMBOL_T_REGEX_NON_MATCH = 43,         /* "~! operator"  */
  YYSYMBOL_T_EQ = 44,                      /* "== operator"  */
  YYSYMBOL_T_NE = 45,                      /* "!= operator"  */
  YYSYMBOL_T_LT = 46,                      /* "< operator"  */
  YYSYMBOL_T_GT = 47,                      /* "> operator"  */
  YYSYMBOL_T_LE = 48,                      /* "<= operator"  */
  YYSYMBOL_T_GE = 49,                      /* ">= operator"  */
  YYSYMBOL_T_LIKE = 50,                    /* "like operator"  */
  YYSYMBOL_T_PLUS = 51,                    /* "+ operator"  */
  YYSYMBOL_T_MINUS = 52,                   /* "- operator"  */
  YYSYMBOL_T_TIMES = 53,                   /* "* operator"  */
  YYSYMBOL_T_DIV = 54,                     /* "/ operator"  */
  YYSYMBOL_T_MOD = 55,                     /* "% operator"  */
  YYSYMBOL_T_QUESTION = 56,                /* "?"  */
  YYSYMBOL_T_COLON = 57,                   /* ":"  */
  YYSYMBOL_T_SCOPE = 58,                   /* "::"  */
  YYSYMBOL_T_RANGE = 59,                   /* ".."  */
  YYSYMBOL_T_COMMA = 60,                   /* ","  */
  YYSYMBOL_T_OPEN = 61,                    /* "("  */
  YYSYMBOL_T_CLOSE = 62,                   /* ")"  */
  YYSYMBOL_T_OBJECT_OPEN = 63,             /* "{"  */
  YYSYMBOL_T_OBJECT_CLOSE = 64,            /* "}"  */
  YYSYMBOL_T_ARRAY_OPEN = 65,              /* "["  */
  YYSYMBOL_T_ARRAY_CLOSE = 66,             /* "]"  */
  YYSYMBOL_T_SEMICOLON = 67,               /* ";"  */
  YYSYMBOL_T_OUTBOUND = 68,                /* "outbound modifier"  */
  YYSYMBOL_T_INBOUND = 69,                 /* "inbound modifier"  */
  YYSYMBOL_T_ANY = 70,                     /* "any modifier"  */
  YYSYMBOL_T_ALL = 71,                     /* "all modifier"  */
  YYSYMBOL_T_NONE = 72,                    /* "none modifier"  */
  YYSYMBOL_T_AT_LEAST = 73,                /* "at least modifier"  */
  YYSYMBOL_T_SELECT = 74,                  /* "select"  */
  YYSYMBOL_T_FROM = 75,                    /* "from"  */
  YYSYMBOL_T_AS = 76,                      /* "as"  */
  YYSYMBOL_T_WHERE = 77,                   /* "where"  */
  YYSYMBOL_T_GROUP = 78,                   /* "group"  */
  YYSYMBOL_T_ORDER = 79,                   /* "order"  */
  YYSYMBOL_T_BY = 80,                      /* "by"  */
  YYSYMBOL_T_HAVING = 81,                  /* "having"  */
  YYSYMBOL_T_UNNEST = 82,                  /* "unnest"  */
  YYSYMBOL_T_UNNEST_ALL = 83,              /* "unnest_all"  */
  YYSYMBOL_T_DOLLAR = 84,                  /* "$"  */
  YYSYMBOL_T_JOIN = 85,                    /* "join"  */
  YYSYMBOL_T_ON = 86,                      /* "on"  */
  YYSYMBOL_T_MATCH = 87,                   /* "match"  */
  YYSYMBOL_T_START_AS = 88,                /* "start_as"  */
  YYSYMBOL_T_TRAIL = 89,                   /* "trail"  */
  YYSYMBOL_T_ACYCLIC = 90,                 /* "acyclic"  */
  YYSYMBOL_T_SIMPLE = 91,                  /* "simple"  */
  YYSYMBOL_T_ANY_SHORTEST = 92,            /* "any_Shortest"  */
  YYSYMBOL_T_ALL_SHORTEST = 93,            /* "all_Shortest"  */
  YYSYMBOL_T_K_SHORTEST = 94,              /* "k_shortest"  */
  YYSYMBOL_T_K_ANY = 95,                   /* "k_any"  */
  YYSYMBOL_T_END_AS = 96,                  /* "end_as"  */
  YYSYMBOL_T_COST = 97,                    /* "cost"  */
  YYSYMBOL_T_COST_DEFAULT = 98,            /* "cost_default"  */
  YYSYMBOL_WITH_COLLECTION_LIST = 99,      /* WITH_COLLECTION_LIST  */
  YYSYMBOL_UMINUS = 100,                   /* UMINUS  */
  YYSYMBOL_UPLUS = 101,                    /* UPLUS  */
  YYSYMBOL_UNEGATION = 102,                /* UNEGATION  */
  YYSYMBOL_FUNCCALL = 103,                 /* FUNCCALL  */
  YYSYMBOL_REFERENCE = 104,                /* REFERENCE  */
  YYSYMBOL_INDEXED = 105,                  /* INDEXED  */
  YYSYMBOL_EXPANSION = 106,                /* EXPANSION  */
  YYSYMBOL_107_ = 107,                     /* '.'  */
  YYSYMBOL_YYACCEPT = 108,                 /* $accept  */
  YYSYMBOL_optional_prune_variable = 109,  /* optional_prune_variable  */
  YYSYMBOL_with_collection = 110,          /* with_collection  */
  YYSYMBOL_with_collection_list = 111,     /* with_collection_list  */
  YYSYMBOL_optional_with = 112,            /* optional_with  */
  YYSYMBOL_with_key = 113,                 /* with_key  */
  YYSYMBOL_queryStart = 114,               /* queryStart  */
  YYSYMBOL_query = 115,                    /* query  */
  YYSYMBOL_aql_statements = 116,           /* aql_statements  */
  YYSYMBOL_final_statement = 117,          /* final_statement  */
  YYSYMBOL_optional_statement_block_statements = 118, /* optional_statement_block_statements  */
  YYSYMBOL_statement_block_statement = 119, /* statement_block_statement  */
  YYSYMBOL_more_output_variables = 120,    /* more_output_variables  */
  YYSYMBOL_for_output_variables = 121,     /* for_output_variables  */
  YYSYMBOL_prune_and_options = 122,        /* prune_and_options  */
  YYSYMBOL_traversal_graph_info = 123,     /* traversal_graph_info  */
  YYSYMBOL_shortest_path_graph_info = 124, /* shortest_path_graph_info  */
  YYSYMBOL_k_shortest_paths_graph_info = 125, /* k_shortest_paths_graph_info  */
  YYSYMBOL_k_paths_graph_info = 126,       /* k_paths_graph_info  */
  YYSYMBOL_all_shortest_paths_graph_info = 127, /* all_shortest_paths_graph_info  */
  YYSYMBOL_for_statement = 128,            /* for_statement  */
  YYSYMBOL_129_1 = 129,                    /* $@1  */
  YYSYMBOL_130_2 = 130,                    /* $@2  */
  YYSYMBOL_filter_statement = 131,         /* filter_statement  */
  YYSYMBOL_let_statement = 132,            /* let_statement  */
  YYSYMBOL_let_list = 133,                 /* let_list  */
  YYSYMBOL_let_element = 134,              /* let_element  */
  YYSYMBOL_count_into = 135,               /* count_into  */
  YYSYMBOL_collect_variable_list = 136,    /* collect_variable_list  */
  YYSYMBOL_137_3 = 137,                    /* $@3  */
  YYSYMBOL_collect_statement = 138,        /* collect_statement  */
  YYSYMBOL_collect_list = 139,             /* collect_list  */
  YYSYMBOL_collect_element = 140,          /* collect_element  */
  YYSYMBOL_collect_optional_into = 141,    /* collect_optional_into  */
  YYSYMBOL_variable_list = 142,            /* variable_list  */
  YYSYMBOL_keep = 143,                     /* keep  */
  YYSYMBOL_144_4 = 144,                    /* $@4  */
  YYSYMBOL_aggregate = 145,                /* aggregate  */
  YYSYMBOL_146_5 = 146,                    /* $@5  */
  YYSYMBOL_aggregate_list = 147,           /* aggregate_list  */
  YYSYMBOL_aggregate_element = 148,        /* aggregate_element  */
  YYSYMBOL_aggregate_function_call = 149,  /* aggregate_function_call  */
  YYSYMBOL_150_6 = 150,                    /* $@6  */
  YYSYMBOL_sort_statement = 151,           /* sort_statement  */
  YYSYMBOL_152_7 = 152,                    /* $@7  */
  YYSYMBOL_sort_list = 153,                /* sort_list  */
  YYSYMBOL_sort_element = 154,             /* sort_element  */
  YYSYMBOL_sort_direction = 155,           /* sort_direction  */
  YYSYMBOL_limit_statement = 156,          /* limit_statement  */
  YYSYMBOL_window_statement = 157,         /* window_statement  */
  YYSYMBOL_return_statement = 158,         /* return_statement  */
  YYSYMBOL_in_or_into_collection = 159,    /* in_or_into_collection  */
  YYSYMBOL_remove_statement = 160,         /* remove_statement  */
  YYSYMBOL_insert_statement = 161,         /* insert_statement  */
  YYSYMBOL_update_parameters = 162,        /* update_parameters  */
  YYSYMBOL_update_statement = 163,         /* update_statement  */
  YYSYMBOL_replace_parameters = 164,       /* replace_parameters  */
  YYSYMBOL_replace_statement = 165,        /* replace_statement  */
  YYSYMBOL_update_or_replace = 166,        /* update_or_replace  */
  YYSYMBOL_upsert_input = 167,             /* upsert_input  */
  YYSYMBOL_upsert_statement = 168,         /* upsert_statement  */
  YYSYMBOL_169_8 = 169,                    /* $@8  */
  YYSYMBOL_170_9 = 170,                    /* $@9  */
  YYSYMBOL_171_10 = 171,                   /* $@10  */
  YYSYMBOL_quantifier = 172,               /* quantifier  */
  YYSYMBOL_distinct_expression = 173,      /* distinct_expression  */
  YYSYMBOL_174_11 = 174,                   /* $@11  */
  YYSYMBOL_expression = 175,               /* expression  */
  YYSYMBOL_function_name = 176,            /* function_name  */
  YYSYMBOL_function_call = 177,            /* function_call  */
  YYSYMBOL_178_12 = 178,                   /* $@12  */
  YYSYMBOL_179_13 = 179,                   /* $@13  */
  YYSYMBOL_operator_unary = 180,           /* operator_unary  */
  YYSYMBOL_operator_binary = 181,          /* operator_binary  */
  YYSYMBOL_operator_ternary = 182,         /* operator_ternary  */
  YYSYMBOL_optional_function_call_arguments = 183, /* optional_function_call_arguments  */
  YYSYMBOL_function_arguments_list = 184,  /* function_arguments_list  */
  YYSYMBOL_compound_value = 185,           /* compound_value  */
  YYSYMBOL_array = 186,                    /* array  */
  YYSYMBOL_187_14 = 187,                   /* $@14  */
  YYSYMBOL_optional_array_elements = 188,  /* optional_array_elements  */
  YYSYMBOL_array_elements_list = 189,      /* array_elements_list  */
  YYSYMBOL_array_element = 190,            /* array_element  */
  YYSYMBOL_for_options = 191,              /* for_options  */
  YYSYMBOL_options = 192,                  /* options  */
  YYSYMBOL_object = 193,                   /* object  */
  YYSYMBOL_194_15 = 194,                   /* $@15  */
  YYSYMBOL_optional_object_elements = 195, /* optional_object_elements  */
  YYSYMBOL_object_elements_list = 196,     /* object_elements_list  */
  YYSYMBOL_object_element = 197,           /* object_element  */
  YYSYMBOL_array_filter_operator = 198,    /* array_filter_operator  */
  YYSYMBOL_array_map_operator = 199,       /* array_map_operator  */
  YYSYMBOL_optional_array_filter = 200,    /* optional_array_filter  */
  YYSYMBOL_optional_array_limit = 201,     /* optional_array_limit  */
  YYSYMBOL_optional_array_return = 202,    /* optional_array_return  */
  YYSYMBOL_graph_collection = 203,         /* graph_collection  */
  YYSYMBOL_graph_collection_list = 204,    /* graph_collection_list  */
  YYSYMBOL_graph_subject = 205,            /* graph_subject  */
  YYSYMBOL_206_16 = 206,                   /* $@16  */
  YYSYMBOL_graph_direction = 207,          /* graph_direction  */
  YYSYMBOL_graph_direction_steps = 208,    /* graph_direction_steps  */
  YYSYMBOL_reference = 209,                /* reference  */
  YYSYMBOL_210_17 = 210,                   /* $@17  */
  YYSYMBOL_211_18 = 211,                   /* $@18  */
  YYSYMBOL_212_19 = 212,                   /* $@19  */
  YYSYMBOL_213_20 = 213,                   /* $@20  */
  YYSYMBOL_ndarray_expression_list = 214,  /* ndarray_expression_list  */
  YYSYMBOL_ndarray_expression = 215,       /* ndarray_expression  */
  YYSYMBOL_range_index = 216,              /* range_index  */
  YYSYMBOL_expression_or_none = 217,       /* expression_or_none  */
  YYSYMBOL_interval_element = 218,         /* interval_element  */
  YYSYMBOL_simple_value = 219,             /* simple_value  */
  YYSYMBOL_numeric_value = 220,            /* numeric_value  */
  YYSYMBOL_value_literal = 221,            /* value_literal  */
  YYSYMBOL_in_or_into_collection_name = 222, /* in_or_into_collection_name  */
  YYSYMBOL_bind_parameter = 223,           /* bind_parameter  */
  YYSYMBOL_bind_parameter_datasource_expected = 224, /* bind_parameter_datasource_expected  */
  YYSYMBOL_object_element_name = 225,      /* object_element_name  */
  YYSYMBOL_variable_name = 226,            /* variable_name  */
  YYSYMBOL_sql_statements = 227,           /* sql_statements  */
  YYSYMBOL_228_21 = 228,                   /* $@21  */
  YYSYMBOL_229_22 = 229,                   /* $@22  */
  YYSYMBOL_230_23 = 230,                   /* $@23  */
  YYSYMBOL_with_statements = 231,          /* with_statements  */
  YYSYMBOL_with_list = 232,                /* with_list  */
  YYSYMBOL_with_element = 233,             /* with_element  */
  YYSYMBOL_from_statements = 234,          /* from_statements  */
  YYSYMBOL_collection_pair_list = 235,     /* collection_pair_list  */
  YYSYMBOL_collection_element = 236,       /* collection_element  */
  YYSYMBOL_collection_pair = 237,          /* collection_pair  */
  YYSYMBOL_238_24 = 238,                   /* $@24  */
  YYSYMBOL_239_25 = 239,                   /* $@25  */
  YYSYMBOL_240_26 = 240,                   /* $@26  */
  YYSYMBOL_241_27 = 241,                   /* $@27  */
  YYSYMBOL_242_28 = 242,                   /* $@28  */
  YYSYMBOL_243_29 = 243,                   /* $@29  */
  YYSYMBOL_244_30 = 244,                   /* $@30  */
  YYSYMBOL_cost_info = 245,                /* cost_info  */
  YYSYMBOL_cost_default = 246,             /* cost_default  */
  YYSYMBOL_start_end_as = 247,             /* start_end_as  */
  YYSYMBOL_start_and_end_as = 248,         /* start_and_end_as  */
  YYSYMBOL_graph_info_any_shortest = 249,  /* graph_info_any_shortest  */
  YYSYMBOL_graph_info_all_shortest = 250,  /* graph_info_all_shortest  */
  YYSYMBOL_graph_info_k_shortest = 251,    /* graph_info_k_shortest  */
  YYSYMBOL_graph_info_any_k = 252,         /* graph_info_any_k  */
  YYSYMBOL_graph_option = 253,             /* graph_option  */
  YYSYMBOL_graph_order = 254,              /* graph_order  */
  YYSYMBOL_restrictor = 255,               /* restrictor  */
  YYSYMBOL_start_as = 256,                 /* start_as  */
  YYSYMBOL_graph_info = 257,               /* graph_info  */
  YYSYMBOL_path = 258,                     /* path  */
  YYSYMBOL_point = 259,                    /* point  */
  YYSYMBOL_edge = 260,                     /* edge  */
  YYSYMBOL_step = 261,                     /* step  */
  YYSYMBOL_unnest_statement = 262,         /* unnest_statement  */
  YYSYMBOL_263_31 = 263,                   /* $@31  */
  YYSYMBOL_expression_list = 264,          /* expression_list  */
  YYSYMBOL_expression_element = 265,       /* expression_element  */
  YYSYMBOL_optional_axis_name_list = 266,  /* optional_axis_name_list  */
  YYSYMBOL_axis_name_list = 267,           /* axis_name_list  */
  YYSYMBOL_axis_name = 268,                /* axis_name  */
  YYSYMBOL_distinct_label = 269,           /* distinct_label  */
  YYSYMBOL_select_list = 270,              /* select_list  */
  YYSYMBOL_select_element = 271,           /* select_element  */
  YYSYMBOL_where_statements = 272,         /* where_statements  */
  YYSYMBOL_group_by_statements = 273,      /* group_by_statements  */
  YYSYMBOL_274_32 = 274,                   /* $@32  */
  YYSYMBOL_group_by_variable_list = 275,   /* group_by_variable_list  */
  YYSYMBOL_276_33 = 276,                   /* $@33  */
  YYSYMBOL_group_by_list = 277,            /* group_by_list  */
  YYSYMBOL_group_by_element = 278,         /* group_by_element  */
  YYSYMBOL_having_statements = 279,        /* having_statements  */
  YYSYMBOL_order_by_statements = 280,      /* order_by_statements  */
  YYSYMBOL_281_34 = 281,                   /* $@34  */
  YYSYMBOL_limit_statements = 282          /* limit_statements  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;


/* Second part of user prologue.  */
#line 56 "grammar.y"

#include <iostream>
using namespace arangodb::aql;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);

/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp,
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

namespace {
  struct strval {
  char*                  value;
  size_t                 length;
  };

bool caseInsensitiveEqual(std::string_view lhs, std::string_view rhs) noexcept {
  return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end(), [](char l, char r) {
    return arangodb::basics::StringUtils::tolower(l) == arangodb::basics::StringUtils::tolower(r);
  });
}

void handleUpsertOptions(AstNode const* options, AstNode* forNode, AstNode* forOptionsNode, AstNode* upsertOptionsNode, bool& canReadOwnWrites) {
  TRI_ASSERT(canReadOwnWrites);
  if (options != nullptr && options->type == NODE_TYPE_OBJECT) {
    for (size_t i = 0; i < options->numMembers(); ++i) {
      auto nodeMember = options->getMember(i);
      if (nodeMember->type == NODE_TYPE_OBJECT_ELEMENT) {
        std::string_view nodeMemberName = nodeMember->getStringView();
        if (nodeMemberName == arangodb::StaticStrings::IndexHintOption || 
          nodeMemberName == arangodb::StaticStrings::IndexHintOptionForce ||
          nodeMemberName == arangodb::StaticStrings::IndexHintDisableIndex ||
          nodeMemberName == arangodb::StaticStrings::UseCache) {
          forOptionsNode->addMember(nodeMember);
        } else {
          upsertOptionsNode->addMember(nodeMember);
        }

        if (nodeMemberName == arangodb::StaticStrings::ReadOwnWrites) {
          canReadOwnWrites = nodeMember->getMember(0)->isTrue();
        }
      }
    }
    forNode->changeMember(2, forOptionsNode);
  }
  if (canReadOwnWrites) {
    forNode->setFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES);
  }
}

AstNode* buildShortestPathInfo(Parser* parser,
                               char const* seperator,
                               AstNode* direction,
                               AstNode* startNode,
                               AstNode* endNode,
                               AstNode* graph,
                               AstNode* options,
                               YYLTYPE const& yyloc) {
  if (!caseInsensitiveEqual(seperator, "TO")) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", seperator, yyloc.first_line, yyloc.first_column);
  }
  auto infoNode = parser->ast()->createNodeArray();
  infoNode->addMember(direction);
  infoNode->addMember(startNode);
  infoNode->addMember(endNode);
  infoNode->addMember(graph);
  
  auto opts = parser->ast()->createNodeOptions(options);
  TRI_ASSERT(opts != nullptr);
  infoNode->addMember(opts);
  return infoNode;
}

void checkOutVariables(Parser* parser,
                       AstNode const* variableNamesNode,
                       size_t minVariables, size_t maxVariables,
                       char const* errorMessage,
                       YYLTYPE const& yyloc) {
  TRI_ASSERT(variableNamesNode != nullptr);
  TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
  if (variableNamesNode->numMembers() < minVariables ||
      variableNamesNode->numMembers() > maxVariables) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, errorMessage, yyloc.first_line, yyloc.first_column);
  }
}

void validateOptions(Parser* parser, AstNode const* node,
                     int line, int column) {
  TRI_ASSERT(node != nullptr);
  if (!node->isObject()) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "'OPTIONS' have to be an object", line, column);
  }
  if (!node->isConstant()) {
    parser->registerParseError(TRI_ERROR_QUERY_COMPILE_TIME_OPTIONS, "'OPTIONS' have to be known at query compile time", line, column);
  }
}

/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
void checkCollectVariables(Parser* parser, char const* context, 
                           AstNode const* expression,
                           int line, int column,
                           VarSet const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }

  arangodb::containers::SmallVector<AstNode const*, 4> toTraverse = { expression };
 
  // recursively find all variables in expression
  auto preVisitor = [](AstNode const* node) -> bool {
    // ignore constant nodes, as they can't contain variables
    return !node->isConstant();
  };
  auto visitor = [&](AstNode const* node) {
    // reference to a variable
    if (node != nullptr && node->type == NODE_TYPE_REFERENCE) {
      auto variable = static_cast<Variable const*>(node->getData());

      if (variable == nullptr) {
        THROW_ARANGO_EXCEPTION_MESSAGE(TRI_ERROR_INTERNAL,
                                       "invalid reference in AST");
      }

      if (variable->needsRegister()) {
        if (variablesIntroduced.contains(variable)) {
          auto msg = absl::StrCat("use of COLLECT variable '", variable->name, "' inside same COLLECT's expression");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), variable->name, line, column);
        }
        if (auto subquery = parser->ast()->getSubqueryForVariable(variable); subquery != nullptr) {
          toTraverse.push_back(subquery);
        }
      }
    }
  };

  size_t pos = 0;
  while (pos < toTraverse.size()) {
    AstNode const* node = toTraverse[pos++];
    // note: the traverseReadOnly may add to the toTraverse vector!
    Ast::traverseReadOnly(node, preVisitor, visitor);
  }
}

/// @brief register variables in the scope
void registerAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes,
                             int line, int column,
                             VarSet& variablesIntroduced,
                             AstNode const* vars) {
  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
bool validateAggregates(Parser* parser, AstNode const* aggregates,
                        int line, int column) {
  VarSet variablesIntroduced{};
  VarSet varsInAssignment{};
  
  size_t const n = aggregates->numMembers();
  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      variablesIntroduced.emplace(v);

      auto func = member->getMember(1);
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        constexpr std::string_view error = "aggregate expression must be a function call";
        parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
      } else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          constexpr std::string_view error = "unknown aggregate function used";
          parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
        }
      }
      
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.contains(it)) {
          auto msg = absl::StrCat("use of COLLECT variable '", it->name, "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name, line, column);
        }
      }
    }
  }

  return true;
}


/// @brief validate the WINDOW specification
bool validateWindowSpec(Parser* parser, AstNode const* spec,
                        int line, int column) {
  bool preceding = false;
  bool following = false;
  
  size_t const n = spec->numMembers();
  if (n == 0) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "At least one WINDOW bound must be specified ('preceding'/'following')", line, column);
  }
  
  for (size_t i = 0; i < n; ++i) {
    auto member = spec->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_OBJECT_ELEMENT);
      bool* attr{};
      auto name = member->getString();
      if (name == "preceding") {
        attr = &preceding;
      } else if (name == "following") {
        attr = &following;
      } else  {
        char const* error = "Invalid WINDOW attribute '%s'; only \"preceding\" and \"following\" are supported";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      if (*attr) {
        char const* error = "WINDOW attribute '%s' is specified multiple times";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      // mark this attribute as "seen"
      *attr = true;
    }
  }
  return true;
}

/// @brief start a new scope for the collect
bool startCollectScope(arangodb::aql::Scopes* scopes) {
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN ||
      scopes->type() == arangodb::aql::AQL_SCOPE_SUBQUERY) {
    return false;
  }


  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
AstNode const* getIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringView(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringView(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
AstNode const* getIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

AstNode* transformOutputVariables(Parser* parser, AstNode const* names) {
  auto wrapperNode = parser->ast()->createNodeArray();
  for (size_t i = 0; i < names->numMembers(); ++i) {
    AstNode* variableNameNode = names->getMemberUnchecked(i);
    TRI_ASSERT(variableNameNode->isStringValue());
    AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
    wrapperNode->addMember(variableNode);
  }
  return wrapperNode;
}

} // namespace


#line 750 "grammar.cpp"


#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if 1

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* 1 */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  19
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   2682

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  108
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  175
/* YYNRULES -- Number of rules.  */
#define YYNRULES  394
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  739

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   361


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   107,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   617,   617,   623,   633,   636,   642,   646,   650,   657,
     659,   667,   673,   675,   681,   683,   688,   693,   695,   698,
     701,   704,   707,   713,   716,   721,   723,   725,   727,   729,
     731,   733,   735,   737,   739,   741,   743,   748,   755,   762,
     768,   775,   799,   822,   835,   841,   847,   853,   862,   862,
     913,   913,   947,   959,   971,   983,   998,  1006,  1011,  1013,
    1018,  1025,  1036,  1036,  1047,  1057,  1070,  1094,  1149,  1168,
    1199,  1201,  1206,  1213,  1216,  1219,  1228,  1241,  1257,  1257,
    1272,  1272,  1282,  1284,  1289,  1296,  1296,  1308,  1308,  1319,
    1322,  1328,  1334,  1337,  1340,  1343,  1349,  1354,  1361,  1376,
    1394,  1402,  1405,  1411,  1421,  1431,  1439,  1450,  1455,  1463,
    1474,  1479,  1482,  1488,  1491,  1497,  1513,  1497,  1560,  1560,
    1619,  1622,  1625,  1631,  1631,  1641,  1647,  1650,  1653,  1656,
    1659,  1662,  1668,  1671,  1684,  1684,  1693,  1693,  1703,  1706,
    1709,  1715,  1718,  1721,  1724,  1727,  1730,  1733,  1736,  1739,
    1742,  1745,  1748,  1751,  1754,  1757,  1760,  1767,  1774,  1780,
    1786,  1792,  1799,  1802,  1805,  1808,  1811,  1814,  1817,  1820,
    1823,  1827,  1831,  1835,  1839,  1843,  1847,  1851,  1858,  1861,
    1867,  1869,  1874,  1877,  1883,  1886,  1892,  1892,  1901,  1903,
    1905,  1910,  1912,  1917,  1923,  1926,  1951,  1971,  1974,  1989,
    1989,  1998,  2000,  2002,  2007,  2009,  2014,  2030,  2034,  2044,
    2051,  2054,  2060,  2063,  2069,  2072,  2076,  2080,  2084,  2092,
    2095,  2098,  2104,  2107,  2113,  2116,  2119,  2123,  2129,  2133,
    2140,  2146,  2146,  2155,  2159,  2163,  2172,  2175,  2178,  2184,
    2187,  2193,  2232,  2235,  2238,  2242,  2251,  2251,  2267,  2282,
    2295,  2299,  2299,  2315,  2315,  2353,  2353,  2404,  2407,  2412,
    2415,  2418,  2421,  2426,  2432,  2435,  2440,  2443,  2450,  2453,
    2459,  2463,  2470,  2473,  2476,  2479,  2482,  2488,  2493,  2498,
    2509,  2517,  2524,  2532,  2539,  2542,  2547,  2558,  2564,  2564,
    2558,  2607,  2610,  2616,  2619,  2625,  2631,  2634,  2640,  2644,
    2650,  2653,  2657,  2660,  2666,  2666,  2681,  2681,  2716,  2716,
    2732,  2732,  2744,  2744,  2755,  2755,  2766,  2766,  2779,  2783,
    2794,  2798,  2805,  2808,  2817,  2825,  2830,  2836,  2845,  2853,
    2862,  2874,  2879,  2885,  2893,  2898,  2904,  2913,  2918,  2921,
    2928,  2931,  2934,  2937,  2943,  2946,  2954,  2962,  2968,  2977,
    2981,  2988,  2995,  3000,  3004,  3010,  3013,  3017,  3024,  3027,
    3030,  3030,  3038,  3041,  3046,  3062,  3065,  3068,  3074,  3077,
    3082,  3086,  3093,  3096,  3102,  3105,  3110,  3120,  3146,  3148,
    3156,  3176,  3176,  3204,  3204,  3214,  3218,  3223,  3231,  3234,
    3239,  3241,  3241,  3252,  3254
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if 1
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "\"invalid token\"",
  "\"FOR declaration\"", "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"",
  "\"WINDOW declaration\"", "\"ASC keyword\"", "\"DESC keyword\"",
  "\"IN keyword\"", "\"WITH keyword\"", "\"INTO keyword\"",
  "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"K_SHORTEST_PATHS keyword\"",
  "\"K_PATHS keyword\"", "\"ALL_SHORTEST_PATHS keyword\"",
  "\"DISTINCT modifier\"", "\"REMOVE command\"", "\"INSERT command\"",
  "\"UPDATE command\"", "\"REPLACE command\"", "\"UPSERT command\"",
  "\"null\"", "\"true\"", "\"false\"", "\"identifier\"",
  "\"quoted string\"", "\"integer number\"", "\"number\"",
  "\"bind parameter\"", "\"bind data source parameter\"", "\"assignment\"",
  "\"not operator\"", "\"and operator\"", "\"or operator\"",
  "\"not in operator\"", "\"~= operator\"", "\"~! operator\"",
  "\"== operator\"", "\"!= operator\"", "\"< operator\"", "\"> operator\"",
  "\"<= operator\"", "\">= operator\"", "\"like operator\"",
  "\"+ operator\"", "\"- operator\"", "\"* operator\"", "\"/ operator\"",
  "\"% operator\"", "\"?\"", "\":\"", "\"::\"", "\"..\"", "\",\"", "\"(\"",
  "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\";\"",
  "\"outbound modifier\"", "\"inbound modifier\"", "\"any modifier\"",
  "\"all modifier\"", "\"none modifier\"", "\"at least modifier\"",
  "\"select\"", "\"from\"", "\"as\"", "\"where\"", "\"group\"",
  "\"order\"", "\"by\"", "\"having\"", "\"unnest\"", "\"unnest_all\"",
  "\"$\"", "\"join\"", "\"on\"", "\"match\"", "\"start_as\"", "\"trail\"",
  "\"acyclic\"", "\"simple\"", "\"any_Shortest\"", "\"all_Shortest\"",
  "\"k_shortest\"", "\"k_any\"", "\"end_as\"", "\"cost\"",
  "\"cost_default\"", "WITH_COLLECTION_LIST", "UMINUS", "UPLUS",
  "UNEGATION", "FUNCCALL", "REFERENCE", "INDEXED", "EXPANSION", "'.'",
  "$accept", "optional_prune_variable", "with_collection",
  "with_collection_list", "optional_with", "with_key", "queryStart",
  "query", "aql_statements", "final_statement",
  "optional_statement_block_statements", "statement_block_statement",
  "more_output_variables", "for_output_variables", "prune_and_options",
  "traversal_graph_info", "shortest_path_graph_info",
  "k_shortest_paths_graph_info", "k_paths_graph_info",
  "all_shortest_paths_graph_info", "for_statement", "$@1", "$@2",
  "filter_statement", "let_statement", "let_list", "let_element",
  "count_into", "collect_variable_list", "$@3", "collect_statement",
  "collect_list", "collect_element", "collect_optional_into",
  "variable_list", "keep", "$@4", "aggregate", "$@5", "aggregate_list",
  "aggregate_element", "aggregate_function_call", "$@6", "sort_statement",
  "$@7", "sort_list", "sort_element", "sort_direction", "limit_statement",
  "window_statement", "return_statement", "in_or_into_collection",
  "remove_statement", "insert_statement", "update_parameters",
  "update_statement", "replace_parameters", "replace_statement",
  "update_or_replace", "upsert_input", "upsert_statement", "$@8", "$@9",
  "$@10", "quantifier", "distinct_expression", "$@11", "expression",
  "function_name", "function_call", "$@12", "$@13", "operator_unary",
  "operator_binary", "operator_ternary",
  "optional_function_call_arguments", "function_arguments_list",
  "compound_value", "array", "$@14", "optional_array_elements",
  "array_elements_list", "array_element", "for_options", "options",
  "object", "$@15", "optional_object_elements", "object_elements_list",
  "object_element", "array_filter_operator", "array_map_operator",
  "optional_array_filter", "optional_array_limit", "optional_array_return",
  "graph_collection", "graph_collection_list", "graph_subject", "$@16",
  "graph_direction", "graph_direction_steps", "reference", "$@17", "$@18",
  "$@19", "$@20", "ndarray_expression_list", "ndarray_expression",
  "range_index", "expression_or_none", "interval_element", "simple_value",
  "numeric_value", "value_literal", "in_or_into_collection_name",
  "bind_parameter", "bind_parameter_datasource_expected",
  "object_element_name", "variable_name", "sql_statements", "$@21", "$@22",
  "$@23", "with_statements", "with_list", "with_element",
  "from_statements", "collection_pair_list", "collection_element",
  "collection_pair", "$@24", "$@25", "$@26", "$@27", "$@28", "$@29",
  "$@30", "cost_info", "cost_default", "start_end_as", "start_and_end_as",
  "graph_info_any_shortest", "graph_info_all_shortest",
  "graph_info_k_shortest", "graph_info_any_k", "graph_option",
  "graph_order", "restrictor", "start_as", "graph_info", "path", "point",
  "edge", "step", "unnest_statement", "$@31", "expression_list",
  "expression_element", "optional_axis_name_list", "axis_name_list",
  "axis_name", "distinct_label", "select_list", "select_element",
  "where_statements", "group_by_statements", "$@32",
  "group_by_variable_list", "$@33", "group_by_list", "group_by_element",
  "having_statements", "order_by_statements", "$@34", "limit_statements", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-618)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-292)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      -3,    64,  -618,    93,   110,  -618,    46,  -618,    81,   102,
    -618,  -618,   499,  -618,  -618,  -618,  -618,    76,  -618,  -618,
    -618,  2503,    64,    64,    64,  2503,  2384,   156,  -618,  2503,
    2503,  2503,  2503,  2503,  2503,    24,  -618,  -618,  -618,  -618,
    -618,   243,  -618,  -618,  -618,  -618,  -618,    14,    16,    17,
      18,    20,    93,  -618,   144,  -618,  -618,  -618,    30,  -618,
    -618,  -618,  -618,  -618,  2503,   142,  2503,  2503,  2503,  -618,
    -618,  2251,   170,  -618,  -618,  -618,  -618,  -618,  -618,  -618,
     -40,  -618,  -618,  -618,  -618,   148,   201,  -618,   160,  -618,
     245,  2251,  -618,  -618,  2251,   220,  -618,   253,    64,   271,
    2503,  1500,  1544,   288,  1589,  1589,  -618,  1272,  -618,  1319,
    -618,  -618,  -618,  -618,    64,   253,   279,   271,  -618,  -618,
    2503,  -618,  -618,  -618,  -618,  1633,    10,    58,  2503,  2503,
     212,  2503,  2503,  2503,  2503,  2503,  2503,  2503,  2503,  2503,
    2503,  2503,  2503,  2503,  2503,  2503,  2503,  2503,  2465,  2503,
    -618,  -618,  -618,   293,   178,   318,  -618,   255,   120,    64,
    2422,    64,  2503,  2503,   350,    64,   308,  -618,   313,  -618,
     337,   253,   315,  -618,  1140,  2503,   308,  -618,  2541,   161,
     253,   253,  2503,   253,  2503,   253,  2503,   353,   341,  -618,
     308,   253,  -618,   253,  1003,   319,  -618,  2503,  -618,    64,
     321,  -618,  -618,   333,  -618,   334,  2503,   329,   335,  -618,
     342,  2251,   328,   338,  -618,   362,  2503,  2503,  2503,  2338,
    2295,   362,   158,   158,   158,   158,   214,   214,   214,   214,
     158,   303,   303,  -618,  -618,  -618,  2503,  1677,   309,  2503,
    2503,  2503,  2503,  2503,  2503,  2503,  2503,  2503,  -618,  2503,
    -618,  -618,   344,   348,  2579,  -618,  -618,  -618,  -618,  -618,
    -618,  -618,  -618,  -618,  -618,  -618,  -618,  1363,   197,   699,
    -618,  2251,  2251,    64,   343,  -618,   360,  -618,    64,  2503,
    -618,  2503,  -618,  -618,  -618,  -618,  -618,  -618,  2251,   288,
    1197,   561,   801,  -618,  -618,  -618,  -618,  -618,  -618,  -618,
    1589,  -618,  1589,  -618,  2251,  2503,  2503,    64,  -618,  -618,
      64,  2503,   327,  2251,   357,   345,  -618,  2503,  1722,  -618,
      58,  2503,  -618,  2503,   158,   158,   158,  2251,  2503,  1766,
     362,   362,   158,   158,   214,   214,   214,   214,   361,  -618,
     631,  -618,   631,    82,  1810,   -47,  -618,  -618,   347,   363,
     394,   247,   397,  -618,  2503,  2503,  2503,  2503,  1225,  -618,
      64,   399,  -618,  2251,  -618,  -618,   253,   253,   407,  1412,
    2251,   372,  -618,  -618,  -618,  2617,  -618,  -618,  2503,  2251,
     376,  -618,  2251,  -618,  2251,   340,  -618,  2503,   373,   431,
     959,   371,   429,  2579,  -618,  2503,  2503,  2579,  -618,  2503,
    -618,  1855,  1899,  1943,  1987,   239,  -618,   379,  -618,   159,
    -618,  -618,  -618,  -618,   263,  -618,  -618,  2503,  -618,  -618,
    2503,    64,   -25,  1047,   380,   359,  -618,   365,  2251,  2503,
    2503,  2503,  2503,  2503,  2503,  2503,  2503,  2503,  2251,  2503,
    2503,  2503,  -618,  2503,   439,  -618,  2251,   389,  2031,   383,
     417,  2251,   412,  2075,  2503,  2503,  2503,  2503,  -618,  -618,
    -618,  -618,  -618,  -618,  -618,  1412,  1589,  -618,   221,    64,
     -18,  2617,  2617,  2503,   381,  2251,   362,   362,   158,   158,
     214,   214,   214,   214,  2119,  2251,  2251,  2163,  2503,   384,
    2503,  -618,  -618,  -618,   308,  2503,  2503,  1225,  1225,  1225,
    1225,   118,  2503,  2503,   253,  -618,  -618,  -618,  -618,   382,
    -618,  2503,  -618,  -618,   359,   374,  2251,   386,   385,  -618,
     457,  2503,  2251,  -618,  2251,  -618,  2251,  2251,   253,   253,
     253,   253,  -618,   403,   405,  1589,  -618,   408,    64,    64,
      64,   440,    64,   278,   -18,  1091,   418,  -618,   396,  2503,
    -618,   393,   465,   400,  2503,  2251,  -618,  -618,  -618,  -618,
     118,  -618,   253,    64,   378,    86,   441,  2503,   408,   378,
     408,   378,   408,  -618,  2503,   408,  -618,  -618,  -618,  -618,
    -618,    64,   430,   300,  -618,   805,  -618,  -618,  2503,  -618,
    -618,  -618,  2503,  -618,  2251,  -618,  -618,   420,   448,  2503,
     419,   437,  -618,   856,  -618,   286,  2503,   299,  2503,   111,
     907,  -618,   126,  -618,  2503,  -618,  -618,   425,    64,  2251,
     427,  -618,  2503,  2251,  -618,   391,  -618,     4,   438,   443,
      64,   419,   445,  -618,   419,   446,  -618,   419,  2503,   447,
      64,   419,   453,  -618,   300,   462,  2503,   315,   477,  -618,
    -618,   449,   -16,   419,  2503,   459,   460,   461,   464,   467,
    1456,   468,  -618,   475,   476,   -28,  -618,  2503,  -618,  -618,
    -618,   486,   408,   491,     2,    39,   419,    95,   419,    54,
    2503,  -618,   419,   112,   419,   300,  -618,   744,   408,   511,
     408,    64,   492,   408,   494,   495,   408,   497,   454,   498,
    2207,   500,   454,   408,   501,  -618,    64,   526,    64,   544,
    -618,   408,  -618,   408,   408,  -618,   408,   408,   408,  -618,
     408,   408,  -618,   408,  -618,    64,  -618,    64,  -618,  -618,
    -618,  -618,  -618,  -618,  -618,  -618,  -618,  -618,  -618
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       9,    11,    23,     0,     0,    13,     0,   286,     0,   292,
     293,    12,     0,     4,   283,   282,     6,    10,     5,     1,
     287,     0,     0,     0,     0,     0,     0,    62,    87,     0,
       0,     0,     0,     0,     0,     0,    16,    24,    25,    27,
      26,    73,    28,    29,    30,    31,    17,    32,    33,    34,
      35,    36,     0,     8,   372,   274,   275,   276,   241,   272,
     270,   271,   281,   280,     0,     0,     0,     0,   246,   199,
     186,   295,     0,   244,   126,   127,   128,   242,   184,   185,
     130,   273,   129,   243,   294,    39,     0,    37,    57,    58,
       0,    56,   123,   100,   125,     0,    80,   197,     0,    73,
       0,    96,     0,   185,     0,     0,   107,     0,   110,     0,
     115,   118,   113,   114,     0,   197,   197,    73,     7,   373,
       0,   140,   136,   138,   139,     0,    23,   201,   188,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   120,   122,     0,     0,     0,   134,   251,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    64,    63,    70,
       0,   197,    88,    89,    92,     0,     0,    98,     0,     0,
     197,   197,     0,   197,     0,   197,     0,     0,    74,    65,
      78,   197,    68,   197,   377,   288,   374,   180,   245,     0,
       0,    14,    15,   206,   285,     0,     0,     0,   202,   204,
       0,   193,     0,   189,   191,   154,     0,     0,     0,   142,
     141,   155,   160,   161,   148,   149,   150,   151,   152,   153,
     159,   143,   144,   145,   146,   147,     0,     0,   131,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   133,   180,
     212,   210,   253,   255,   264,   248,   250,   249,    38,   236,
     237,   238,    50,    52,    53,    54,    55,    48,   239,     0,
      59,    60,   124,     0,    81,    82,     0,   198,     0,     0,
      66,     0,    93,    94,    91,    95,   268,   269,    97,     0,
     241,   272,   280,   101,   277,   278,   279,   102,   103,   104,
       0,   105,     0,   108,   116,     0,     0,     0,    69,    67,
       0,     0,   296,   182,     0,   181,   247,     0,     0,   200,
     203,     0,   187,   190,   157,   158,   156,   179,     0,     0,
     168,   169,   162,   163,   164,   165,   166,   167,     0,   211,
     214,   213,   214,   241,   259,     0,   257,   260,     0,     0,
      40,   238,   194,   240,     0,     0,     0,     0,     0,    61,
       0,     0,    71,    72,    90,    99,   197,   197,     0,     0,
      75,    79,    76,   376,   375,     0,   289,   137,     0,   208,
       0,   205,   207,   192,   178,     0,   135,     0,     0,     0,
       0,     0,   219,   264,   252,   264,   264,     0,    51,     0,
      49,     0,     0,     0,     0,     0,   224,   230,    43,     0,
     225,    83,   132,    84,     0,   106,   109,     0,   111,   112,
       0,     0,   241,   306,   297,   298,   300,   378,   183,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   215,     0,
       0,     0,   254,     0,   222,   258,   265,   266,   265,     0,
      41,     2,     0,   195,     0,     0,     0,     0,   235,   234,
     233,   231,   226,   227,    85,     0,     0,    77,   308,     0,
     358,     0,     0,     0,   380,   209,   176,   177,   170,   171,
     172,   173,   174,   175,     0,   216,   218,   220,     0,     0,
       0,   263,   261,   262,     0,     0,     0,     0,     0,     0,
       0,     0,   180,     0,   197,   310,   312,   314,   316,   338,
     304,     0,   360,   307,   299,     0,   379,     0,   390,   381,
       0,     0,   223,   256,   267,    42,     3,   196,   197,   197,
     197,   197,   228,   232,     0,     0,   119,     0,   349,   349,
     349,     0,   349,   340,   358,     0,   359,   362,   365,   344,
     383,     0,   393,   388,     0,   221,    44,    45,    47,    46,
       0,    86,   197,     0,   318,     0,     0,   322,     0,   318,
       0,   318,     0,   339,   344,     0,   341,   342,   343,   337,
     305,     0,     0,     0,   361,   301,   303,   302,     0,   391,
     394,   290,     0,   382,   217,   229,   117,     0,     0,   322,
     354,     0,   350,     0,   313,     0,   322,     0,   322,   355,
       0,   309,   355,   364,     0,   370,   371,   366,     0,   387,
     384,   385,     0,   389,   351,   320,   311,     0,     0,     0,
       0,   354,     0,   315,   354,     0,   317,   354,     0,     0,
       0,   354,     0,   363,     0,   345,     0,   392,     0,   319,
     353,     0,     0,   354,     0,     0,     0,     0,     0,     0,
       0,     0,   345,     0,     0,     0,   368,     0,   386,   321,
     352,     0,     0,     0,     0,     0,   354,     0,   354,   355,
       0,   357,   354,   355,   354,     0,   367,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   355,     0,
       0,     0,   355,     0,     0,   369,     0,     0,     0,     0,
     323,     0,   330,     0,     0,   333,     0,     0,     0,   356,
       0,     0,   348,     0,   324,     0,   327,     0,   328,   329,
     331,   332,   334,   336,   335,   346,   347,   325,   326
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -618,  -618,    11,  -618,  -618,  -618,  -618,  -618,   424,  -618,
    -618,  -618,  -618,  -618,  -618,  -618,  -618,  -618,  -618,  -618,
    -618,  -618,  -618,  -618,  -618,  -618,   398,   513,  -618,  -618,
    -618,  -618,   282,   -87,  -618,  -618,  -618,   -37,  -618,  -618,
     203,  -618,  -618,  -618,  -618,   -46,   294,  -618,    25,  -618,
    -618,  -100,  -618,  -618,  -618,  -618,  -618,  -618,   113,  -618,
    -618,  -618,  -618,  -618,  -160,  -618,  -618,   101,   218,  -618,
    -618,  -618,  -618,  -618,  -618,  -246,  -618,  -618,  -618,  -618,
    -618,  -618,   258,  -618,   -77,   -29,  -618,  -618,  -618,   270,
    -618,  -618,   241,  -618,  -618,  -475,  -618,  -164,  -618,  -152,
    -618,  -618,  -618,  -618,  -618,  -618,  -618,   200,   198,   204,
    -618,  -618,  -618,   421,   422,   -33,    66,  -618,    -1,   472,
    -618,  -618,  -618,  -618,  -618,   578,  -618,  -618,   131,   133,
    -618,  -618,  -618,  -618,  -618,  -618,  -618,  -291,  -618,  -423,
    -618,  -618,  -618,  -618,  -618,  -618,  -618,  -618,    32,  -618,
    -239,  -391,  -532,  -602,    63,  -618,  -618,    -6,  -618,  -618,
    -617,  -618,  -618,   298,  -618,  -618,  -618,  -618,  -618,  -618,
     -36,  -618,  -618,  -618,  -618
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,   450,    16,    17,     2,     3,     4,   200,    11,    36,
      12,    37,    85,    86,   398,   262,   263,   264,   265,   266,
      38,   352,   350,    39,    40,    88,    89,    97,    41,    98,
      42,   168,   169,   116,   371,   191,   307,    99,   165,   274,
     275,   413,   502,    43,   100,   172,   173,   284,    44,    45,
      46,   180,    47,    48,   106,    49,   108,    50,   420,   111,
      51,   186,   368,   187,   154,    93,   163,   603,    72,    73,
     249,   197,    74,    75,    76,   314,   315,    77,    78,   128,
     212,   213,   214,   400,   167,    79,   127,   207,   208,   209,
     252,   253,   391,   444,   489,   407,   533,   408,   501,   409,
     269,    80,   126,   254,   340,   342,   345,   346,   347,   348,
     491,   285,    81,    82,   293,    83,   410,   210,   566,     5,
      54,   312,   427,     6,     9,    10,   376,   424,   425,   426,
     544,   470,   509,   537,   538,   539,   540,   599,   649,   604,
     586,   564,   567,   569,   571,   542,   543,   579,   587,   574,
     568,   565,   628,   639,   513,   548,   546,   547,   584,   665,
     617,   120,   195,   196,   474,   518,   553,   519,   588,   620,
     621,   593,   552,   622,   591
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       8,   103,   113,   338,   117,   181,   112,   183,   268,   185,
     642,     1,   171,   393,   -18,   129,   -19,   -20,   -21,   394,
     -22,     8,    87,    90,   199,   157,   532,   666,    53,   110,
     193,   671,   685,  -132,   686,     7,  -132,   672,   189,   192,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,    62,
      63,   149,   468,   118,   511,   512,   177,   158,   705,    18,
     650,  -291,   150,   151,   152,   153,   -18,   699,   -19,   -20,
     -21,   703,   -22,    18,  -291,   595,   692,    69,  -132,   203,
     204,  -132,   693,   205,   280,     7,   717,   170,   691,   655,
     721,   698,   657,   298,   299,   659,   301,    13,   303,   663,
      19,    14,    15,   188,   308,   353,   309,   638,    18,  -286,
      20,   673,    71,   206,    13,   257,    91,    94,    14,    15,
     101,   102,   104,   105,   107,   109,    52,   277,   600,   601,
    -132,   287,   695,  -132,   694,  -286,   697,   289,   696,   406,
     701,   255,   704,    14,    15,    62,    63,    21,   258,   702,
      90,   277,    22,   637,   276,   121,   119,   123,   124,   125,
      95,   129,    96,   256,   638,   638,   626,   605,   641,   607,
     389,   609,   389,   633,   612,   636,   259,   260,   261,   638,
     462,   240,   294,   295,    62,    63,   130,   296,     8,   133,
     366,   174,   367,   122,   138,   139,   140,   141,   159,   143,
     144,   145,   146,   147,   160,   354,   355,   149,   356,   241,
     161,   194,   242,   243,   244,   245,   246,   247,   155,   211,
     215,   156,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   237,
     238,   164,   365,   349,   216,   217,   534,    95,   114,    96,
    -121,   267,   218,   271,   272,   143,   144,   145,   146,   147,
     458,   459,   359,   149,    62,    63,   288,   170,   606,   215,
     608,   689,   162,   300,   166,   302,   114,   304,  -121,   415,
     416,  -121,  -121,  -121,  -121,  -121,  -121,   707,   313,   709,
     570,   572,   712,   575,    96,   715,   372,   318,   250,   373,
     190,   251,   722,   505,   506,   507,   508,   324,   325,   326,
     728,   155,   729,   730,   464,   731,   732,   733,   615,   734,
     735,     7,   736,   528,   529,   530,   531,   327,   631,   632,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   248,
     313,   634,   635,   430,   239,   344,   145,   146,   147,   276,
     143,   144,   145,   146,   147,   273,   504,   576,   577,   578,
     358,    69,   460,   278,   279,   281,   463,   305,   306,   311,
     363,   431,   174,   316,   432,   433,   434,   435,   436,   437,
    -284,   317,   349,   319,   322,   320,   452,   361,   323,   321,
     339,   341,   375,   360,   395,   378,   369,   370,   138,   139,
     140,   141,   194,   143,   144,   145,   146,   147,   379,   377,
     467,   149,   382,   386,   211,   397,   396,   536,   399,   384,
     412,   417,   421,   429,   439,   562,   440,   442,   443,   461,
     471,   390,   473,   390,   472,   488,   490,   493,   494,   495,
     523,   556,   557,   558,   559,   401,   402,   403,   404,   517,
     549,   541,   554,   560,   551,   525,   550,   561,   510,   563,
     582,   573,   583,   589,    29,   598,   423,   614,   602,   428,
     625,   592,   624,   629,   627,   596,   644,   646,   438,   648,
     652,   656,   658,   661,   344,   653,   446,   448,   451,   664,
     453,   667,    23,    24,    25,    26,    27,    28,    29,    30,
     669,   675,   676,   677,   708,   670,   678,   638,   465,   679,
     682,   466,    31,    32,    33,    34,    35,   683,   684,   725,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   688,
     484,   485,   486,   690,   487,   711,   713,   727,   714,   716,
     201,   718,   720,   723,   115,   497,   498,   499,   500,   270,
     362,  -278,   597,   411,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,   423,   423,   516,   364,   647,   590,   503,   414,
     613,   383,   616,   392,  -278,  -278,  -278,  -278,  -278,   522,
     381,   524,  -278,   445,   449,   286,   526,   527,   202,   447,
      84,   297,   514,   313,   535,   515,   611,   580,   643,   374,
     668,     0,   545,     0,     0,     0,     0,   645,     0,     0,
       0,     0,   555,  -278,     0,     0,   651,     0,     0,   654,
       0,     0,     0,     0,     0,     0,   387,     0,     0,   662,
       0,     0,     0,   616,     0,     0,     0,     0,     0,     0,
     585,     0,     0,     0,     0,   594,     0,     0,     0,    55,
      56,    57,    58,    59,    60,    61,    62,    63,     0,    64,
       0,     0,     0,     0,     0,   610,     0,     0,     0,     0,
       0,    65,    66,    67,   616,     0,     0,     0,     0,   619,
     710,     0,    68,   623,    69,     0,    70,     0,     0,     0,
       0,   150,   151,   152,   388,   724,     0,   726,     0,     0,
       0,     0,     0,     0,     0,   545,     0,     0,     0,   357,
       0,     0,     0,   174,   737,     0,   738,    55,    56,    57,
      58,    59,    60,    61,    62,    63,     0,    64,     0,   660,
       0,     0,     0,     0,     0,     0,     0,   619,     0,    65,
      66,    67,     0,     0,     0,   674,     0,   129,     0,     0,
      68,     0,    69,     0,    70,     0,     0,     0,   687,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   700,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,  -279,     0,   149,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,     0,     0,   150,   151,   152,   153,   129,     0,
       0,     0,     0,     0,  -279,  -279,  -279,  -279,  -279,     0,
       0,     0,  -279,     0,     0,     0,     0,     0,     0,     0,
     706,     0,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,     0,  -279,   149,     0,     0,     0,     0,   129,
       0,     0,     0,     0,     0,   150,   151,   152,   153,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   618,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,     0,
     129,     0,     0,     0,     0,     0,   150,   151,   152,   153,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   630,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   441,     0,   149,     0,     0,     0,
       0,     0,   129,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   640,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   129,     0,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     129,     0,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,   152,   153,     0,     0,   310,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   129,     0,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,   469,     0,     0,     0,     0,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,     0,     0,
     149,   282,   283,   129,     0,     0,     0,     0,     0,     0,
       0,   150,   151,   152,   153,     0,     0,   581,    55,    56,
      57,     0,    59,    60,    61,    62,    63,     0,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,  -277,     0,   149,
    -277,  -277,  -277,  -277,  -277,  -277,  -277,  -277,     0,     0,
     150,   151,   152,   153,     0,     0,     0,     0,     0,     0,
    -277,  -277,  -277,  -277,  -277,     0,     0,     0,  -277,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   129,     0,
       0,     0,   405,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -132,   406,     0,  -132,  -277,
      14,    15,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,     0,     0,   149,   178,   182,   179,     0,     0,
       0,     0,     0,   259,   260,   351,   151,   152,   153,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,     0,
       0,   149,   178,   184,   179,     0,     0,     0,     0,     0,
       0,     0,   150,   151,   152,   153,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   129,     0,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,   129,     0,     0,     0,     0,
       0,   259,   260,   351,   151,   152,   153,   418,   419,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   129,
       0,   149,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,   151,   152,   153,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   129,     0,   149,   680,     0,     0,     0,
     681,     0,     0,     0,     0,     0,   150,   151,   152,   153,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   129,   176,   149,
     175,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   152,   153,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,     0,   178,   149,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,   151,   152,   153,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   129,     0,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     129,     0,   149,     0,     0,   198,     0,     0,     0,     0,
       0,     0,     0,   150,   151,   152,   153,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   328,   129,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   129,
       0,   149,     0,     0,     0,     0,     0,     0,   380,     0,
       0,     0,   150,   151,   152,   153,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   129,     0,   149,     0,     0,   385,     0,
       0,     0,     0,     0,     0,     0,   150,   151,   152,   153,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,  -265,   129,   149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   152,   153,     0,     0,   454,     0,     0,     0,
       0,     0,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   129,     0,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,   152,   153,     0,
     455,     0,     0,     0,     0,     0,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   129,     0,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,   456,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     129,     0,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,   152,   153,     0,   457,     0,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   129,     0,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   129,     0,
     149,     0,     0,     0,     0,   492,     0,     0,     0,     0,
       0,   150,   151,   152,   153,     0,   496,     0,     0,     0,
       0,     0,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   129,     0,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,   152,   153,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   129,     0,   149,     0,
       0,   520,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     129,     0,   149,   521,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,   152,   153,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   129,     0,   149,     0,     0,     0,
       0,   719,     0,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   129,     0,
     149,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   150,   151,   152,   153,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,     0,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   129,     0,     0,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,   152,   153,     0,
       0,     0,     0,     0,     0,     0,   130,     0,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,     0,     0,     0,   149,     0,     0,
       0,     0,     0,     0,     0,     0,    92,     0,   150,   151,
     152,   153,    55,    56,    57,    58,    59,    60,    61,    62,
      63,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,     0,
       0,     0,     0,     0,     0,    68,     0,    69,     0,    70,
      55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,     0,     0,     0,
       0,     0,     0,    68,     0,    69,     0,    70,     0,     0,
     259,   260,   261,    55,    56,    57,    58,    59,    60,    61,
      62,    63,     0,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
       0,     0,   236,     0,     0,     0,    68,     0,    69,     0,
      70,    55,    56,    57,    58,    59,    60,    61,    62,    63,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    65,    66,    67,     0,     0,     0,     0,
       0,     0,     0,     0,    68,     0,    69,     0,    70,    55,
      56,    57,   290,   291,    60,    61,    62,   292,     0,    64,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    65,    66,    67,     0,     0,     0,     0,     0,     0,
       0,     0,    68,     0,    69,     0,    70,    55,    56,    57,
     343,    59,    60,    61,    62,    63,     0,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
      66,    67,     0,     0,     0,     0,     0,     0,     0,     0,
      68,     0,    69,     0,    70,    55,    56,    57,   422,    59,
      60,    61,    62,    63,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,    66,    67,
       0,     0,     0,     0,     0,     0,     0,     0,    68,     0,
      69,     0,    70
};

static const yytype_int16 yycheck[] =
{
       1,    30,    35,   249,    41,   105,    35,   107,   160,   109,
     612,    14,    99,    60,     0,    13,     0,     0,     0,    66,
       0,    22,    23,    24,    14,    65,   501,   644,    17,     5,
     117,    47,    60,    58,    62,    31,    61,    53,   115,   116,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    35,
      36,    59,    87,    52,    82,    83,   103,   107,   685,     3,
      66,    74,    70,    71,    72,    73,    62,   679,    62,    62,
      62,   683,    62,    17,    74,   560,    47,    63,    58,    31,
      32,    61,    53,    35,   171,    31,   698,    98,    96,   631,
     702,    47,   634,   180,   181,   637,   183,    31,   185,   641,
       0,    35,    36,   114,   191,   267,   193,    63,    52,    37,
      74,   653,    21,    65,    31,   158,    25,    26,    35,    36,
      29,    30,    31,    32,    33,    34,    60,   166,    52,    53,
      58,   174,    47,    61,   676,    63,   678,   176,    53,    31,
     682,    31,   684,    35,    36,    35,    36,    76,   159,    47,
     161,   190,    60,    52,   165,    64,    22,    66,    67,    68,
      14,    13,    16,    53,    63,    63,   599,   568,    52,   570,
     340,   572,   342,   606,   575,   608,    68,    69,    70,    63,
      31,    13,    31,    32,    35,    36,    38,    36,   199,    41,
     300,   100,   302,    61,    46,    47,    48,    49,    60,    51,
      52,    53,    54,    55,    13,    18,    19,    59,    21,    41,
      60,   120,    44,    45,    46,    47,    48,    49,    58,   128,
     129,    61,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,    31,   289,   254,    42,    43,   502,    14,    15,    16,
      13,   160,    50,   162,   163,    51,    52,    53,    54,    55,
      31,    32,   273,    59,    35,    36,   175,   278,   569,   178,
     571,   672,    37,   182,    31,   184,    15,   186,    41,   366,
     367,    44,    45,    46,    47,    48,    49,   688,   197,   690,
     539,   540,   693,   542,    16,   696,   307,   206,    53,   310,
      31,    56,   703,    92,    93,    94,    95,   216,   217,   218,
     711,    58,   713,   714,    61,   716,   717,   718,    28,   720,
     721,    31,   723,   497,   498,   499,   500,   236,    52,    53,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    31,
     249,    52,    53,    13,    61,   254,    53,    54,    55,   360,
      51,    52,    53,    54,    55,    15,   466,    89,    90,    91,
     269,    63,   405,    60,    37,    60,   409,    24,    37,    60,
     279,    41,   281,    62,    44,    45,    46,    47,    48,    49,
      57,    57,   393,    64,    66,    60,   397,    37,    60,    57,
      56,    53,    75,    60,    57,    60,   305,   306,    46,    47,
      48,    49,   311,    51,    52,    53,    54,    55,   317,    62,
     421,    59,   321,    62,   323,    31,    63,   504,    31,   328,
      31,    24,    60,    57,    61,   535,     5,    66,     9,    60,
      60,   340,    77,   342,    85,     6,    57,    64,    31,    37,
      66,   528,   529,   530,   531,   354,   355,   356,   357,    78,
      86,    79,     5,    60,    79,   494,    80,    62,   469,    61,
      52,    31,    76,    80,     9,    97,   375,    47,    37,   378,
      32,    81,    62,    46,    65,   562,    61,    60,   387,    98,
      52,    46,    46,    46,   393,    52,   395,   396,   397,    46,
     399,    39,     3,     4,     5,     6,     7,     8,     9,    10,
      33,    52,    52,    52,     3,    66,    52,    63,   417,    52,
      52,   420,    23,    24,    25,    26,    27,    52,    52,     3,
     429,   430,   431,   432,   433,   434,   435,   436,   437,    53,
     439,   440,   441,    52,   443,    53,    52,     3,    53,    52,
     126,    53,    52,    52,    41,   454,   455,   456,   457,   161,
     278,     0,   563,   360,     3,     4,     5,     6,     7,     8,
       9,    10,   471,   472,   473,   281,   622,   552,   465,   361,
     581,   323,   583,   342,    23,    24,    25,    26,    27,   488,
     320,   490,    31,   393,   396,   174,   495,   496,   126,   395,
      22,   179,   471,   502,   503,   472,   574,   544,   614,   311,
     646,    -1,   511,    -1,    -1,    -1,    -1,   618,    -1,    -1,
      -1,    -1,   521,    62,    -1,    -1,   627,    -1,    -1,   630,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,   640,
      -1,    -1,    -1,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     549,    -1,    -1,    -1,    -1,   554,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    -1,    38,
      -1,    -1,    -1,    -1,    -1,   574,    -1,    -1,    -1,    -1,
      -1,    50,    51,    52,   685,    -1,    -1,    -1,    -1,   588,
     691,    -1,    61,   592,    63,    -1,    65,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,   706,    -1,   708,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,    -1,    20,
      -1,    -1,    -1,   622,   725,    -1,   727,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    -1,    38,    -1,   638,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   646,    -1,    50,
      51,    52,    -1,    -1,    -1,   654,    -1,    13,    -1,    -1,
      61,    -1,    63,    -1,    65,    -1,    -1,    -1,   667,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   680,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,     0,    -1,    59,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    70,    71,    72,    73,    13,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      96,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    62,    59,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      13,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,     5,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    13,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    -1,
      59,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    -1,    76,    28,    29,
      30,    -1,    32,    33,    34,    35,    36,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,     0,    -1,    59,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    31,    -1,    61,    62,
      35,    36,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    -1,    -1,    59,    13,    14,    15,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      -1,    59,    13,    14,    15,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      -1,    -1,    59,    -1,    -1,    13,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    71,    72,    73,    25,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    60,    -1,    -1,    -1,
      64,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    14,    59,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    13,    59,    15,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    -1,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    13,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    13,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    13,    -1,
      59,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,
      -1,    64,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    13,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    13,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    70,    71,
      72,    73,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    63,    -1,    65,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    63,    -1,    65,    -1,    -1,
      68,    69,    70,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    51,    52,    -1,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    61,    -1,    63,    -1,
      65,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    63,    -1,    65,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    -1,    63,    -1,    65,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    -1,    63,    -1,    65,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      63,    -1,    65
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    14,   112,   113,   114,   227,   231,    31,   226,   232,
     233,   116,   118,    31,    35,    36,   110,   111,   224,     0,
      74,    76,    60,     3,     4,     5,     6,     7,     8,     9,
      10,    23,    24,    25,    26,    27,   117,   119,   128,   131,
     132,   136,   138,   151,   156,   157,   158,   160,   161,   163,
     165,   168,    60,   110,   228,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    38,    50,    51,    52,    61,    63,
      65,   175,   176,   177,   180,   181,   182,   185,   186,   193,
     209,   220,   221,   223,   233,   120,   121,   226,   133,   134,
     226,   175,    22,   173,   175,    14,    16,   135,   137,   145,
     152,   175,   175,   193,   175,   175,   162,   175,   164,   175,
       5,   167,   193,   223,    15,   135,   141,   145,   110,    22,
     269,   175,    61,   175,   175,   175,   210,   194,   187,    13,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    59,
      70,    71,    72,    73,   172,    58,    61,    65,   107,    60,
      13,    60,    37,   174,    31,   146,    31,   192,   139,   140,
     226,   141,   153,   154,   175,    60,    14,   145,    13,    15,
     159,   159,    14,   159,    14,   159,   169,   171,   226,   192,
      31,   143,   192,   141,   175,   270,   271,   179,    62,    14,
     115,   116,   227,    31,    32,    35,    65,   195,   196,   197,
     225,   175,   188,   189,   190,   175,    42,    43,    50,   175,
     175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
     175,   175,   175,   175,   175,   175,    57,   175,   175,    61,
      13,    41,    44,    45,    46,    47,    48,    49,    31,   178,
      53,    56,   198,   199,   211,    31,    53,   223,   226,    68,
      69,    70,   123,   124,   125,   126,   127,   175,   207,   208,
     134,   175,   175,    15,   147,   148,   226,   193,    60,    37,
     192,    60,    11,    12,   155,   219,   221,   223,   175,   193,
      31,    32,    36,   222,    31,    32,    36,   222,   192,   192,
     175,   192,   175,   192,   175,    24,    37,   144,   192,   192,
      76,    60,   229,   175,   183,   184,    62,    57,   175,    64,
      60,    57,    66,    60,   175,   175,   175,   175,    57,   175,
     175,   175,   175,   175,   175,   175,   175,   175,   183,    56,
     212,    53,   213,    31,   175,   214,   215,   216,   217,   226,
     130,    70,   129,   207,    18,    19,    21,    20,   175,   226,
      60,    37,   140,   175,   154,   145,   159,   159,   170,   175,
     175,   142,   226,   226,   271,    75,   234,    62,    60,   175,
      66,   197,   175,   190,   175,    62,    62,     5,    73,   172,
     175,   200,   200,    60,    66,    57,    63,    31,   122,    31,
     191,   175,   175,   175,   175,    17,    31,   203,   205,   207,
     224,   148,    31,   149,   176,   192,   192,    24,    25,    26,
     166,    60,    31,   175,   235,   236,   237,   230,   175,    57,
      13,    41,    44,    45,    46,    47,    48,    49,   175,    61,
       5,     5,    66,     9,   201,   215,   175,   217,   175,   216,
     109,   175,   226,   175,    31,    31,    31,    31,    31,    32,
     223,    60,    31,   223,    61,   175,   175,   226,    87,    76,
     239,    60,    85,    77,   272,   175,   175,   175,   175,   175,
     175,   175,   175,   175,   175,   175,   175,   175,     6,   202,
      57,   218,    64,    64,    31,    37,    31,   175,   175,   175,
     175,   206,   150,   166,   159,    92,    93,    94,    95,   240,
     226,    82,    83,   262,   236,   237,   175,    78,   273,   275,
      62,    60,   175,    66,   175,   193,   175,   175,   205,   205,
     205,   205,   203,   204,   183,   175,   192,   241,   242,   243,
     244,    79,   253,   254,   238,   175,   264,   265,   263,    86,
      80,    79,   280,   274,     5,   175,   192,   192,   192,   192,
      60,    62,   159,    61,   249,   259,   226,   250,   258,   251,
     258,   252,   258,    31,   257,   258,    89,    90,    91,   255,
     262,    76,    52,    76,   266,   175,   248,   256,   276,    80,
     156,   282,    81,   279,   175,   203,   192,   226,    97,   245,
      52,    53,    37,   175,   247,   259,   245,   259,   245,   259,
     175,   256,   259,   226,    47,    28,   226,   268,    88,   175,
     277,   278,   281,   175,    62,    32,   247,    65,   260,    46,
      88,    52,    53,   247,    52,    53,   247,    52,    63,   261,
      88,    52,   261,   265,    61,   226,    60,   153,    98,   246,
      66,   226,    52,    52,   226,   260,    46,   260,    46,   260,
     175,    46,   226,   260,    46,   267,   268,    39,   278,    33,
      66,    47,    53,   260,   175,    52,    52,    52,    52,    52,
      60,    64,    52,    52,    52,    60,    62,   175,    53,   259,
      52,    96,    47,    53,   260,    47,    53,   260,    47,   261,
     175,   260,    47,   261,   260,   268,    96,   259,     3,   259,
     226,    53,   259,    52,    53,   259,    52,   261,    53,    64,
      52,   261,   259,    52,   226,     3,   226,     3,   259,   259,
     259,   259,   259,   259,   259,   259,   259,   226,   226
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   108,   109,   109,   110,   110,   111,   111,   111,   112,
     112,   113,   114,   114,   115,   115,   116,   117,   117,   117,
     117,   117,   117,   118,   118,   119,   119,   119,   119,   119,
     119,   119,   119,   119,   119,   119,   119,   120,   120,   121,
     122,   122,   122,   123,   124,   125,   126,   127,   129,   128,
     130,   128,   128,   128,   128,   128,   131,   132,   133,   133,
     134,   135,   137,   136,   138,   138,   138,   138,   138,   138,
     139,   139,   140,   141,   141,   141,   142,   142,   144,   143,
     146,   145,   147,   147,   148,   150,   149,   152,   151,   153,
     153,   154,   155,   155,   155,   155,   156,   156,   157,   157,
     158,   159,   159,   160,   161,   162,   162,   163,   164,   164,
     165,   166,   166,   167,   167,   169,   170,   168,   171,   168,
     172,   172,   172,   174,   173,   173,   175,   175,   175,   175,
     175,   175,   176,   176,   178,   177,   179,   177,   180,   180,
     180,   181,   181,   181,   181,   181,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   181,   181,   181,   182,   182,
     183,   183,   184,   184,   185,   185,   187,   186,   188,   188,
     188,   189,   189,   190,   191,   191,   191,   192,   192,   194,
     193,   195,   195,   195,   196,   196,   197,   197,   197,   197,
     198,   198,   199,   199,   200,   200,   200,   200,   200,   201,
     201,   201,   202,   202,   203,   203,   203,   203,   204,   204,
     205,   206,   205,   205,   205,   205,   207,   207,   207,   208,
     208,   209,   209,   209,   209,   209,   210,   209,   209,   209,
     209,   211,   209,   212,   209,   213,   209,   214,   214,   215,
     215,   215,   215,   216,   217,   217,   218,   218,   219,   219,
     220,   220,   221,   221,   221,   221,   221,   222,   222,   222,
     223,   223,   224,   224,   225,   225,   226,   228,   229,   230,
     227,   231,   231,   232,   232,   233,   234,   234,   235,   235,
     236,   236,   236,   236,   238,   237,   239,   237,   240,   237,
     241,   237,   242,   237,   243,   237,   244,   237,   245,   245,
     246,   246,   247,   247,   248,   249,   249,   249,   250,   250,
     250,   251,   251,   251,   252,   252,   252,   253,   254,   254,
     255,   255,   255,   255,   256,   256,   257,   257,   257,   258,
     258,   259,   260,   260,   260,   261,   261,   261,   262,   262,
     263,   262,   264,   264,   265,   266,   266,   266,   267,   267,
     268,   268,   269,   269,   270,   270,   271,   271,   272,   272,
     273,   274,   273,   276,   275,   277,   277,   278,   279,   279,
     280,   281,   280,   282,   282
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     3,     2,     0,
       2,     1,     2,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       0,     2,     4,     3,     7,     7,     7,     7,     0,     6,
       0,     6,     4,     4,     4,     4,     2,     2,     1,     3,
       3,     4,     0,     3,     3,     3,     4,     4,     3,     4,
       1,     3,     3,     0,     2,     4,     1,     3,     0,     3,
       0,     3,     1,     3,     3,     0,     5,     0,     3,     1,
       3,     2,     0,     1,     1,     1,     2,     4,     3,     5,
       2,     2,     2,     4,     4,     3,     5,     2,     3,     5,
       2,     1,     1,     1,     1,     0,     0,    11,     0,     9,
       1,     1,     1,     0,     3,     1,     1,     1,     1,     1,
       1,     3,     1,     3,     0,     5,     0,     5,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     4,     3,
       3,     3,     4,     4,     4,     4,     4,     4,     4,     4,
       7,     7,     7,     7,     7,     7,     7,     7,     5,     4,
       0,     1,     1,     3,     1,     1,     0,     4,     0,     1,
       2,     1,     3,     1,     0,     2,     4,     0,     2,     0,
       4,     0,     1,     2,     1,     3,     1,     3,     3,     5,
       1,     2,     1,     2,     0,     2,     3,     6,     3,     0,
       2,     4,     0,     2,     1,     1,     2,     2,     1,     3,
       1,     0,     4,     2,     2,     2,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     3,     0,     4,     3,     3,
       3,     0,     5,     0,     6,     0,     8,     1,     3,     1,
       1,     4,     4,     4,     0,     1,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     0,     0,
      12,     0,     2,     1,     3,     3,     0,     2,     1,     3,
       1,     5,     5,     5,     0,     5,     0,     3,     0,     6,
       0,     7,     0,     6,     0,     7,     0,     7,     0,     3,
       0,     2,     0,     6,     7,     9,     9,     8,     8,     8,
       7,     8,     8,     7,     8,     8,     8,     2,     0,     2,
       0,     1,     1,     1,     0,     3,     8,     8,     7,     0,
       2,     3,     3,     2,     0,     0,     5,     3,     0,     2,
       0,     3,     1,     4,     3,     0,     2,     5,     1,     3,
       1,     1,     0,     1,     1,     3,     3,     1,     0,     2,
       0,     0,     3,     0,     4,     1,     3,     1,     0,     2,
       0,     0,     4,     0,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, arangodb::aql::Parser* parser)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


/* Context of a parse error.  */
typedef struct
{
  yy_state_t *yyssp;
  yysymbol_kind_t yytoken;
  YYLTYPE *yylloc;
} yypcontext_t;

/* Put in YYARG at most YYARGN of the expected tokens given the
   current YYCTX, and return the number of tokens stored in YYARG.  If
   YYARG is null, return the number of expected tokens (guaranteed to
   be less than YYNTOKENS).  Return YYENOMEM on memory exhaustion.
   Return 0 if there are more than YYARGN expected tokens, yet fill
   YYARG up to YYARGN. */
static int
yypcontext_expected_tokens (const yypcontext_t *yyctx,
                            yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  int yyn = yypact[+*yyctx->yyssp];
  if (!yypact_value_is_default (yyn))
    {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYSYMBOL_YYerror
            && !yytable_value_is_error (yytable[yyx + yyn]))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = YY_CAST (yysymbol_kind_t, yyx);
          }
    }
  if (yyarg && yycount == 0 && 0 < yyargn)
    yyarg[0] = YYSYMBOL_YYEMPTY;
  return yycount;
}




#ifndef yystrlen
# if defined __GLIBC__ && defined _STRING_H
#  define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
# else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
# endif
#endif

#ifndef yystpcpy
# if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#  define yystpcpy stpcpy
# else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
# endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;
      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
#endif


static int
yy_syntax_error_arguments (const yypcontext_t *yyctx,
                           yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yyctx->yytoken != YYSYMBOL_YYEMPTY)
    {
      int yyn;
      if (yyarg)
        yyarg[yycount] = yyctx->yytoken;
      ++yycount;
      yyn = yypcontext_expected_tokens (yyctx,
                                        yyarg ? yyarg + 1 : yyarg, yyargn - 1);
      if (yyn == YYENOMEM)
        return YYENOMEM;
      else
        yycount += yyn;
    }
  return yycount;
}

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return -1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return YYENOMEM if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                const yypcontext_t *yyctx)
{
  enum { YYARGS_MAX = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  yysymbol_kind_t yyarg[YYARGS_MAX];
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* Actual size of YYARG. */
  int yycount = yy_syntax_error_arguments (yyctx, yyarg, YYARGS_MAX);
  if (yycount == YYENOMEM)
    return YYENOMEM;

  switch (yycount)
    {
#define YYCASE_(N, S)                       \
      case N:                               \
        yyformat = S;                       \
        break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
    }

  /* Compute error message size.  Don't count the "%s"s, but reserve
     room for the terminator.  */
  yysize = yystrlen (yyformat) - 2 * yycount + 1;
  {
    int yyi;
    for (yyi = 0; yyi < yycount; ++yyi)
      {
        YYPTRDIFF_T yysize1
          = yysize + yytnamerr (YY_NULLPTR, yytname[yyarg[yyi]]);
        if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
          yysize = yysize1;
        else
          return YYENOMEM;
      }
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return -1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yytname[yyarg[yyi++]]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= T_END)
    {
      yychar = T_END;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* optional_prune_variable: expression  */
#line 617 "grammar.y"
               {
      AstNode* node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeNop());
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3085 "grammar.cpp"
    break;

  case 3: /* optional_prune_variable: variable_name "assignment" expression  */
#line 623 "grammar.y"
                                      {
      AstNode* node = parser->ast()->createNodeArray();
      AstNode* variableNode = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      node->addMember(variableNode);
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;    
  }
#line 3097 "grammar.cpp"
    break;

  case 4: /* with_collection: "identifier"  */
#line 633 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3105 "grammar.cpp"
    break;

  case 5: /* with_collection: bind_parameter_datasource_expected  */
#line 636 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3113 "grammar.cpp"
    break;

  case 6: /* with_collection_list: with_collection  */
#line 642 "grammar.y"
                     {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 3122 "grammar.cpp"
    break;

  case 7: /* with_collection_list: with_collection_list "," with_collection  */
#line 646 "grammar.y"
                                                  {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 3131 "grammar.cpp"
    break;

  case 8: /* with_collection_list: with_collection_list with_collection  */
#line 650 "grammar.y"
                                          {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 3140 "grammar.cpp"
    break;

  case 9: /* optional_with: %empty  */
#line 657 "grammar.y"
                 {
     }
#line 3147 "grammar.cpp"
    break;

  case 10: /* optional_with: with_key with_collection_list  */
#line 659 "grammar.y"
                                                              {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 3158 "grammar.cpp"
    break;

  case 11: /* with_key: "WITH keyword"  */
#line 667 "grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3167 "grammar.cpp"
    break;

  case 12: /* queryStart: optional_with aql_statements  */
#line 673 "grammar.y"
                                 {
    }
#line 3174 "grammar.cpp"
    break;

  case 13: /* queryStart: sql_statements  */
#line 675 "grammar.y"
                  {

    }
#line 3182 "grammar.cpp"
    break;

  case 14: /* query: aql_statements  */
#line 681 "grammar.y"
                   {
    }
#line 3189 "grammar.cpp"
    break;

  case 15: /* query: sql_statements  */
#line 683 "grammar.y"
                   {
    }
#line 3196 "grammar.cpp"
    break;

  case 16: /* aql_statements: optional_statement_block_statements final_statement  */
#line 688 "grammar.y"
                                                       {

    }
#line 3204 "grammar.cpp"
    break;

  case 17: /* final_statement: return_statement  */
#line 693 "grammar.y"
                     {
    }
#line 3211 "grammar.cpp"
    break;

  case 18: /* final_statement: remove_statement  */
#line 695 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3219 "grammar.cpp"
    break;

  case 19: /* final_statement: insert_statement  */
#line 698 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3227 "grammar.cpp"
    break;

  case 20: /* final_statement: update_statement  */
#line 701 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3235 "grammar.cpp"
    break;

  case 21: /* final_statement: replace_statement  */
#line 704 "grammar.y"
                      {
      parser->ast()->scopes()->endNested();
    }
#line 3243 "grammar.cpp"
    break;

  case 22: /* final_statement: upsert_statement  */
#line 707 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3251 "grammar.cpp"
    break;

  case 23: /* optional_statement_block_statements: %empty  */
#line 713 "grammar.y"
                {
      parser->setAQL();
    }
#line 3259 "grammar.cpp"
    break;

  case 24: /* optional_statement_block_statements: optional_statement_block_statements statement_block_statement  */
#line 716 "grammar.y"
                                                                  {
    }
#line 3266 "grammar.cpp"
    break;

  case 25: /* statement_block_statement: for_statement  */
#line 721 "grammar.y"
                  {
    }
#line 3273 "grammar.cpp"
    break;

  case 26: /* statement_block_statement: let_statement  */
#line 723 "grammar.y"
                  {
    }
#line 3280 "grammar.cpp"
    break;

  case 27: /* statement_block_statement: filter_statement  */
#line 725 "grammar.y"
                     {
    }
#line 3287 "grammar.cpp"
    break;

  case 28: /* statement_block_statement: collect_statement  */
#line 727 "grammar.y"
                      {
    }
#line 3294 "grammar.cpp"
    break;

  case 29: /* statement_block_statement: sort_statement  */
#line 729 "grammar.y"
                   {
    }
#line 3301 "grammar.cpp"
    break;

  case 30: /* statement_block_statement: limit_statement  */
#line 731 "grammar.y"
                    {
    }
#line 3308 "grammar.cpp"
    break;

  case 31: /* statement_block_statement: window_statement  */
#line 733 "grammar.y"
                     {
    }
#line 3315 "grammar.cpp"
    break;

  case 32: /* statement_block_statement: remove_statement  */
#line 735 "grammar.y"
                     {
    }
#line 3322 "grammar.cpp"
    break;

  case 33: /* statement_block_statement: insert_statement  */
#line 737 "grammar.y"
                     {
    }
#line 3329 "grammar.cpp"
    break;

  case 34: /* statement_block_statement: update_statement  */
#line 739 "grammar.y"
                     {
    }
#line 3336 "grammar.cpp"
    break;

  case 35: /* statement_block_statement: replace_statement  */
#line 741 "grammar.y"
                      {
    }
#line 3343 "grammar.cpp"
    break;

  case 36: /* statement_block_statement: upsert_statement  */
#line 743 "grammar.y"
                     {
    }
#line 3350 "grammar.cpp"
    break;

  case 37: /* more_output_variables: variable_name  */
#line 748 "grammar.y"
                  {
      auto wrapperNode = parser->ast()->createNodeArray();
      parser->pushArray(wrapperNode);
      // This is guaranteed to be called on the first variable
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3362 "grammar.cpp"
    break;

  case 38: /* more_output_variables: more_output_variables "," variable_name  */
#line 755 "grammar.y"
                                                  {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3371 "grammar.cpp"
    break;

  case 39: /* for_output_variables: more_output_variables  */
#line 762 "grammar.y"
                          {
      (yyval.node) = parser->popArray();
    }
#line 3379 "grammar.cpp"
    break;

  case 40: /* prune_and_options: %empty  */
#line 768 "grammar.y"
                                                   {
      auto node = static_cast<AstNode*>(parser->peekStack());
      // Prune
      node->addMember(parser->ast()->createNodeNop());
      // Options
      node->addMember(parser->ast()->createNodeNop());
    }
#line 3391 "grammar.cpp"
    break;

  case 41: /* prune_and_options: "identifier" optional_prune_variable  */
#line 775 "grammar.y"
                                     {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);

      auto node = static_cast<AstNode*>(parser->peekStack());
      if (::caseInsensitiveEqual(operation, "PRUNE")) {
        /* Only Prune */
        TRI_ASSERT((yyvsp[0].node) != nullptr);
        // Prune
        node->addMember((yyvsp[0].node));
        // Options
        node->addMember(parser->ast()->createNodeNop());
      } else if (::caseInsensitiveEqual(operation, "OPTIONS")) {
        auto const* optionsArgument = (yyvsp[0].node)->getMember(1);
        /* Only Options */
        TRI_ASSERT(optionsArgument != nullptr);
        ::validateOptions(parser, optionsArgument, yylloc.first_line, yylloc.first_column);
        // Prune
        node->addMember(parser->ast()->createNodeNop());
        // Options
        node->addMember(optionsArgument);
      } else {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
    }
#line 3420 "grammar.cpp"
    break;

  case 42: /* prune_and_options: "identifier" optional_prune_variable "identifier" object  */
#line 799 "grammar.y"
                                                     {
      /* prune and options */
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (!::caseInsensitiveEqual(operation, "PRUNE")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      operation = {(yyvsp[-1].strval).value, (yyvsp[-1].strval).length};
      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      // Prune
      node->addMember((yyvsp[-2].node));
      // Options
      node->addMember((yyvsp[0].node));
    }
#line 3445 "grammar.cpp"
    break;

  case 43: /* traversal_graph_info: graph_direction_steps expression graph_subject  */
#line 822 "grammar.y"
                                                   {
      auto infoNode = parser->ast()->createNodeArray();
      // Direction
      infoNode->addMember((yyvsp[-2].node));
      // Source
      infoNode->addMember((yyvsp[-1].node));
      // Graph
      infoNode->addMember((yyvsp[0].node));
      (yyval.node) = infoNode;
    }
#line 3460 "grammar.cpp"
    break;

  case 44: /* shortest_path_graph_info: graph_direction "SHORTEST_PATH keyword" expression "identifier" expression graph_subject options  */
#line 835 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3468 "grammar.cpp"
    break;

  case 45: /* k_shortest_paths_graph_info: graph_direction "K_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 841 "grammar.y"
                                                                                            {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3476 "grammar.cpp"
    break;

  case 46: /* k_paths_graph_info: graph_direction_steps "K_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 847 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, (yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3484 "grammar.cpp"
    break;

  case 47: /* all_shortest_paths_graph_info: graph_direction "ALL_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 853 "grammar.y"
                                                                                              {
      auto nodeStart = parser->ast()->createNodeValueInt(0);
      auto nodeEnd = parser->ast()->createNodeValueInt(INT64_MAX-1);
      auto nodeRange = parser->ast()->createNodeRange(nodeStart, nodeEnd);
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), nodeRange), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3495 "grammar.cpp"
    break;

  case 48: /* $@1: %empty  */
#line 862 "grammar.y"
                                               {
      AstNode* variablesNode = static_cast<AstNode*>((yyvsp[-2].node));//这个是数组节点
      ::checkOutVariables(parser, variablesNode, 1, 1, "Collections and views FOR loops only allow a single return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      AstNode* variableNameNode = variablesNode->getMemberUnchecked(0);
      TRI_ASSERT(variableNameNode->isStringValue());
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);//现在创建了一个变量节点(同时也创建一个变量)
      parser->pushStack(variableNode);
    }
#line 3512 "grammar.cpp"
    break;

  case 49: /* for_statement: "FOR declaration" for_output_variables "IN keyword" expression $@1 for_options  */
#line 873 "grammar.y"
                  {
      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      Variable* variable = static_cast<Variable*>(variableNode->getData());

      AstNode* node = nullptr;
      AstNode* search = nullptr;
      AstNode* options = nullptr;

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);

        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW &&
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);//创建整个Node_type_for节点
      }

      parser->ast()->addOperation(node);//向整个ast的_root添加member
    }
#line 3557 "grammar.cpp"
    break;

  case 50: /* $@2: %empty  */
#line 913 "grammar.y"
                                                         {
      // Traversal
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 3, "Traversals only have one, two or three return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      parser->pushStack(variablesNode);
      parser->pushStack(graphInfoNode);
      // This stack push/pop magic is necessary to allow v, e, and p in the prune condition
    }
#line 3575 "grammar.cpp"
    break;

  case 51: /* for_statement: "FOR declaration" for_output_variables "IN keyword" traversal_graph_info $@2 prune_and_options  */
#line 925 "grammar.y"
                        {
      auto graphInfoNode = static_cast<AstNode*>(parser->popStack());
      auto variablesNode = static_cast<AstNode*>(parser->popStack());

      auto prune = graphInfoNode->getMember(3);
      TRI_ASSERT(prune != nullptr);
      if (prune->type == NODE_TYPE_ARRAY) {
        TRI_ASSERT(prune->numMembers() == 2);
        Ast::traverseReadOnly(prune->getMember(1), [&](AstNode const* node) {
          if (node->type == NODE_TYPE_REFERENCE && node->hasFlag(AstNodeFlagType::FLAG_SUBQUERY_REFERENCE)) {
            parser->registerParseError(TRI_ERROR_QUERY_PARSE, "PRUNE condition must not use a subquery", yylloc.first_line, yylloc.first_column);
          }
        });
        graphInfoNode->changeMember(3, prune->getMember(1));
      }
      auto node = parser->ast()->createNodeTraversal(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
      if(prune->type == NODE_TYPE_ARRAY && prune->getMember(0)->type != NODE_TYPE_NOP) {
        auto pruneLetVariableName = prune->getMember(0);
        parser->ast()->addOperation(pruneLetVariableName);
      }
    }
#line 3602 "grammar.cpp"
    break;

  case 52: /* for_statement: "FOR declaration" for_output_variables "IN keyword" shortest_path_graph_info  */
#line 947 "grammar.y"
                                                             {
      // Shortest Path
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 2, "SHORTEST_PATH must have one or two return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeShortestPath(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3619 "grammar.cpp"
    break;

  case 53: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_shortest_paths_graph_info  */
#line 959 "grammar.y"
                                                                {
      // K Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3636 "grammar.cpp"
    break;

  case 54: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_paths_graph_info  */
#line 971 "grammar.y"
                                                       {
      // K Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3653 "grammar.cpp"
    break;

  case 55: /* for_statement: "FOR declaration" for_output_variables "IN keyword" all_shortest_paths_graph_info  */
#line 983 "grammar.y"
                                                                  {
      // All Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "ALL_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::AllShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3670 "grammar.cpp"
    break;

  case 56: /* filter_statement: "FILTER declaration" expression  */
#line 998 "grammar.y"
                        {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3680 "grammar.cpp"
    break;

  case 57: /* let_statement: "LET declaration" let_list  */
#line 1006 "grammar.y"
                   {
    }
#line 3687 "grammar.cpp"
    break;

  case 58: /* let_list: let_element  */
#line 1011 "grammar.y"
                {
    }
#line 3694 "grammar.cpp"
    break;

  case 59: /* let_list: let_list "," let_element  */
#line 1013 "grammar.y"
                                 {
    }
#line 3701 "grammar.cpp"
    break;

  case 60: /* let_element: variable_name "assignment" expression  */
#line 1018 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 3710 "grammar.cpp"
    break;

  case 61: /* count_into: "WITH keyword" "identifier" "INTO keyword" variable_name  */
#line 1025 "grammar.y"
                                         {
      std::string_view operation((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if (!::caseInsensitiveEqual(operation, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", operation, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3723 "grammar.cpp"
    break;

  case 62: /* $@3: %empty  */
#line 1036 "grammar.y"
              {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3732 "grammar.cpp"
    break;

  case 63: /* collect_variable_list: "COLLECT declaration" $@3 collect_list  */
#line 1039 "grammar.y"
                   {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 3742 "grammar.cpp"
    break;

  case 64: /* collect_statement: "COLLECT declaration" count_into options  */
#line 1047 "grammar.y"
                                 {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      ::startCollectScope(scopes);

      // in the AST this is transformed to COLLECT AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3757 "grammar.cpp"
    break;

  case 65: /* collect_statement: collect_variable_list count_into options  */
#line 1057 "grammar.y"
                                             {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        VarSet variables{};
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      // in the AST this is transformed to COLLECT var = expr AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3775 "grammar.cpp"
    break;

  case 66: /* collect_statement: "COLLECT declaration" aggregate collect_optional_into options  */
#line 1070 "grammar.y"
                                                      {
      /* AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3804 "grammar.cpp"
    break;

  case 67: /* collect_statement: collect_variable_list aggregate collect_optional_into options  */
#line 1094 "grammar.y"
                                                                  {//这个
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {//开始一个新的CollectScope,要重新注册(实际上collect_variable_list和aggregate中已经注册在上一层的scopes了)
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }
        //检查聚集函数的有效性(用的是聚集函数而不是普通函数)
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      VarSet groupVars{};
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }
      // 组变量不能在聚集涉及到的变量中出现
      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          VarSet variablesUsed{};
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.contains(it)) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name, yylloc.first_line, yylloc.first_column);
            }
          }
        }
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3864 "grammar.cpp"
    break;

  case 68: /* collect_statement: collect_variable_list collect_optional_into options  */
#line 1149 "grammar.y"
                                                        {
      /* COLLECT var = expr INTO var OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3888 "grammar.cpp"
    break;

  case 69: /* collect_statement: collect_variable_list collect_optional_into keep options  */
#line 1168 "grammar.y"
                                                             {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }
        
      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "KEEP", (yyvsp[-1].node), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3921 "grammar.cpp"
    break;

  case 70: /* collect_list: collect_element  */
#line 1199 "grammar.y"
                    {
    }
#line 3928 "grammar.cpp"
    break;

  case 71: /* collect_list: collect_list "," collect_element  */
#line 1201 "grammar.y"
                                         {
    }
#line 3935 "grammar.cpp"
    break;

  case 72: /* collect_element: variable_name "assignment" expression  */
#line 1206 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3944 "grammar.cpp"
    break;

  case 73: /* collect_optional_into: %empty  */
#line 1213 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 3952 "grammar.cpp"
    break;

  case 74: /* collect_optional_into: "INTO keyword" variable_name  */
#line 1216 "grammar.y"
                         {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3960 "grammar.cpp"
    break;

  case 75: /* collect_optional_into: "INTO keyword" variable_name "assignment" expression  */
#line 1219 "grammar.y"
                                             {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3971 "grammar.cpp"
    break;

  case 76: /* variable_list: variable_name  */
#line 1228 "grammar.y"
                  {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3989 "grammar.cpp"
    break;

  case 77: /* variable_list: variable_list "," variable_name  */
#line 1241 "grammar.y"
                                        {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 4007 "grammar.cpp"
    break;

  case 78: /* $@4: %empty  */
#line 1257 "grammar.y"
             {
      std::string_view operation((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!::caseInsensitiveEqual(operation, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", operation, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4021 "grammar.cpp"
    break;

  case 79: /* keep: "identifier" $@4 variable_list  */
#line 1265 "grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 4030 "grammar.cpp"
    break;

  case 80: /* $@5: %empty  */
#line 1272 "grammar.y"
                {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4039 "grammar.cpp"
    break;

  case 81: /* aggregate: "AGGREGATE keyword" $@5 aggregate_list  */
#line 1275 "grammar.y"
                     {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 4048 "grammar.cpp"
    break;

  case 82: /* aggregate_list: aggregate_element  */
#line 1282 "grammar.y"
                      {
    }
#line 4055 "grammar.cpp"
    break;

  case 83: /* aggregate_list: aggregate_list "," aggregate_element  */
#line 1284 "grammar.y"
                                             {
    }
#line 4062 "grammar.cpp"
    break;

  case 84: /* aggregate_element: variable_name "assignment" aggregate_function_call  */
#line 1289 "grammar.y"
                                                   {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 4071 "grammar.cpp"
    break;

  case 85: /* $@6: %empty  */
#line 1296 "grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4081 "grammar.cpp"
    break;

  case 86: /* aggregate_function_call: function_name "(" $@6 optional_function_call_arguments ")"  */
#line 1300 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      // this works because the function name here is always NUL-terminated
      (yyval.node) = parser->ast()->createNodeAggregateFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 4091 "grammar.cpp"
    break;

  case 87: /* $@7: %empty  */
#line 1308 "grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4100 "grammar.cpp"
    break;

  case 88: /* sort_statement: "SORT declaration" $@7 sort_list  */
#line 1311 "grammar.y"
                {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 4110 "grammar.cpp"
    break;

  case 89: /* sort_list: sort_element  */
#line 1319 "grammar.y"
                 {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4118 "grammar.cpp"
    break;

  case 90: /* sort_list: sort_list "," sort_element  */
#line 1322 "grammar.y"
                                   {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4126 "grammar.cpp"
    break;

  case 91: /* sort_element: expression sort_direction  */
#line 1328 "grammar.y"
                              {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 4134 "grammar.cpp"
    break;

  case 92: /* sort_direction: %empty  */
#line 1334 "grammar.y"
                {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 4142 "grammar.cpp"
    break;

  case 93: /* sort_direction: "ASC keyword"  */
#line 1337 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 4150 "grammar.cpp"
    break;

  case 94: /* sort_direction: "DESC keyword"  */
#line 1340 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 4158 "grammar.cpp"
    break;

  case 95: /* sort_direction: simple_value  */
#line 1343 "grammar.y"
                 {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4166 "grammar.cpp"
    break;

  case 96: /* limit_statement: "LIMIT declaration" expression  */
#line 1349 "grammar.y"
                       {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4176 "grammar.cpp"
    break;

  case 97: /* limit_statement: "LIMIT declaration" expression "," expression  */
#line 1354 "grammar.y"
                                          {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4185 "grammar.cpp"
    break;

  case 98: /* window_statement: "WINDOW declaration" object aggregate  */
#line 1361 "grammar.y"
                              {
      /* WINDOW {preceding:2, following:2} AGGREGATE x = AVG(x) */
      
      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/nullptr, /*aggrs*/(yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4205 "grammar.cpp"
    break;

  case 99: /* window_statement: "WINDOW declaration" expression "WITH keyword" object aggregate  */
#line 1376 "grammar.y"
                                                {
    /* WINDOW rangeVar WITH {preceding:"1d", following:"1d"} AGGREGATE x = AVG(x) */
    
    // validate aggregates
    if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/(yyvsp[-3].node), /*aggrs*/(yyvsp[0].node));
    parser->ast()->addOperation(node);
  }
#line 4225 "grammar.cpp"
    break;

  case 100: /* return_statement: "RETURN declaration" distinct_expression  */
#line 1394 "grammar.y"
                                 {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 4235 "grammar.cpp"
    break;

  case 101: /* in_or_into_collection: "IN keyword" in_or_into_collection_name  */
#line 1402 "grammar.y"
                                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4243 "grammar.cpp"
    break;

  case 102: /* in_or_into_collection: "INTO keyword" in_or_into_collection_name  */
#line 1405 "grammar.y"
                                      {
       (yyval.node) = (yyvsp[0].node);
     }
#line 4251 "grammar.cpp"
    break;

  case 103: /* remove_statement: "REMOVE command" expression in_or_into_collection options  */
#line 1411 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4263 "grammar.cpp"
    break;

  case 104: /* insert_statement: "INSERT command" expression in_or_into_collection options  */
#line 1421 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4275 "grammar.cpp"
    break;

  case 105: /* update_parameters: expression in_or_into_collection options  */
#line 1431 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4288 "grammar.cpp"
    break;

  case 106: /* update_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1439 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4301 "grammar.cpp"
    break;

  case 107: /* update_statement: "UPDATE command" update_parameters  */
#line 1450 "grammar.y"
                               {
    }
#line 4308 "grammar.cpp"
    break;

  case 108: /* replace_parameters: expression in_or_into_collection options  */
#line 1455 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4321 "grammar.cpp"
    break;

  case 109: /* replace_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1463 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4334 "grammar.cpp"
    break;

  case 110: /* replace_statement: "REPLACE command" replace_parameters  */
#line 1474 "grammar.y"
                                 {
    }
#line 4341 "grammar.cpp"
    break;

  case 111: /* update_or_replace: "UPDATE command"  */
#line 1479 "grammar.y"
             {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 4349 "grammar.cpp"
    break;

  case 112: /* update_or_replace: "REPLACE command"  */
#line 1482 "grammar.y"
              {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 4357 "grammar.cpp"
    break;

  case 113: /* upsert_input: object  */
#line 1488 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4365 "grammar.cpp"
    break;

  case 114: /* upsert_input: bind_parameter  */
#line 1491 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4373 "grammar.cpp"
    break;

  case 115: /* $@8: %empty  */
#line 1497 "grammar.y"
                      {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);
      parser->pushStack(variableNode);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      auto forNode = parser->ast()->createNodeForUpsert(Variable::NAME_CURRENT.data(), Variable::NAME_CURRENT.size(), parser->ast()->createNodeArray(), false);
      scopes->stackCurrentVariable(scopes->getVariable(Variable::NAME_CURRENT));
      parser->ast()->addOperation(forNode);
      parser->pushStack(forNode);
    }
#line 4395 "grammar.cpp"
    break;

  case 116: /* $@9: %empty  */
#line 1513 "grammar.y"
                 {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());
      auto filterNode = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(filterNode);
      
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(static_cast<Variable const*>(forNode->getMember(0)->getData()));
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.data(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4432 "grammar.cpp"
    break;

  case 117: /* upsert_statement: "UPSERT command" "FILTER declaration" $@8 expression $@9 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1544 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4453 "grammar.cpp"
    break;

  case 118: /* $@10: %empty  */
#line 1560 "grammar.y"
                          {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeForUpsert(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4499 "grammar.cpp"
    break;

  case 119: /* upsert_statement: "UPSERT command" upsert_input $@10 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1600 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4520 "grammar.cpp"
    break;

  case 120: /* quantifier: "all modifier"  */
#line 1619 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAll);
    }
#line 4528 "grammar.cpp"
    break;

  case 121: /* quantifier: "any modifier"  */
#line 1622 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAny);
    }
#line 4536 "grammar.cpp"
    break;

  case 122: /* quantifier: "none modifier"  */
#line 1625 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kNone);
    }
#line 4544 "grammar.cpp"
    break;

  case 123: /* $@11: %empty  */
#line 1631 "grammar.y"
               {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 4557 "grammar.cpp"
    break;

  case 124: /* distinct_expression: "DISTINCT modifier" $@11 expression  */
#line 1638 "grammar.y"
                 {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 4565 "grammar.cpp"
    break;

  case 125: /* distinct_expression: expression  */
#line 1641 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4573 "grammar.cpp"
    break;

  case 126: /* expression: operator_unary  */
#line 1647 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4581 "grammar.cpp"
    break;

  case 127: /* expression: operator_binary  */
#line 1650 "grammar.y"
                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4589 "grammar.cpp"
    break;

  case 128: /* expression: operator_ternary  */
#line 1653 "grammar.y"
                     {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4597 "grammar.cpp"
    break;

  case 129: /* expression: value_literal  */
#line 1656 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4605 "grammar.cpp"
    break;

  case 130: /* expression: reference  */
#line 1659 "grammar.y"
              {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4613 "grammar.cpp"
    break;

  case 131: /* expression: expression ".." expression  */
#line 1662 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4621 "grammar.cpp"
    break;

  case 132: /* function_name: "identifier"  */
#line 1668 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4629 "grammar.cpp"
    break;

  case 133: /* function_name: function_name "::" "identifier"  */
#line 1671 "grammar.y"
                                   {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->ast()->resources().registerString(temp);
      TRI_ASSERT(p != nullptr);

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 4644 "grammar.cpp"
    break;

  case 134: /* $@12: %empty  */
#line 1684 "grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4655 "grammar.cpp"
    break;

  case 135: /* function_call: function_name "(" $@12 optional_function_call_arguments ")"  */
#line 1689 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(static_cast<char const*>(parser->popStack()), list, false);
    }
#line 4664 "grammar.cpp"
    break;

  case 136: /* $@13: %empty  */
#line 1693 "grammar.y"
                  {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4673 "grammar.cpp"
    break;

  case 137: /* function_call: "like operator" "(" $@13 optional_function_call_arguments ")"  */
#line 1696 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", list, false);
    }
#line 4682 "grammar.cpp"
    break;

  case 138: /* operator_unary: "+ operator" expression  */
#line 1703 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node)));
    }
#line 4690 "grammar.cpp"
    break;

  case 139: /* operator_unary: "- operator" expression  */
#line 1706 "grammar.y"
                                    {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node)));
    }
#line 4698 "grammar.cpp"
    break;

  case 140: /* operator_unary: "not operator" expression  */
#line 1709 "grammar.y"
                                     {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 4706 "grammar.cpp"
    break;

  case 141: /* operator_binary: expression "or operator" expression  */
#line 1715 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4714 "grammar.cpp"
    break;

  case 142: /* operator_binary: expression "and operator" expression  */
#line 1718 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4722 "grammar.cpp"
    break;

  case 143: /* operator_binary: expression "+ operator" expression  */
#line 1721 "grammar.y"
                                 {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4730 "grammar.cpp"
    break;

  case 144: /* operator_binary: expression "- operator" expression  */
#line 1724 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4738 "grammar.cpp"
    break;

  case 145: /* operator_binary: expression "* operator" expression  */
#line 1727 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4746 "grammar.cpp"
    break;

  case 146: /* operator_binary: expression "/ operator" expression  */
#line 1730 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4754 "grammar.cpp"
    break;

  case 147: /* operator_binary: expression "% operator" expression  */
#line 1733 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4762 "grammar.cpp"
    break;

  case 148: /* operator_binary: expression "== operator" expression  */
#line 1736 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4770 "grammar.cpp"
    break;

  case 149: /* operator_binary: expression "!= operator" expression  */
#line 1739 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4778 "grammar.cpp"
    break;

  case 150: /* operator_binary: expression "< operator" expression  */
#line 1742 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4786 "grammar.cpp"
    break;

  case 151: /* operator_binary: expression "> operator" expression  */
#line 1745 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4794 "grammar.cpp"
    break;

  case 152: /* operator_binary: expression "<= operator" expression  */
#line 1748 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4802 "grammar.cpp"
    break;

  case 153: /* operator_binary: expression ">= operator" expression  */
#line 1751 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4810 "grammar.cpp"
    break;

  case 154: /* operator_binary: expression "IN keyword" expression  */
#line 1754 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4818 "grammar.cpp"
    break;

  case 155: /* operator_binary: expression "not in operator" expression  */
#line 1757 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4826 "grammar.cpp"
    break;

  case 156: /* operator_binary: expression "not operator" "like operator" expression  */
#line 1760 "grammar.y"
                                       {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4838 "grammar.cpp"
    break;

  case 157: /* operator_binary: expression "not operator" "~= operator" expression  */
#line 1767 "grammar.y"
                                              {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4850 "grammar.cpp"
    break;

  case 158: /* operator_binary: expression "not operator" "~! operator" expression  */
#line 1774 "grammar.y"
                                                  {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4861 "grammar.cpp"
    break;

  case 159: /* operator_binary: expression "like operator" expression  */
#line 1780 "grammar.y"
                                 {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
    }
#line 4872 "grammar.cpp"
    break;

  case 160: /* operator_binary: expression "~= operator" expression  */
#line 1786 "grammar.y"
                                        {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4883 "grammar.cpp"
    break;

  case 161: /* operator_binary: expression "~! operator" expression  */
#line 1792 "grammar.y"
                                            {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 4895 "grammar.cpp"
    break;

  case 162: /* operator_binary: expression quantifier "== operator" expression  */
#line 1799 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4903 "grammar.cpp"
    break;

  case 163: /* operator_binary: expression quantifier "!= operator" expression  */
#line 1802 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4911 "grammar.cpp"
    break;

  case 164: /* operator_binary: expression quantifier "< operator" expression  */
#line 1805 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4919 "grammar.cpp"
    break;

  case 165: /* operator_binary: expression quantifier "> operator" expression  */
#line 1808 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4927 "grammar.cpp"
    break;

  case 166: /* operator_binary: expression quantifier "<= operator" expression  */
#line 1811 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4935 "grammar.cpp"
    break;

  case 167: /* operator_binary: expression quantifier ">= operator" expression  */
#line 1814 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4943 "grammar.cpp"
    break;

  case 168: /* operator_binary: expression quantifier "IN keyword" expression  */
#line 1817 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4951 "grammar.cpp"
    break;

  case 169: /* operator_binary: expression quantifier "not in operator" expression  */
#line 1820 "grammar.y"
                                              {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4959 "grammar.cpp"
    break;

  case 170: /* operator_binary: expression "at least modifier" "(" expression ")" "== operator" expression  */
#line 1823 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4968 "grammar.cpp"
    break;

  case 171: /* operator_binary: expression "at least modifier" "(" expression ")" "!= operator" expression  */
#line 1827 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4977 "grammar.cpp"
    break;

  case 172: /* operator_binary: expression "at least modifier" "(" expression ")" "< operator" expression  */
#line 1831 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4986 "grammar.cpp"
    break;

  case 173: /* operator_binary: expression "at least modifier" "(" expression ")" "> operator" expression  */
#line 1835 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4995 "grammar.cpp"
    break;

  case 174: /* operator_binary: expression "at least modifier" "(" expression ")" "<= operator" expression  */
#line 1839 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 5004 "grammar.cpp"
    break;

  case 175: /* operator_binary: expression "at least modifier" "(" expression ")" ">= operator" expression  */
#line 1843 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 5013 "grammar.cpp"
    break;

  case 176: /* operator_binary: expression "at least modifier" "(" expression ")" "IN keyword" expression  */
#line 1847 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 5022 "grammar.cpp"
    break;

  case 177: /* operator_binary: expression "at least modifier" "(" expression ")" "not in operator" expression  */
#line 1851 "grammar.y"
                                                                        {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 5031 "grammar.cpp"
    break;

  case 178: /* operator_ternary: expression "?" expression ":" expression  */
#line 1858 "grammar.y"
                                                        {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5039 "grammar.cpp"
    break;

  case 179: /* operator_ternary: expression "?" ":" expression  */
#line 1861 "grammar.y"
                                             {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 5047 "grammar.cpp"
    break;

  case 180: /* optional_function_call_arguments: %empty  */
#line 1867 "grammar.y"
                {
    }
#line 5054 "grammar.cpp"
    break;

  case 181: /* optional_function_call_arguments: function_arguments_list  */
#line 1869 "grammar.y"
                            {
    }
#line 5061 "grammar.cpp"
    break;

  case 182: /* function_arguments_list: expression  */
#line 1874 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5069 "grammar.cpp"
    break;

  case 183: /* function_arguments_list: function_arguments_list "," expression  */
#line 1877 "grammar.y"
                                               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5077 "grammar.cpp"
    break;

  case 184: /* compound_value: array  */
#line 1883 "grammar.y"
          {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5085 "grammar.cpp"
    break;

  case 185: /* compound_value: object  */
#line 1886 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5093 "grammar.cpp"
    break;

  case 186: /* $@14: %empty  */
#line 1892 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 5102 "grammar.cpp"
    break;

  case 187: /* array: "[" $@14 optional_array_elements "]"  */
#line 1895 "grammar.y"
                                            {
      (yyval.node) = parser->popArray();
    }
#line 5110 "grammar.cpp"
    break;

  case 188: /* optional_array_elements: %empty  */
#line 1901 "grammar.y"
                {
    }
#line 5117 "grammar.cpp"
    break;

  case 189: /* optional_array_elements: array_elements_list  */
#line 1903 "grammar.y"
                        {
    }
#line 5124 "grammar.cpp"
    break;

  case 190: /* optional_array_elements: array_elements_list ","  */
#line 1905 "grammar.y"
                                {
    }
#line 5131 "grammar.cpp"
    break;

  case 191: /* array_elements_list: array_element  */
#line 1910 "grammar.y"
                  {
    }
#line 5138 "grammar.cpp"
    break;

  case 192: /* array_elements_list: array_elements_list "," array_element  */
#line 1912 "grammar.y"
                                              {
    }
#line 5145 "grammar.cpp"
    break;

  case 193: /* array_element: expression  */
#line 1917 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5153 "grammar.cpp"
    break;

  case 194: /* for_options: %empty  */
#line 1923 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5161 "grammar.cpp"
    break;

  case 195: /* for_options: "identifier" expression  */
#line 1926 "grammar.y"
                        {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      auto node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (::caseInsensitiveEqual(operation, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else {
        // everything else must be OPTIONS
        if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
        }
        ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 5191 "grammar.cpp"
    break;

  case 196: /* for_options: "identifier" expression "identifier" expression  */
#line 1951 "grammar.y"
                                            {
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!::caseInsensitiveEqual(operation, "SEARCH") ||
          !::caseInsensitiveEqual({(yyvsp[-1].strval).value, (yyvsp[-1].strval).length}, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 5213 "grammar.cpp"
    break;

  case 197: /* options: %empty  */
#line 1971 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5221 "grammar.cpp"
    break;

  case 198: /* options: "identifier" object  */
#line 1974 "grammar.y"
                    {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);

      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      (yyval.node) = (yyvsp[0].node);
    }
#line 5238 "grammar.cpp"
    break;

  case 199: /* $@15: %empty  */
#line 1989 "grammar.y"
                  {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 5247 "grammar.cpp"
    break;

  case 200: /* object: "{" $@15 optional_object_elements "}"  */
#line 1992 "grammar.y"
                                              {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 5255 "grammar.cpp"
    break;

  case 201: /* optional_object_elements: %empty  */
#line 1998 "grammar.y"
                {
    }
#line 5262 "grammar.cpp"
    break;

  case 202: /* optional_object_elements: object_elements_list  */
#line 2000 "grammar.y"
                         {
    }
#line 5269 "grammar.cpp"
    break;

  case 203: /* optional_object_elements: object_elements_list ","  */
#line 2002 "grammar.y"
                                 {
    }
#line 5276 "grammar.cpp"
    break;

  case 204: /* object_elements_list: object_element  */
#line 2007 "grammar.y"
                   {
    }
#line 5283 "grammar.cpp"
    break;

  case 205: /* object_elements_list: object_elements_list "," object_element  */
#line 2009 "grammar.y"
                                                {
    }
#line 5290 "grammar.cpp"
    break;

  case 206: /* object_element: "identifier"  */
#line 2014 "grammar.y"
             {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);

      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable(name, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", name, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 5311 "grammar.cpp"
    break;

  case 207: /* object_element: object_element_name ":" expression  */
#line 2030 "grammar.y"
                                           {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5320 "grammar.cpp"
    break;

  case 208: /* object_element: "bind parameter" ":" expression  */
#line 2034 "grammar.y"
                                   {
      // bind-parameter : attribute-value
      std::string_view name((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter(name);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 5335 "grammar.cpp"
    break;

  case 209: /* object_element: "[" expression "]" ":" expression  */
#line 2044 "grammar.y"
                                                             {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 5344 "grammar.cpp"
    break;

  case 210: /* array_filter_operator: "?"  */
#line 2051 "grammar.y"
               {
      (yyval.intval) = 1;
    }
#line 5352 "grammar.cpp"
    break;

  case 211: /* array_filter_operator: array_filter_operator "?"  */
#line 2054 "grammar.y"
                                     {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5360 "grammar.cpp"
    break;

  case 212: /* array_map_operator: "* operator"  */
#line 2060 "grammar.y"
            {
      (yyval.intval) = 1;
    }
#line 5368 "grammar.cpp"
    break;

  case 213: /* array_map_operator: array_map_operator "* operator"  */
#line 2063 "grammar.y"
                               {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5376 "grammar.cpp"
    break;

  case 214: /* optional_array_filter: %empty  */
#line 2069 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5384 "grammar.cpp"
    break;

  case 215: /* optional_array_filter: "FILTER declaration" expression  */
#line 2072 "grammar.y"
                        {
      // FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter(nullptr, (yyvsp[0].node));
    }
#line 5393 "grammar.cpp"
    break;

  case 216: /* optional_array_filter: quantifier "FILTER declaration" expression  */
#line 2076 "grammar.y"
                                   {
      // ALL|ANY|NONE|AT LEAST FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5402 "grammar.cpp"
    break;

  case 217: /* optional_array_filter: "at least modifier" "(" expression ")" "FILTER declaration" expression  */
#line 2080 "grammar.y"
                                                             {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeArrayFilter(quantifier, (yyvsp[0].node));
    }
#line 5411 "grammar.cpp"
    break;

  case 218: /* optional_array_filter: expression "FILTER declaration" expression  */
#line 2084 "grammar.y"
                                   {
      // 1    FILTER filter-condition
      // 2..5 FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5421 "grammar.cpp"
    break;

  case 219: /* optional_array_limit: %empty  */
#line 2092 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5429 "grammar.cpp"
    break;

  case 220: /* optional_array_limit: "LIMIT declaration" expression  */
#line 2095 "grammar.y"
                       {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 5437 "grammar.cpp"
    break;

  case 221: /* optional_array_limit: "LIMIT declaration" expression "," expression  */
#line 2098 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5445 "grammar.cpp"
    break;

  case 222: /* optional_array_return: %empty  */
#line 2104 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5453 "grammar.cpp"
    break;

  case 223: /* optional_array_return: "RETURN declaration" expression  */
#line 2107 "grammar.y"
                        {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5461 "grammar.cpp"
    break;

  case 224: /* graph_collection: "identifier"  */
#line 2113 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5469 "grammar.cpp"
    break;

  case 225: /* graph_collection: bind_parameter_datasource_expected  */
#line 2116 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5477 "grammar.cpp"
    break;

  case 226: /* graph_collection: graph_direction "identifier"  */
#line 2119 "grammar.y"
                             {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 5486 "grammar.cpp"
    break;

  case 227: /* graph_collection: graph_direction bind_parameter  */
#line 2123 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 5494 "grammar.cpp"
    break;

  case 228: /* graph_collection_list: graph_collection  */
#line 2129 "grammar.y"
                      {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5503 "grammar.cpp"
    break;

  case 229: /* graph_collection_list: graph_collection_list "," graph_collection  */
#line 2133 "grammar.y"
                                                    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5512 "grammar.cpp"
    break;

  case 230: /* graph_subject: graph_collection  */
#line 2140 "grammar.y"
                     {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5523 "grammar.cpp"
    break;

  case 231: /* $@16: %empty  */
#line 2146 "grammar.y"
                             {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 5533 "grammar.cpp"
    break;

  case 232: /* graph_subject: graph_collection "," $@16 graph_collection_list  */
#line 2150 "grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5543 "grammar.cpp"
    break;

  case 233: /* graph_subject: "GRAPH keyword" bind_parameter  */
#line 2155 "grammar.y"
                           {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 5552 "grammar.cpp"
    break;

  case 234: /* graph_subject: "GRAPH keyword" "quoted string"  */
#line 2159 "grammar.y"
                            {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5561 "grammar.cpp"
    break;

  case 235: /* graph_subject: "GRAPH keyword" "identifier"  */
#line 2163 "grammar.y"
                     {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5570 "grammar.cpp"
    break;

  case 236: /* graph_direction: "outbound modifier"  */
#line 2172 "grammar.y"
               {
      (yyval.intval) = 2;
    }
#line 5578 "grammar.cpp"
    break;

  case 237: /* graph_direction: "inbound modifier"  */
#line 2175 "grammar.y"
              {
      (yyval.intval) = 1;
    }
#line 5586 "grammar.cpp"
    break;

  case 238: /* graph_direction: "any modifier"  */
#line 2178 "grammar.y"
          {
      (yyval.intval) = 0;
    }
#line 5594 "grammar.cpp"
    break;

  case 239: /* graph_direction_steps: graph_direction  */
#line 2184 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 5602 "grammar.cpp"
    break;

  case 240: /* graph_direction_steps: expression graph_direction  */
#line 2187 "grammar.y"
                                                {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 5610 "grammar.cpp"
    break;

  case 241: /* reference: "identifier"  */
#line 2193 "grammar.y"
             {
      AstNode* node = nullptr;

      auto ast = parser->ast();
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto variable = ast->scopes()->getVariable(variableName, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (parser->checkVariableNameIsCurrent(variableName)) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {//为collection时
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query().resolver();
        node = ast->createNodeDataSource(resolver, variableName, arangodb::AccessMode::Type::READ, true, false,parser->isSQL());
        if(parser->isSQL()){
          parser->addSQLCollectionNode(node);
        }
        if(parser->isSelectSubQuery()){
          parser->pushSelectSubQueryPending(node,std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
        }
      }
      TRI_ASSERT(node != nullptr);

      if(parser->isSelect()){
        parser->pushSelectPending(node,std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      }
      
      (yyval.node) = node;
    }
#line 5654 "grammar.cpp"
    break;

  case 242: /* reference: compound_value  */
#line 2232 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5662 "grammar.cpp"
    break;

  case 243: /* reference: bind_parameter  */
#line 2235 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5670 "grammar.cpp"
    break;

  case 244: /* reference: function_call  */
#line 2238 "grammar.y"
                  {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5679 "grammar.cpp"
    break;

  case 245: /* reference: "(" expression ")"  */
#line 2242 "grammar.y"
                              {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      } else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 5693 "grammar.cpp"
    break;

  case 246: /* $@17: %empty  */
#line 2251 "grammar.y"
           {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 5702 "grammar.cpp"
    break;

  case 247: /* reference: "(" $@17 query ")"  */
#line 2254 "grammar.y"
                    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      if(parser->isSelect()){
        parser->pushSelectSubQueryQueue(subQuery);
      }else{
        parser->ast()->addOperation(subQuery);
      }
      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName, node);
    }
#line 5720 "grammar.cpp"
    break;

  case 248: /* reference: reference '.' "identifier"  */
#line 2267 "grammar.y"
                                           {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), name));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), name);
      }
    }
#line 5740 "grammar.cpp"
    break;

  case 249: /* reference: reference '.' bind_parameter  */
#line 2282 "grammar.y"
                                                 {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 5758 "grammar.cpp"
    break;

  case 250: /* reference: reference '.' "* operator"  */
#line 2295 "grammar.y"
                         {
    (yyvsp[-2].node)->setFlag(FLAG_TIMES);
    (yyval.node) = (yyvsp[-2].node);
  }
#line 5767 "grammar.cpp"
    break;

  case 251: /* $@18: %empty  */
#line 2299 "grammar.y"
                           {      
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 5776 "grammar.cpp"
    break;

  case 252: /* reference: reference "[" $@18 ndarray_expression_list "]"  */
#line 2302 "grammar.y"
                                                          {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-4].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-4].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1),parser->popArray()));
        (yyval.node) = (yyvsp[-4].node);
      } else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-4].node), parser->popArray());
      }
    }
#line 5794 "grammar.cpp"
    break;

  case 253: /* $@19: %empty  */
#line 2315 "grammar.y"
                                                 {
      // variable expansion, e.g. variable[?], with optional FILTER clause
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5821 "grammar.cpp"
    break;

  case 254: /* reference: reference "[" array_filter_operator $@19 optional_array_filter "]"  */
#line 2336 "grammar.y"
                                                          {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-5].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
        (yyvsp[-5].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-5].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
      }
    }
#line 5843 "grammar.cpp"
    break;

  case 255: /* $@20: %empty  */
#line 2353 "grammar.y"
                                              {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5870 "grammar.cpp"
    break;

  case 256: /* reference: reference "[" array_map_operator $@20 optional_array_filter optional_array_limit optional_array_return "]"  */
#line 2374 "grammar.y"
                                                                                                     {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-3].node) != nullptr) {
        // array filter members are [quantifier, filter]
        // quantifier is optional.
        TRI_ASSERT((yyvsp[-3].node)->type == NODE_TYPE_ARRAY_FILTER);
        TRI_ASSERT((yyvsp[-3].node)->numMembers() == 2);
        if ((yyvsp[-3].node)->getMember(0) != nullptr && (yyvsp[-3].node)->getMember(0)->type != NODE_TYPE_NOP) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected quantifier value found for array expansion operation.", yylloc.first_line, yylloc.first_column);
        }
      }

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      } else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 5902 "grammar.cpp"
    break;

  case 257: /* ndarray_expression_list: ndarray_expression  */
#line 2404 "grammar.y"
                       {

    }
#line 5910 "grammar.cpp"
    break;

  case 258: /* ndarray_expression_list: ndarray_expression_list "," ndarray_expression  */
#line 2407 "grammar.y"
                                                       {

    }
#line 5918 "grammar.cpp"
    break;

  case 259: /* ndarray_expression: expression  */
#line 2412 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5926 "grammar.cpp"
    break;

  case 260: /* ndarray_expression: range_index  */
#line 2415 "grammar.y"
                {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5934 "grammar.cpp"
    break;

  case 261: /* ndarray_expression: variable_name "{" expression "}"  */
#line 2418 "grammar.y"
                                                         {
      parser->pushArrayElement(parser->ast()->createNodeNameIndex(std::string_view{(yyvsp[-3].strval).value, (yyvsp[-3].strval).length},(yyvsp[-1].node)));
    }
#line 5942 "grammar.cpp"
    break;

  case 262: /* ndarray_expression: variable_name "{" range_index "}"  */
#line 2421 "grammar.y"
                                                          {
      parser->pushArrayElement(parser->ast()->createNodeNameIndex(std::string_view{(yyvsp[-3].strval).value, (yyvsp[-3].strval).length},(yyvsp[-1].node)));
    }
#line 5950 "grammar.cpp"
    break;

  case 263: /* range_index: expression_or_none ":" expression_or_none interval_element  */
#line 2426 "grammar.y"
                                                                {
    (yyval.node)=parser->ast()->createNodeRangeIndexed((yyvsp[-3].node),(yyvsp[-1].node),(yyvsp[0].node));
  }
#line 5958 "grammar.cpp"
    break;

  case 264: /* expression_or_none: %empty  */
#line 2432 "grammar.y"
              {
      (yyval.node) = parser->ast()->createNodeNop();
    }
#line 5966 "grammar.cpp"
    break;

  case 265: /* expression_or_none: expression  */
#line 2435 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5974 "grammar.cpp"
    break;

  case 266: /* interval_element: %empty  */
#line 2440 "grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeNop();
    }
#line 5982 "grammar.cpp"
    break;

  case 267: /* interval_element: ":" expression  */
#line 2443 "grammar.y"
                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5990 "grammar.cpp"
    break;

  case 268: /* simple_value: value_literal  */
#line 2450 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5998 "grammar.cpp"
    break;

  case 269: /* simple_value: bind_parameter  */
#line 2453 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 6006 "grammar.cpp"
    break;

  case 270: /* numeric_value: "integer number"  */
#line 2459 "grammar.y"
              {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 6015 "grammar.cpp"
    break;

  case 271: /* numeric_value: "number"  */
#line 2463 "grammar.y"
             {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 6024 "grammar.cpp"
    break;

  case 272: /* value_literal: "quoted string"  */
#line 2470 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 6032 "grammar.cpp"
    break;

  case 273: /* value_literal: numeric_value  */
#line 2473 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 6040 "grammar.cpp"
    break;

  case 274: /* value_literal: "null"  */
#line 2476 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 6048 "grammar.cpp"
    break;

  case 275: /* value_literal: "true"  */
#line 2479 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 6056 "grammar.cpp"
    break;

  case 276: /* value_literal: "false"  */
#line 2482 "grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 6064 "grammar.cpp"
    break;

  case 277: /* in_or_into_collection_name: "identifier"  */
#line 2488 "grammar.y"
             {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 6074 "grammar.cpp"
    break;

  case 278: /* in_or_into_collection_name: "quoted string"  */
#line 2493 "grammar.y"
                    {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 6084 "grammar.cpp"
    break;

  case 279: /* in_or_into_collection_name: "bind data source parameter"  */
#line 2498 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 6097 "grammar.cpp"
    break;

  case 280: /* bind_parameter: "bind data source parameter"  */
#line 2509 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 6110 "grammar.cpp"
    break;

  case 281: /* bind_parameter: "bind parameter"  */
#line 2517 "grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameter(name);
    }
#line 6119 "grammar.cpp"
    break;

  case 282: /* bind_parameter_datasource_expected: "bind data source parameter"  */
#line 2524 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 6132 "grammar.cpp"
    break;

  case 283: /* bind_parameter_datasource_expected: "bind parameter"  */
#line 2532 "grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 6141 "grammar.cpp"
    break;

  case 284: /* object_element_name: "identifier"  */
#line 2539 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 6149 "grammar.cpp"
    break;

  case 285: /* object_element_name: "quoted string"  */
#line 2542 "grammar.y"
                    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 6157 "grammar.cpp"
    break;

  case 286: /* variable_name: "identifier"  */
#line 2547 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 6165 "grammar.cpp"
    break;

  case 287: /* $@21: %empty  */
#line 2558 "grammar.y"
                             {
      //开始sql
      parser->beginSQL();
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
      parser->beginSelect();
    }
#line 6177 "grammar.cpp"
    break;

  case 288: /* $@22: %empty  */
#line 2564 "grammar.y"
                                 {parser->endSelect(); }
#line 6183 "grammar.cpp"
    break;

  case 289: /* $@23: %empty  */
#line 2564 "grammar.y"
                                                                         {
      //设置let节点
      parser->executeSelectPendWithoutPop();
      parser->produceAlias();
    }
#line 6193 "grammar.cpp"
    break;

  case 290: /* sql_statements: with_statements "select" $@21 distinct_label select_list $@22 from_statements $@23 where_statements group_by_statements order_by_statements limit_statements  */
#line 2568 "grammar.y"
                                                                               {
      
      //如果select中有嵌套子查询,执行判定,产生子查询的let节点
      parser->executeSelectSubQueryPend();
      parser->produceSelectSubQuery();
      //设置return节点,
      parser->executeSelectPend();

      auto node =static_cast<AstNode*>(parser->popStack());
      AstNode* retNode = nullptr;

      TRI_ASSERT(node->type == NODE_TYPE_OBJECT);

      if(node->numMembers()==1){//不return对象,直接return对象中的一个内容
        node = node->getMemberUnchecked(0)->getMemberUnchecked(0);
      }

      if((yyvsp[-8].boolval)==true){//存在distinct
        auto const scopeType = parser->ast()->scopes()->type();

        if (scopeType == AQL_SCOPE_MAIN ||
            scopeType == AQL_SCOPE_SUBQUERY) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
        }
        AstNode* disNode = parser->ast()->createNodeDistinct(node);
        retNode = parser->ast()->createNodeReturn(disNode);

      }else{
        retNode = parser->ast()->createNodeReturn(node);
      }
      
      parser->ast()->addOperation(retNode); 
      parser->ast()->scopes()->endNested();
      //结束sql
      parser->endSQL();
    }
#line 6234 "grammar.cpp"
    break;

  case 291: /* with_statements: %empty  */
#line 2607 "grammar.y"
             {

    }
#line 6242 "grammar.cpp"
    break;

  case 292: /* with_statements: "WITH keyword" with_list  */
#line 2610 "grammar.y"
                      {
      
    }
#line 6250 "grammar.cpp"
    break;

  case 293: /* with_list: with_element  */
#line 2616 "grammar.y"
                 {

    }
#line 6258 "grammar.cpp"
    break;

  case 294: /* with_list: with_list "," with_element  */
#line 2619 "grammar.y"
                                  {

    }
#line 6266 "grammar.cpp"
    break;

  case 295: /* with_element: variable_name "as" expression  */
#line 2625 "grammar.y"
                                 {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 6275 "grammar.cpp"
    break;

  case 296: /* from_statements: %empty  */
#line 2631 "grammar.y"
               {

    }
#line 6283 "grammar.cpp"
    break;

  case 297: /* from_statements: "from" collection_pair_list  */
#line 2634 "grammar.y"
                                {

  }
#line 6291 "grammar.cpp"
    break;

  case 298: /* collection_pair_list: collection_element  */
#line 2640 "grammar.y"
                       {

    }
#line 6299 "grammar.cpp"
    break;

  case 299: /* collection_pair_list: collection_pair_list "," collection_element  */
#line 2644 "grammar.y"
                                                    {

    }
#line 6307 "grammar.cpp"
    break;

  case 300: /* collection_element: collection_pair  */
#line 2650 "grammar.y"
                    {

    }
#line 6315 "grammar.cpp"
    break;

  case 301: /* collection_element: collection_element "join" collection_pair "on" expression  */
#line 2653 "grammar.y"
                                                              {
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 6324 "grammar.cpp"
    break;

  case 302: /* collection_element: collection_element "join" collection_pair "on" start_as  */
#line 2657 "grammar.y"
                                                            {
     
    }
#line 6332 "grammar.cpp"
    break;

  case 303: /* collection_element: collection_element "join" collection_pair "on" start_and_end_as  */
#line 2660 "grammar.y"
                                                                    {
     
    }
#line 6340 "grammar.cpp"
    break;

  case 304: /* $@24: %empty  */
#line 2666 "grammar.y"
                                  {
      //得到变量名
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      AstNode* variableNameNode = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      //现在创建了一个变量节点(同时也创建一个变量)
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      Variable* variable = static_cast<Variable*>(variableNode->getData());
      //创建整个Node_type_for节点
      AstNode* options = nullptr;
      AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      //向整个ast的_root添加member
      parser->ast()->addOperation(node);
    }
#line 6358 "grammar.cpp"
    break;

  case 305: /* collection_pair: expression "as" variable_name $@24 unnest_statement  */
#line 2678 "grammar.y"
                       {

    }
#line 6366 "grammar.cpp"
    break;

  case 306: /* $@25: %empty  */
#line 2681 "grammar.y"
               {
      if((yyvsp[0].node)->isValueType(arangodb::aql::AstNodeValueType::VALUE_TYPE_STRING)){
        //现在创建了一个变量节点(同时也创建一个变量)
        parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
        AstNode* variableNode = parser->ast()->createNodeVariable((yyvsp[0].node)->getStringView(), true);
        Variable* variable = static_cast<Variable*>(variableNode->getData());
        //创建整个Node_type_for节点
        AstNode* options = nullptr;
        AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[0].node), options);
        //向整个ast的_root添加member
        parser->ast()->addOperation(node);
      }else if((yyvsp[0].node)->type ==NODE_TYPE_REFERENCE) {
        //找到引用的变量
        const Variable* expVariable = static_cast<Variable*>((yyvsp[0].node)->getData());
        //可能找到被覆盖的变量，所以用变量名去找真正的变量
        expVariable=parser->ast()->scopes()->getRealVariable(expVariable->name, true);
        //重新生成引用节点
        AstNode* refNode = parser->ast()->createNodeReference(expVariable);
        parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
        //覆盖掉原有的变量
        AstNode* variableNode = parser->ast()->createNodeCoverVariable(expVariable->name, false);
        Variable* variable = static_cast<Variable*>(variableNode->getData());
        //创建整个Node_type_for节点
        AstNode* options = nullptr;
        AstNode* node = parser->ast()->createNodeFor(variable, refNode, options);
        //向整个ast的_root添加member
        parser->ast()->addOperation(node);

      }else{
        parser->kk();
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "you need an alia", yylloc.first_line, yylloc.first_column);
      }
    }
#line 6404 "grammar.cpp"
    break;

  case 307: /* collection_pair: expression $@25 unnest_statement  */
#line 2713 "grammar.y"
                       {

    }
#line 6412 "grammar.cpp"
    break;

  case 308: /* $@26: %empty  */
#line 2716 "grammar.y"
                     {
      parser->beginGraph();
      parser->pushObject();
    }
#line 6421 "grammar.cpp"
    break;

  case 309: /* collection_pair: "identifier" "match" $@26 graph_option graph_info start_as  */
#line 2719 "grammar.y"
                                       {

    auto option= static_cast<AstNode*>(parser->popStack());
    parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);

    auto node = parser->ast()->createNodeArray();
    node->addMember(parser->ast()->createNodeValueString((yyvsp[-5].strval).value, (yyvsp[-5].strval).length));
    auto const& resolver = parser->query().resolver();
    auto collectionNode = parser->ast()->createNodeCollectionList(node, resolver);
    parser->sqlGraphInfo->collectionNode=collectionNode;
    auto traversalNode=parser->buildNodeTraversal(option);
    parser->ast()->addOperation(traversalNode);
  }
#line 6439 "grammar.cpp"
    break;

  case 310: /* $@27: %empty  */
#line 2732 "grammar.y"
                                    {parser->beginGraph();}
#line 6445 "grammar.cpp"
    break;

  case 311: /* collection_pair: "identifier" "match" "any_Shortest" $@27 graph_info_any_shortest cost_info start_end_as  */
#line 2732 "grammar.y"
                                                                                                           {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);

      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-6].strval).value, (yyvsp[-6].strval).length));
      auto const& resolver = parser->query().resolver();
      auto collectionNode = parser->ast()->createNodeCollectionList(node, resolver);
      parser->sqlGraphInfo->collectionNode=collectionNode;
      auto shortestNode=parser->buildNodeAnyShortest((yyvsp[-1].node));
      parser->ast()->addOperation(shortestNode);

    }
#line 6462 "grammar.cpp"
    break;

  case 312: /* $@28: %empty  */
#line 2744 "grammar.y"
                                    {parser->beginGraph();}
#line 6468 "grammar.cpp"
    break;

  case 313: /* collection_pair: "identifier" "match" "all_Shortest" $@28 graph_info_all_shortest start_end_as  */
#line 2744 "grammar.y"
                                                                                                 {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);

      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-5].strval).value, (yyvsp[-5].strval).length));
      auto const& resolver = parser->query().resolver();
      auto collectionNode = parser->ast()->createNodeCollectionList(node, resolver);
      parser->sqlGraphInfo->collectionNode=collectionNode;
      auto shortestNode=parser->buildNodeAllShortest();
      parser->ast()->addOperation(shortestNode);
    }
#line 6484 "grammar.cpp"
    break;

  case 314: /* $@29: %empty  */
#line 2755 "grammar.y"
                                  {parser->beginGraph();}
#line 6490 "grammar.cpp"
    break;

  case 315: /* collection_pair: "identifier" "match" "k_shortest" $@29 graph_info_k_shortest cost_info start_end_as  */
#line 2755 "grammar.y"
                                                                                                       {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);

      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-6].strval).value, (yyvsp[-6].strval).length));
      auto const& resolver = parser->query().resolver();
      auto collectionNode = parser->ast()->createNodeCollectionList(node, resolver);
      parser->sqlGraphInfo->collectionNode=collectionNode;
      auto shortestNode=parser->buildNodeKShortest((yyvsp[-1].node));
      parser->ast()->addOperation(shortestNode);
    }
#line 6506 "grammar.cpp"
    break;

  case 316: /* $@30: %empty  */
#line 2766 "grammar.y"
                             {parser->beginGraph();}
#line 6512 "grammar.cpp"
    break;

  case 317: /* collection_pair: "identifier" "match" "k_any" $@30 graph_info_any_k cost_info start_end_as  */
#line 2766 "grammar.y"
                                                                                             {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);

      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-6].strval).value, (yyvsp[-6].strval).length));
      auto const& resolver = parser->query().resolver();
      auto collectionNode = parser->ast()->createNodeCollectionList(node, resolver);
      parser->sqlGraphInfo->collectionNode=collectionNode;
      auto anyKNode=parser->buildNodeAnyK((yyvsp[-1].node));
      parser->ast()->addOperation(anyKNode);
    }
#line 6528 "grammar.cpp"
    break;

  case 318: /* cost_info: %empty  */
#line 2779 "grammar.y"
             {
      AstNode* node = parser->ast()->createNodeNop();
      (yyval.node)=node;
    }
#line 6537 "grammar.cpp"
    break;

  case 319: /* cost_info: "cost" "quoted string" cost_default  */
#line 2783 "grammar.y"
                                        {
      parser->pushObject();
      parser->pushObjectElement("weightAttribute",std::string_view{(yyvsp[-1].strval).value, (yyvsp[-1].strval).length});
      if((yyvsp[0].node)->type!=NODE_TYPE_NOP){
        parser->pushObjectElement("defaultWeight",(yyvsp[0].node));
      }
      
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 6551 "grammar.cpp"
    break;

  case 320: /* cost_default: %empty  */
#line 2794 "grammar.y"
           {
      AstNode* node = parser->ast()->createNodeNop();
      (yyval.node)=node;
    }
#line 6560 "grammar.cpp"
    break;

  case 321: /* cost_default: "cost_default" "integer number"  */
#line 2798 "grammar.y"
                             {
      (yyval.node)=(yyvsp[0].node);
    }
#line 6568 "grammar.cpp"
    break;

  case 322: /* start_end_as: %empty  */
#line 2805 "grammar.y"
             {

    }
#line 6576 "grammar.cpp"
    break;

  case 323: /* start_end_as: expression "start_as" variable_name expression "end_as" variable_name  */
#line 2808 "grammar.y"
                                                                         {
      bool success= parser->updateStartEndNode((yyvsp[-5].node),std::string_view{(yyvsp[-3].strval).value, (yyvsp[-3].strval).length},(yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      if(!success){
       parser->registerParseError(TRI_ERROR_QUERY_PARSE, "start_as end_as error", yylloc.first_line, yylloc.first_column);
      }
    }
#line 6587 "grammar.cpp"
    break;

  case 324: /* start_and_end_as: expression "start_as" variable_name "and operator" expression "end_as" variable_name  */
#line 2817 "grammar.y"
                                                                             {
      bool success= parser->updateStartEndNode((yyvsp[-6].node),std::string_view{(yyvsp[-4].strval).value, (yyvsp[-4].strval).length},(yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      if(!success){
       parser->registerParseError(TRI_ERROR_QUERY_PARSE, "start_as end_as error", yylloc.first_line, yylloc.first_column);
      }
    }
#line 6598 "grammar.cpp"
    break;

  case 325: /* graph_info_any_shortest: point "- operator" edge "- operator" "> operator" "* operator" point "FOR declaration" variable_name  */
#line 2825 "grammar.y"
                                                                     {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->ast()->createNodeDirection(2, 1);//OUTBOUND
      parser->setGraphVarNodes((yyvsp[-8].node),(yyvsp[-6].node),(yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
    }
#line 6608 "grammar.cpp"
    break;

  case 326: /* graph_info_any_shortest: point "* operator" "< operator" "- operator" edge "- operator" point "FOR declaration" variable_name  */
#line 2830 "grammar.y"
                                                                      {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->ast()->createNodeDirection(1, 1);//INBOUND
      parser->setGraphVarNodes((yyvsp[-8].node),(yyvsp[-4].node),(yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});

    }
#line 6619 "grammar.cpp"
    break;

  case 327: /* graph_info_any_shortest: point "- operator" edge "- operator" "* operator" point "FOR declaration" variable_name  */
#line 2836 "grammar.y"
                                                                 {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->ast()->createNodeDirection(0, 1);//any
      parser->setGraphVarNodes((yyvsp[-7].node),(yyvsp[-5].node),(yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});

    }
#line 6630 "grammar.cpp"
    break;

  case 328: /* graph_info_all_shortest: path point "- operator" edge "- operator" "> operator" "* operator" point  */
#line 2845 "grammar.y"
                                                      {
      auto& info=parser->sqlGraphInfo;
      auto nodeStart = parser->ast()->createNodeValueInt(0);
      auto nodeEnd = parser->ast()->createNodeValueInt(INT64_MAX-1);
      auto nodeRange = parser->ast()->createNodeRange(nodeStart, nodeEnd);
      info->directionNode=parser->ast()->createNodeDirection(2, nodeRange);//OUTBOUND
      parser->setGraphVarNodesAllShortest((yyvsp[-6].node),(yyvsp[-4].node),(yyvsp[0].node),(yyvsp[-7].node));
    }
#line 6643 "grammar.cpp"
    break;

  case 329: /* graph_info_all_shortest: path point "* operator" "< operator" "- operator" edge "- operator" point  */
#line 2853 "grammar.y"
                                                      {
      auto& info=parser->sqlGraphInfo;
      auto nodeStart = parser->ast()->createNodeValueInt(0);
      auto nodeEnd = parser->ast()->createNodeValueInt(INT64_MAX-1);
      auto nodeRange = parser->ast()->createNodeRange(nodeStart, nodeEnd);
      info->directionNode=parser->ast()->createNodeDirection(1, nodeRange);//INBOUND
      parser->setGraphVarNodesAllShortest((yyvsp[-6].node),(yyvsp[-2].node),(yyvsp[0].node),(yyvsp[-7].node));

    }
#line 6657 "grammar.cpp"
    break;

  case 330: /* graph_info_all_shortest: path point "- operator" edge "- operator" "* operator" point  */
#line 2862 "grammar.y"
                                                  {
      auto& info=parser->sqlGraphInfo;
      auto nodeStart = parser->ast()->createNodeValueInt(0);
      auto nodeEnd = parser->ast()->createNodeValueInt(INT64_MAX-1);
      auto nodeRange = parser->ast()->createNodeRange(nodeStart, nodeEnd);
      info->directionNode=parser->ast()->createNodeDirection(0, nodeRange);//any
      parser->setGraphVarNodesAllShortest((yyvsp[-5].node),(yyvsp[-3].node),(yyvsp[0].node),(yyvsp[-6].node));

    }
#line 6671 "grammar.cpp"
    break;

  case 331: /* graph_info_k_shortest: path point "- operator" edge "- operator" "> operator" "* operator" point  */
#line 2874 "grammar.y"
                                                    {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->ast()->createNodeDirection(2, 1);//OUTBOUND
      parser->setGraphVarNodesAllShortest((yyvsp[-6].node),(yyvsp[-4].node),(yyvsp[0].node),(yyvsp[-7].node));
    }
#line 6681 "grammar.cpp"
    break;

  case 332: /* graph_info_k_shortest: path point "* operator" "< operator" "- operator" edge "- operator" point  */
#line 2879 "grammar.y"
                                                      {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->ast()->createNodeDirection(1, 1);//INBOUND
      parser->setGraphVarNodesAllShortest((yyvsp[-6].node),(yyvsp[-2].node),(yyvsp[0].node),(yyvsp[-7].node));

    }
#line 6692 "grammar.cpp"
    break;

  case 333: /* graph_info_k_shortest: path point "- operator" edge "- operator" "* operator" point  */
#line 2885 "grammar.y"
                                                  {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->ast()->createNodeDirection(0, 1);//any
      parser->setGraphVarNodesAllShortest((yyvsp[-5].node),(yyvsp[-3].node),(yyvsp[0].node),(yyvsp[-6].node));

    }
#line 6703 "grammar.cpp"
    break;

  case 334: /* graph_info_any_k: path point "- operator" edge "- operator" "> operator" step point  */
#line 2893 "grammar.y"
                                                   {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->buildNodeDirection(2, (yyvsp[-1].node),true);//OUTBOUND
      parser->setGraphVarNodesAllShortest((yyvsp[-6].node),(yyvsp[-4].node),(yyvsp[0].node),(yyvsp[-7].node));
    }
#line 6713 "grammar.cpp"
    break;

  case 335: /* graph_info_any_k: path point step "< operator" "- operator" edge "- operator" point  */
#line 2898 "grammar.y"
                                                   {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->buildNodeDirection(1, (yyvsp[-5].node),true);//INBOUND
      parser->setGraphVarNodesAllShortest((yyvsp[-6].node),(yyvsp[-2].node),(yyvsp[0].node),(yyvsp[-7].node));

    }
#line 6724 "grammar.cpp"
    break;

  case 336: /* graph_info_any_k: path point "- operator" edge "- operator" step "* operator" point  */
#line 2904 "grammar.y"
                                                       {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->buildNodeDirection(0, (yyvsp[-2].node),true);//any
      parser->setGraphVarNodesAllShortest((yyvsp[-6].node),(yyvsp[-4].node),(yyvsp[0].node),(yyvsp[-7].node));

    }
#line 6735 "grammar.cpp"
    break;

  case 337: /* graph_option: graph_order restrictor  */
#line 2913 "grammar.y"
                          {

    }
#line 6743 "grammar.cpp"
    break;

  case 338: /* graph_order: %empty  */
#line 2918 "grammar.y"
           {

    }
#line 6751 "grammar.cpp"
    break;

  case 339: /* graph_order: "order" "identifier"  */
#line 2921 "grammar.y"
                     {
      auto node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      const char* name = parser->ast()->resources().registerString("order");
      parser->pushObjectElement(name, 5,node);
    }
#line 6761 "grammar.cpp"
    break;

  case 340: /* restrictor: %empty  */
#line 2928 "grammar.y"
             {

    }
#line 6769 "grammar.cpp"
    break;

  case 341: /* restrictor: "trail"  */
#line 2931 "grammar.y"
            {
      parser->pushObjectElement("uniqueEdges","path"); 
    }
#line 6777 "grammar.cpp"
    break;

  case 342: /* restrictor: "acyclic"  */
#line 2934 "grammar.y"
              {
      parser->pushObjectElement("uniqueVertices","path");
    }
#line 6785 "grammar.cpp"
    break;

  case 343: /* restrictor: "simple"  */
#line 2937 "grammar.y"
             {
      parser->pushObjectElement("uniqueVertices","path");
      parser->pushObjectElement("uniqueEdges","path");
    }
#line 6794 "grammar.cpp"
    break;

  case 344: /* start_as: %empty  */
#line 2943 "grammar.y"
             {

    }
#line 6802 "grammar.cpp"
    break;

  case 345: /* start_as: expression "start_as" variable_name  */
#line 2946 "grammar.y"
                                       {
      bool success= parser->updateStartNode((yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      if(!success){
       parser->registerParseError(TRI_ERROR_QUERY_PARSE, "start_as error", yylloc.first_line, yylloc.first_column);
      }
    }
#line 6813 "grammar.cpp"
    break;

  case 346: /* graph_info: path point "- operator" edge "- operator" "> operator" step point  */
#line 2954 "grammar.y"
                                                   {
      //默认步长为1
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->buildNodeDirection(2, (yyvsp[-1].node));//OUTBOUND
      parser->setGraphVarNodes((yyvsp[-6].node),(yyvsp[-4].node),(yyvsp[0].node),(yyvsp[-7].node));
      

    }
#line 6826 "grammar.cpp"
    break;

  case 347: /* graph_info: path point step "< operator" "- operator" edge "- operator" point  */
#line 2962 "grammar.y"
                                                   {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->buildNodeDirection(1, (yyvsp[-5].node));//INBOUND
      parser->setGraphVarNodes((yyvsp[-6].node),(yyvsp[-2].node),(yyvsp[0].node),(yyvsp[-7].node));

    }
#line 6837 "grammar.cpp"
    break;

  case 348: /* graph_info: path point "- operator" edge "- operator" step point  */
#line 2968 "grammar.y"
                                                {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->buildNodeDirection(0, (yyvsp[-1].node));//any
      parser->setGraphVarNodes((yyvsp[-5].node),(yyvsp[-3].node),(yyvsp[0].node),(yyvsp[-6].node));

    }
#line 6848 "grammar.cpp"
    break;

  case 349: /* path: %empty  */
#line 2977 "grammar.y"
             {
      AstNode* node = parser->ast()->createNodeNop();
      (yyval.node)=node;
    }
#line 6857 "grammar.cpp"
    break;

  case 350: /* path: variable_name "assignment"  */
#line 2981 "grammar.y"
                           {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      (yyval.node)=node;
    }
#line 6866 "grammar.cpp"
    break;

  case 351: /* point: "(" variable_name ")"  */
#line 2988 "grammar.y"
                               {
    AstNode* node = parser->ast()->createNodeValueString((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
    (yyval.node)=node;

  }
#line 6876 "grammar.cpp"
    break;

  case 352: /* edge: "[" variable_name "]"  */
#line 2995 "grammar.y"
                                            {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      (yyval.node)=node;

    }
#line 6886 "grammar.cpp"
    break;

  case 353: /* edge: "[" "]"  */
#line 3000 "grammar.y"
                               {
      AstNode* node = parser->ast()->createNodeNop();
      (yyval.node)=node;
    }
#line 6895 "grammar.cpp"
    break;

  case 354: /* edge: %empty  */
#line 3004 "grammar.y"
              {
      AstNode* node = parser->ast()->createNodeNop();
      (yyval.node)=node;
    }
#line 6904 "grammar.cpp"
    break;

  case 355: /* step: %empty  */
#line 3010 "grammar.y"
             {
      (yyval.node)=parser->ast()->createNodeNop();
    }
#line 6912 "grammar.cpp"
    break;

  case 356: /* step: "{" expression "," expression "}"  */
#line 3013 "grammar.y"
                                                               {
      (yyval.node)=parser->ast()->createNodeRange((yyvsp[-3].node), (yyvsp[-1].node));

    }
#line 6921 "grammar.cpp"
    break;

  case 357: /* step: "{" expression "}"  */
#line 3017 "grammar.y"
                                            {
      (yyval.node)=parser->ast()->createNodeRange((yyvsp[-1].node), (yyvsp[-1].node));

    }
#line 6930 "grammar.cpp"
    break;

  case 358: /* unnest_statement: %empty  */
#line 3024 "grammar.y"
             {

    }
#line 6938 "grammar.cpp"
    break;

  case 359: /* unnest_statement: "unnest" expression_list  */
#line 3027 "grammar.y"
                             {

    }
#line 6946 "grammar.cpp"
    break;

  case 360: /* $@31: %empty  */
#line 3030 "grammar.y"
                 {       
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node); 
    }
#line 6955 "grammar.cpp"
    break;

  case 361: /* unnest_statement: "unnest_all" $@31 optional_axis_name_list  */
#line 3033 "grammar.y"
                              {
      parser->ast()->injectOptionForNodeFor(parser->popArray());
    }
#line 6963 "grammar.cpp"
    break;

  case 362: /* expression_list: expression_element  */
#line 3038 "grammar.y"
                       {

    }
#line 6971 "grammar.cpp"
    break;

  case 363: /* expression_list: expression_list "- operator" "> operator" expression_element  */
#line 3041 "grammar.y"
                                                     {

    }
#line 6979 "grammar.cpp"
    break;

  case 364: /* expression_element: expression "as" variable_name  */
#line 3046 "grammar.y"
                                 {
      //得到变量名
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      AstNode* variableNameNode = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      //现在创建了一个变量节点(同时也创建一个变量)
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      Variable* variable = static_cast<Variable*>(variableNode->getData());
      //创建整个Node_type_for节点
      AstNode* options = nullptr;
      AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      //向整个ast的_root添加member
      parser->ast()->addOperation(node);
  }
#line 6997 "grammar.cpp"
    break;

  case 365: /* optional_axis_name_list: %empty  */
#line 3062 "grammar.y"
             {

    }
#line 7005 "grammar.cpp"
    break;

  case 366: /* optional_axis_name_list: "as" axis_name  */
#line 3065 "grammar.y"
                  {

  }
#line 7013 "grammar.cpp"
    break;

  case 367: /* optional_axis_name_list: "as" axis_name "(" axis_name_list ")"  */
#line 3068 "grammar.y"
                                                 {
      
   }
#line 7021 "grammar.cpp"
    break;

  case 368: /* axis_name_list: axis_name  */
#line 3074 "grammar.y"
              {

    }
#line 7029 "grammar.cpp"
    break;

  case 369: /* axis_name_list: axis_name_list "," axis_name  */
#line 3077 "grammar.y"
                                     {

    }
#line 7037 "grammar.cpp"
    break;

  case 370: /* axis_name: "null"  */
#line 3082 "grammar.y"
           {
      auto node = parser->ast()->createNodeNop();
      parser->pushArrayElement(node);
    }
#line 7046 "grammar.cpp"
    break;

  case 371: /* axis_name: variable_name  */
#line 3086 "grammar.y"
                  {
      auto node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 7055 "grammar.cpp"
    break;

  case 372: /* distinct_label: %empty  */
#line 3093 "grammar.y"
             {
      (yyval.boolval)=false;
    }
#line 7063 "grammar.cpp"
    break;

  case 373: /* distinct_label: "DISTINCT modifier"  */
#line 3096 "grammar.y"
               {
      (yyval.boolval)=true;
    }
#line 7071 "grammar.cpp"
    break;

  case 374: /* select_list: select_element  */
#line 3102 "grammar.y"
                  {

    }
#line 7079 "grammar.cpp"
    break;

  case 375: /* select_list: select_list "," select_element  */
#line 3105 "grammar.y"
                                      {

    }
#line 7087 "grammar.cpp"
    break;

  case 376: /* select_element: expression "as" variable_name  */
#line 3110 "grammar.y"
                                  {
      if(parser->usedNULLAlia()){
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "The previous one requires an alias", yylloc.first_line, yylloc.first_column);
      }
      parser->disableNULLAlia();
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, (yyvsp[-2].node));
      if(!(yyvsp[-2].node)->hasFlag(FLAG_TIMES)){//.*语法创建的不生成别名
        parser->pushAliasQueue((yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      }
    }
#line 7102 "grammar.cpp"
    break;

  case 377: /* select_element: expression  */
#line 3120 "grammar.y"
               {
      if((yyvsp[0].node)->type == NODE_TYPE_ATTRIBUTE_ACCESS|| (yyvsp[0].node)->type == NODE_TYPE_COLLECTION){
        if(parser->usedNULLAlia()){
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "The previous one requires an alias", yylloc.first_line, yylloc.first_column);
        }
        parser->disableNULLAlia();
        //TODO : 名称冲突换成临时名
        parser->pushObjectElement((yyvsp[0].node)->getStringValue(), (yyvsp[0].node)->getStringLength(), (yyvsp[0].node));
        //.*语法创建的不生成别名,NODE_TYPE_COLLECTION也不生成别名
        if(!(yyvsp[0].node)->hasFlag(FLAG_TIMES) && (yyvsp[0].node)->type != NODE_TYPE_COLLECTION){
          parser->pushAliasQueue((yyvsp[0].node),(yyvsp[0].node)->getStringView());
        }
      }else{
        if(parser->allowNULLAlia()){
          //如果select子句中只有一个元素,可以接受没有别名,随便注册一个别名(这个名称不会被使用)
          const char* name= parser->ast()->resources().registerString("_",1);
          parser->pushObjectElement(name, 1, (yyvsp[0].node));
          parser->useNULLAlia();
          parser->disableNULLAlia();
        }else{
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "you need an alias", yylloc.first_line, yylloc.first_column); 
        }
      }
    }
#line 7131 "grammar.cpp"
    break;

  case 378: /* where_statements: %empty  */
#line 3146 "grammar.y"
                {
    }
#line 7138 "grammar.cpp"
    break;

  case 379: /* where_statements: "where" expression  */
#line 3148 "grammar.y"
                       {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 7148 "grammar.cpp"
    break;

  case 380: /* group_by_statements: %empty  */
#line 3156 "grammar.y"
                {
      //检查是否有聚集
      parser->produceAggregateStep1();
      AstNode* aggNode=parser->produceAggregateStep2();
      if(aggNode->numMembers()!=0){ //有聚集函数,创建聚集
        VarSet variablesIntroduced{};
        auto scopes = parser->ast()->scopes();

        if (::startCollectScope(scopes)) {
          ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, aggNode);
        }
        AstNode const* into = ::getIntoVariable(parser, nullptr);
        AstNode const* intoExpression = ::getIntoExpression(nullptr);

        auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), aggNode, into, intoExpression, nullptr, nullptr);
        parser->ast()->addOperation(node);
      }
      parser->produceAggAlias();

    }
#line 7173 "grammar.cpp"
    break;

  case 381: /* $@32: %empty  */
#line 3176 "grammar.y"
                           {parser->produceAggregateStep1();}
#line 7179 "grammar.cpp"
    break;

  case 382: /* group_by_statements: group_by_variable_list $@32 having_statements  */
#line 3176 "grammar.y"
                                                                                {

      parser->setHaving((yyvsp[0].node));
      parser->processHaving();
      AstNode* aggNode=parser->produceAggregateStep2();

      auto scopes = parser->ast()->scopes();
      VarSet variablesIntroduced{};
      if (::startCollectScope(scopes)) {//开始一个新的CollectScope,要重新注册(实际上collect_variable_list和aggregate中已经注册在上一层的scopes了)
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, aggNode);
      }

      AstNode const* into = ::getIntoVariable(parser, nullptr);
      AstNode const* intoExpression = ::getIntoExpression(nullptr);

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node),aggNode,into, intoExpression, nullptr, nullptr);
      parser->ast()->addOperation(node);

      parser->produceAggAlias();
      //添加having
      if((yyvsp[0].node)!=nullptr){
        auto filterNode = parser->ast()->createNodeFilter((yyvsp[0].node));
        parser->ast()->addOperation(filterNode);
      }
    }
#line 7210 "grammar.cpp"
    break;

  case 383: /* $@33: %empty  */
#line 3204 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 7219 "grammar.cpp"
    break;

  case 384: /* group_by_variable_list: "group" "by" $@33 group_by_list  */
#line 3207 "grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 7229 "grammar.cpp"
    break;

  case 385: /* group_by_list: group_by_element  */
#line 3214 "grammar.y"
                    {

    }
#line 7237 "grammar.cpp"
    break;

  case 386: /* group_by_list: group_by_list "," group_by_element  */
#line 3218 "grammar.y"
                                          {

    }
#line 7245 "grammar.cpp"
    break;

  case 387: /* group_by_element: expression  */
#line 3223 "grammar.y"
              {
      std::string vName = parser->ast()->variables()->nextName();
      auto node = parser->ast()->createNodeAssign(vName.c_str(), vName.size(), (yyvsp[0].node),false);
      parser->updateWillReturnNode(node);
      parser->pushArrayElement(node);
    }
#line 7256 "grammar.cpp"
    break;

  case 388: /* having_statements: %empty  */
#line 3231 "grammar.y"
             {
      (yyval.node)=nullptr;
    }
#line 7264 "grammar.cpp"
    break;

  case 389: /* having_statements: "having" expression  */
#line 3234 "grammar.y"
                        {
      (yyval.node)=(yyvsp[0].node);
    }
#line 7272 "grammar.cpp"
    break;

  case 390: /* order_by_statements: %empty  */
#line 3239 "grammar.y"
                 {
    }
#line 7279 "grammar.cpp"
    break;

  case 391: /* $@34: %empty  */
#line 3241 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 7288 "grammar.cpp"
    break;

  case 392: /* order_by_statements: "order" "by" $@34 sort_list  */
#line 3244 "grammar.y"
                {
      auto list = static_cast<AstNode*>(parser->popStack());
      parser->processOrderBy(list);
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 7299 "grammar.cpp"
    break;

  case 393: /* limit_statements: %empty  */
#line 3252 "grammar.y"
                   {
    }
#line 7306 "grammar.cpp"
    break;

  case 394: /* limit_statements: limit_statement  */
#line 3254 "grammar.y"
                   {

  }
#line 7314 "grammar.cpp"
    break;


#line 7318 "grammar.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      {
        yypcontext_t yyctx
          = {yyssp, yytoken, &yylloc};
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == -1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *,
                             YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (yymsg)
              {
                yysyntax_error_status
                  = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
                yymsgp = yymsg;
              }
            else
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = YYENOMEM;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == YYENOMEM)
          YYNOMEM;
      }
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= T_END)
        {
          /* Return failure if at end of input.  */
          if (yychar == T_END)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
  return yyresult;
}

