#line 16 "tokens.ll"
/* clang-format off */

#include <algorithm>
#include <cstdint>




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define Aql_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer Aql_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define Aql_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer Aql_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define Aql_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer Aql_scan_buffer
#endif

    
#ifdef yy_scan_string
#define Aql_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string Aql_scan_string
#endif

    
#ifdef yy_scan_bytes
#define Aql_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes Aql_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define Aql_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer Aql_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define Aql_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer Aql_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define Aql_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state Aql_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define Aql_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer Aql_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define Aqlpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state Aqlpush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define Aqlpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state Aqlpop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define Aqlensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack Aqlensure_buffer_stack
#endif

    
#ifdef yylex
#define Aqllex_ALREADY_DEFINED
#else
#define yylex Aqllex
#endif

    
#ifdef yyrestart
#define Aqlrestart_ALREADY_DEFINED
#else
#define yyrestart Aqlrestart
#endif

    
#ifdef yylex_init
#define Aqllex_init_ALREADY_DEFINED
#else
#define yylex_init Aqllex_init
#endif

    
#ifdef yylex_init_extra
#define Aqllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra Aqllex_init_extra
#endif

    
#ifdef yylex_destroy
#define Aqllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy Aqllex_destroy
#endif

    
#ifdef yyget_debug
#define Aqlget_debug_ALREADY_DEFINED
#else
#define yyget_debug Aqlget_debug
#endif

    
#ifdef yyset_debug
#define Aqlset_debug_ALREADY_DEFINED
#else
#define yyset_debug Aqlset_debug
#endif

    
#ifdef yyget_extra
#define Aqlget_extra_ALREADY_DEFINED
#else
#define yyget_extra Aqlget_extra
#endif

    
#ifdef yyset_extra
#define Aqlset_extra_ALREADY_DEFINED
#else
#define yyset_extra Aqlset_extra
#endif

    
#ifdef yyget_in
#define Aqlget_in_ALREADY_DEFINED
#else
#define yyget_in Aqlget_in
#endif

    
#ifdef yyset_in
#define Aqlset_in_ALREADY_DEFINED
#else
#define yyset_in Aqlset_in
#endif

    
#ifdef yyget_out
#define Aqlget_out_ALREADY_DEFINED
#else
#define yyget_out Aqlget_out
#endif

    
#ifdef yyset_out
#define Aqlset_out_ALREADY_DEFINED
#else
#define yyset_out Aqlset_out
#endif

    
#ifdef yyget_leng
#define Aqlget_leng_ALREADY_DEFINED
#else
#define yyget_leng Aqlget_leng
#endif

    
#ifdef yyget_text
#define Aqlget_text_ALREADY_DEFINED
#else
#define yyget_text Aqlget_text
#endif

    
#ifdef yyget_lineno
#define Aqlget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno Aqlget_lineno
#endif

    
#ifdef yyset_lineno
#define Aqlset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno Aqlset_lineno
#endif

    
        
#ifdef yyget_column
#define Aqlget_column_ALREADY_DEFINED
#else
#define yyget_column Aqlget_column
#endif

        
#ifdef yyset_column
#define Aqlset_column_ALREADY_DEFINED
#else
#define yyset_column Aqlset_column
#endif

    
    
#ifdef yywrap
#define Aqlwrap_ALREADY_DEFINED
#else
#define yywrap Aqlwrap
#endif




    
#ifdef yyget_lval
#define Aqlget_lval_ALREADY_DEFINED
#else
#define yyget_lval Aqlget_lval
#endif

    
#ifdef yyset_lval
#define Aqlset_lval_ALREADY_DEFINED
#else
#define yyset_lval Aqlset_lval
#endif




    
#ifdef yyget_lloc
#define Aqlget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc Aqlget_lloc
#endif

    
#ifdef yyset_lloc
#define Aqlset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc Aqlset_lloc
#endif




#ifdef yyalloc
#define Aqlalloc_ALREADY_DEFINED
#else
#define yyalloc Aqlalloc
#endif

    
#ifdef yyrealloc
#define Aqlrealloc_ALREADY_DEFINED
#else
#define yyrealloc Aqlrealloc
#endif

    
#ifdef yyfree
#define Aqlfree_ALREADY_DEFINED
#else
#define yyfree Aqlfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define Aqlwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[353] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  121,  119,  109,  110,   61,   93,
       81,   68,  119,   98,   74,   75,   66,   64,   73,   65,
      119,   67,  103,  103,   71,   80,   58,   59,   56,   69,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       78,   79,  119,   83,   76,  119,   77,  119,   87,   86,
       87,   84,   92,   91,   92,   92,  102,  101,   99,  102,
       97,   96,   94,   97,  113,  112,  116,  118,  117,  109,
        0,   54,    0,   52,   82,   62,   72,  106,  114,  111,

        0,    0,    0,    0,  103,   70,   57,   53,   51,   55,
      107,    0,    0,   82,   82,   82,   82,   82,   39,   82,
       43,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       17,   82,   82,   82,   82,   82,   82,   47,   16,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,    0,
       63,   88,   85,   90,   89,  100,   95,  113,  116,  115,
        0,  106,  104,    0,  106,  105,  107,  108,    0,  107,
       82,   33,   15,   32,   11,    0,   82,   82,   82,   82,
       82,    1,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,    2,   82,   82,   82,   14,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   60,  108,  108,  107,  107,   82,   82,
        0,   82,   12,   82,   82,   82,   38,   82,   82,   82,
       82,   82,   18,   46,   82,   82,   36,   82,   34,    0,
       48,   82,   82,   82,   82,   82,   82,   82,    6,   49,
       82,   82,   82,   82,   82,   19,  108,  108,   82,   82,
        0,   82,   82,   50,   82,   25,   41,   82,   82,   82,
       82,   82,    7,    0,   42,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   40,   82,   82,   82,    0,   82,
       82,    3,   44,   82,   21,   82,   82,    0,   82,   20,

       82,    4,   37,   82,   45,   22,   24,    8,   82,   82,
        0,    5,   82,   31,   29,   82,   13,   82,   23,   82,
       82,   82,   35,    9,   82,   30,   82,   10,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   26,   82,   82,   82,   82,   82,   27,   82,
       28,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   44,
       53,   54,   55,    1,   56,   57,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   44,   74,   75,   76,   77,   78,   79,   51,
       80,   44,   81,   82,   83,   84,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   85,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   86,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[87] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    1,    4,    4,    4,
        1,    1,    1,    1,    1,    1,    5,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1,    1,    1,    8,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[381] =
    {   0,
        0,    0,   84,   85,   86,   89,   90,   91,   92,   93,
      348,  338,   98,   99,  340, 1827,  332, 1827,  101, 1827,
        0, 1827,  324, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
       89,  100,   97,  100,  303, 1827,  249,   66,  247, 1827,
       79,  168,  145,  134,  160,  104,  175,  209,  163,  216,
      232,  240,  243,  250,  262,  258,  293,  297,  311,  325,
     1827, 1827,  192, 1827, 1827,  164, 1827,  160, 1827, 1827,
        0, 1827, 1827, 1827,    0,  145, 1827, 1827, 1827,    0,
     1827, 1827, 1827,    0,    0, 1827,    0, 1827,  196,  203,
      253, 1827,   50, 1827,  282, 1827, 1827,  180, 1827, 1827,

      150,   96,  344,    0,  354, 1827, 1827, 1827, 1827, 1827,
        0,  148,  121,    0,  357,  369,  375,  378,  381,  403,
      399,  408,  430,  433,  442,  448,  451,  464,  472,  454,
      504,  519,  248,  522,  475,  546,  528,  534,  539,  554,
      585,  588,  593,  600,  619,  628,  632,  653,  661,  115,
     1827, 1827, 1827, 1827, 1827, 1827, 1827,    0,    0, 1827,
        0,  671,  109,  266,  328,    0,    0,    0,  102,  101,
      686,  692,  700,  703,  706,  171,  710,  716,  721,  725,
      733,  745,  755,  764,  767,  772,  784,  798,  794,  814,
      103,  101,  823,  827,  844,  849,  872,  858,  875,  853,

      883,  897,  900,  903,  868,  914,  925,  932,  954,  960,
      978,  982,  949, 1827,    0,   95,   93,    0,  988,  109,
      176,  999, 1006, 1009, 1017, 1021, 1028, 1039, 1049, 1052,
     1062, 1068, 1071, 1078,  142,  181, 1081, 1096, 1101,  366,
     1110, 1113, 1126, 1129, 1135, 1141, 1170, 1155, 1161, 1176,
     1190, 1186, 1194, 1202, 1205, 1225,   78,    0, 1233,  232,
      298, 1236, 1252, 1255, 1260, 1264, 1268, 1280, 1284, 1309,
      315,  219, 1312,  337, 1319, 1323, 1327, 1330, 1343, 1354,
     1362, 1373, 1377, 1384, 1387, 1397, 1407,  343,  220, 1403,
     1418, 1426, 1436, 1449, 1452,  262,  336,    0, 1465, 1468,

     1471, 1475, 1478, 1482, 1493, 1496, 1499, 1521, 1524,  362,
      399, 1527, 1540, 1543,    0,  378, 1827, 1547, 1550, 1554,
     1566,  409, 1827, 1570,  434, 1573, 1593, 1599,  392,  450,
      392,  481,   77,  460,  515,  456,  539,   74,  491,  559,
      553,  545,    0,  571,  588,  567,  585,  599,    0,  587,
        0, 1827, 1655, 1663, 1671, 1679, 1687, 1695, 1698, 1702,
     1707, 1715, 1723, 1731, 1739, 1747, 1755, 1760, 1763, 1768,
     1773, 1778, 1786, 1788, 1793, 1798, 1803, 1808, 1813, 1821
    } ;

static const flex_int16_t yy_def[381] =
    {   0,
      352,    1,  353,  353,  354,  354,  355,  355,  356,  356,
      357,  357,  358,  358,  352,  352,  352,  352,  352,  352,
      359,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      360,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      352,  352,  359,  352,  352,  352,  352,  352,  352,  352,
      362,  352,  352,  352,  363,  352,  352,  352,  352,  364,
      352,  352,  352,  365,  366,  352,  367,  352,  352,  352,
      352,  352,  352,  352,  361,  352,  352,  352,  352,  352,

      352,  352,  352,  368,  352,  352,  352,  352,  352,  352,
      369,  370,  371,  372,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  372,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  359,
      352,  352,  352,  352,  352,  352,  352,  366,  367,  352,
      373,  352,  352,  352,  352,  368,  369,  374,  375,  376,
      361,  361,  361,  361,  361,  352,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      372,  372,  361,  361,  361,  361,  361,  361,  361,  361,

      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  352,  374,  377,  376,  378,  361,  372,
      352,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  372,  372,  361,  361,  361,  352,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  377,  379,  361,  372,
      352,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      372,  372,  361,  352,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  372,  352,  361,
      361,  361,  361,  361,  361,  372,  372,  380,  361,  361,

      361,  361,  361,  361,  361,  361,  361,  361,  361,  372,
      352,  361,  361,  361,  372,  372,  352,  361,  361,  361,
      361,  372,  352,  361,  372,  361,  361,  361,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,    0,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352
    } ;

static const flex_int16_t yy_nxt[1914] =
    {   0,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   46,
       54,   55,   46,   46,   56,   57,   58,   59,   46,   60,
       46,   46,   61,   16,   62,   63,   64,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   46,
       54,   55,   46,   56,   57,   58,   59,   46,   60,   46,
       65,   66,   67,   16,   16,   68,   70,   70,   74,  108,
      161,   74,   78,   78,   82,   82,   83,   83,   79,   79,

       88,   88,   91,   91,   97,  112,   98,   98,   98,   89,
       89,   99,  101,  163,  163,  101,  100,  105,  105,  105,
      161,  114,  114,  114,   92,  102,  163,  163,  103,  341,
      235,  103,  336,  258,  113,  236,   93,   71,   71,   75,
       72,   72,   75,   80,   80,   84,   84,  104,  218,  109,
      258,  114,  114,  114,  260,  102,  218,  169,  103,  114,
      235,  103,  114,  114,  114,  236,   93,  162,  162,  162,
      150,   76,  176,  176,   76,  122,  113,  114,  114,  114,
      114,  114,  114,  260,   94,  114,  114,  114,  271,  114,
      130,  123,  114,  114,  114,  124,  121,   98,   98,   98,

      114,  116,  125,  169,   90,  122,  117,  261,  118,  221,
      126,  103,  160,  119,  120,  114,  127,  271,  114,  128,
      130,  123,  272,  114,  121,  124,  114,  114,  114,  155,
      114,  116,  125,  114,  114,  114,  117,  261,  118,  221,
      126,  103,  119,  120,  152,  151,  127,  150,  128,  114,
      114,  114,  272,  129,   91,   91,  131,  114,  114,  114,
      114,  114,  114,  297,  114,  311,  288,  114,  114,  114,
      110,  114,  107,  132,  134,  114,  114,  114,  135,  114,
      114,  114,  129,  165,  165,  165,  131,  114,   93,  141,
      191,  136,  297,  192,  311,  133,  288,  137,  114,  114,

      114,  114,  138,  132,  134,  114,  139,  315,  135,  140,
      114,  114,  114,  114,  114,  114,  114,  114,   93,  141,
      191,  136,  192,  106,  142,  289,  137,  143,  114,  114,
      114,   96,  138,   90,  144,  139,  315,  114,  140,  352,
       86,  145,  114,  114,  114,  165,  165,  165,  114,  296,
       86,  146,  114,  147,  142,  289,  164,  143,  164,  148,
      149,  165,  165,  165,  144,  352,  114,  240,  240,  101,
      145,  105,  105,  105,  114,  114,  114,  298,  352,  296,
      114,  146,  316,  147,  310,  103,  114,  114,  114,  148,
      149,  352,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  274,  171,  352,  176,  176,  322,  298,  173,  325,
      175,  316,  114,  172,  310,  103,  114,  114,  114,  352,
      114,  114,  114,  332,  114,  114,  114,  114,  352,  174,
      114,  274,  171,  114,  334,  322,  114,  352,  173,  325,
      175,  352,  352,  172,  352,  323,  177,  114,  114,  114,
      114,  114,  114,  332,  114,  329,  352,  174,  114,  114,
      114,  114,  352,  114,  334,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  323,  178,  177,  352,  179,  330,
      180,  114,  114,  114,  329,  114,  181,  337,  114,  114,
      114,  114,  114,  114,  114,  182,  333,  114,  339,  184,

      352,  352,  186,  114,  178,  183,  114,  179,  330,  114,
      180,  352,  194,  185,  195,  352,  181,  337,  342,  114,
      352,  114,  114,  114,  182,  333,  335,  114,  339,  184,
      114,  186,  187,  352,  352,  183,  114,  114,  114,  114,
      114,  114,  194,  185,  195,  114,  114,  114,  342,  188,
      189,  114,  114,  114,  190,  335,  114,  114,  114,  114,
      352,  338,  187,  114,  114,  114,  198,  352,  193,  199,
      352,  114,  114,  114,  114,  352,  352,  114,  188,  189,
      352,  352,  352,  114,  190,  340,  196,  352,  352,  114,
      338,  345,  197,  343,  114,  344,  198,  193,  346,  199,

      200,  114,  114,  114,  114,  114,  114,  114,  352,  114,
      114,  114,  114,  348,  340,  352,  196,  114,  114,  114,
      345,  197,  347,  343,  201,  344,  204,  202,  346,  200,
      349,  203,  351,  350,  205,  352,  114,  114,  114,  352,
      114,  352,  348,  114,  206,  114,  114,  114,  114,  114,
      114,  114,  347,  352,  201,  114,  204,  202,  352,  349,
      203,  351,  209,  350,  205,  352,  207,  352,  208,  352,
      114,  114,  114,  206,  114,  352,  352,  210,  114,  114,
      114,  352,  352,  114,  211,  352,  352,  114,  162,  162,
      162,  352,  209,  352,  352,  207,  352,  352,  208,  352,

      352,  212,  103,  114,  114,  114,  210,  213,  114,  114,
      114,  114,  352,  352,  211,  352,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  352,  114,  114,  114,
      219,  212,  103,  114,  114,  114,  213,  352,  114,  114,
      114,  114,  114,  114,  114,  223,  352,  220,  222,  352,
      114,  114,  114,  352,  352,  114,  352,  352,  114,  219,
      352,  114,  114,  114,  114,  114,  352,  224,  352,  352,
      225,  114,  114,  114,  114,  223,  114,  352,  222,  226,
      114,  114,  114,  114,  114,  114,  114,  352,  114,  114,
      114,  114,  352,  352,  227,  352,  224,  352,  352,  225,

      114,  114,  114,  114,  352,  352,  228,  230,  226,  352,
      114,  114,  114,  114,  229,  114,  114,  114,  352,  114,
      352,  352,  114,  352,  227,  231,  352,  114,  352,  232,
      352,  114,  114,  114,  352,  233,  228,  230,  352,  114,
      114,  114,  114,  229,  114,  114,  114,  352,  352,  114,
      352,  352,  352,  114,  234,  231,  352,  352,  237,  232,
      352,  114,  114,  114,  352,  233,  114,  114,  114,  114,
      114,  114,  114,  240,  240,  114,  114,  114,  114,  238,
      239,  243,  114,  352,  234,  114,  114,  114,  237,  114,
      114,  114,  114,  114,  114,  352,  241,  352,  352,  114,

      114,  114,  114,  352,  114,  352,  242,  352,  114,  238,
      239,  243,  248,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  244,  352,  241,  114,  352,  352,
      114,  114,  114,  114,  247,  245,  242,  352,  114,  352,
      352,  248,  114,  114,  114,  352,  352,  246,  352,  114,
      114,  114,  114,  352,  244,  114,  250,  352,  114,  352,
      249,  352,  352,  251,  247,  245,  114,  114,  114,  114,
      352,  114,  114,  114,  352,  352,  246,  114,  114,  114,
      114,  252,  352,  256,  352,  352,  250,  114,  352,  249,
      352,  253,  352,  251,  352,  114,  114,  114,  352,  114,

      114,  114,  352,  352,  114,  114,  114,  114,  352,  114,
      352,  252,  255,  256,  352,  114,  114,  114,  114,  259,
      352,  253,  254,  114,  114,  114,  114,  114,  114,  352,
      262,  352,  352,  114,  114,  114,  114,  114,  114,  114,
      114,  352,  255,  114,  263,  114,  114,  114,  264,  259,
      352,  254,  265,  352,  114,  352,  114,  114,  114,  352,
      262,  114,  352,  352,  114,  352,  114,  114,  114,  114,
      114,  114,  114,  266,  263,  352,  114,  352,  264,  114,
      114,  114,  265,  114,  352,  114,  114,  114,  114,  114,
      114,  267,  268,  352,  114,  114,  114,  114,  114,  114,

      114,  352,  352,  266,  114,  352,  352,  114,  352,  269,
      352,  352,  270,  114,  114,  114,  352,  114,  114,  114,
      114,  267,  268,  114,  352,  352,  114,  114,  114,  114,
      114,  114,  114,  114,  352,  352,  114,  352,  269,  352,
      352,  270,  273,  114,  114,  114,  114,  114,  114,  352,
      352,  114,  114,  114,  114,  352,  114,  275,  114,  114,
      114,  352,  278,  352,  352,  114,  352,  276,  114,  352,
      352,  273,  114,  114,  114,  352,  352,  277,  114,  114,
      114,  114,  352,  352,  114,  279,  275,  114,  114,  114,
      114,  352,  278,  114,  114,  114,  114,  276,  352,  280,

      352,  281,  352,  114,  114,  114,  277,  114,  114,  114,
      114,  114,  114,  114,  279,  352,  114,  352,  352,  114,
      114,  114,  114,  114,  114,  114,  352,  352,  352,  280,
      281,  114,  283,  285,  352,  282,  352,  352,  284,  352,
      352,  114,  114,  114,  114,  114,  286,  352,  352,  114,
      114,  114,  114,  114,  114,  114,  352,  114,  352,  352,
      114,  283,  352,  285,  282,  290,  287,  284,  352,  114,
      114,  114,  114,  114,  114,  352,  286,  114,  114,  114,
      114,  114,  114,  114,  352,  114,  114,  114,  114,  352,
      352,  114,  291,  352,  352,  290,  287,  114,  114,  114,

      352,  114,  114,  114,  292,  352,  352,  114,  352,  352,
      114,  352,  352,  293,  352,  114,  352,  352,  352,  114,
      352,  352,  291,  114,  294,  352,  114,  114,  114,  114,
      114,  114,  352,  292,  352,  114,  114,  114,  114,  114,
      114,  114,  114,  293,  114,  114,  114,  114,  114,  114,
      352,  352,  352,  352,  294,  295,  352,  352,  300,  301,
      114,  114,  114,  352,  114,  352,  352,  114,  352,  352,
      299,  114,  114,  114,  114,  352,  352,  352,  114,  114,
      114,  114,  114,  302,  295,  114,  352,  352,  300,  301,
      114,  114,  114,  304,  114,  114,  114,  352,  114,  299,

      303,  114,  114,  114,  114,  114,  114,  352,  306,  114,
      352,  352,  352,  302,  114,  114,  114,  114,  352,  305,
      114,  114,  114,  304,  114,  114,  114,  352,  114,  303,
      307,  352,  114,  352,  309,  114,  114,  114,  306,  114,
      352,  352,  114,  114,  114,  114,  308,  313,  305,  312,
      352,  352,  114,  114,  114,  114,  352,  352,  114,  307,
      352,  352,  114,  352,  309,  352,  114,  114,  114,  114,
      114,  114,  352,  114,  352,  308,  352,  313,  312,  314,
      352,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  352,  114,

      114,  114,  319,  352,  114,  318,  352,  114,  352,  314,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  352,
      114,  352,  352,  114,  352,  352,  114,  320,  352,  352,
      114,  352,  319,  114,  352,  318,  352,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  352,  114,  352,
      352,  114,  352,  352,  114,  352,  320,  114,  114,  114,
      114,  114,  114,  352,  114,  114,  114,  114,  114,  114,
      321,  114,  114,  114,  352,  352,  114,  326,  352,  114,
      352,  352,  114,  114,  114,  114,  324,  114,  114,  114,
      114,  114,  114,  352,  352,  114,  352,  328,  114,  321,

      327,  352,  114,  352,  352,  114,  352,  326,  352,  114,
      114,  114,  114,  352,  352,  324,  114,  114,  114,  352,
      352,  114,  352,  352,  352,  114,  352,  328,  114,  327,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  331,  352,
      352,  352,  352,  352,  114,   69,   69,   69,   69,   69,
       69,   69,   69,   73,   73,   73,   73,   73,   73,   73,
       73,   77,   77,   77,   77,   77,   77,   77,   77,   81,
       81,   81,   81,   81,   81,   81,   81,   85,   85,   85,
       85,   85,   85,   85,   85,   87,   87,   87,   87,   87,

       87,   87,   87,   95,   95,  111,  111,  111,  111,  111,
      115,  352,  115,  115,  115,  153,  352,  153,  153,  153,
      153,  153,  153,  154,  352,  154,  154,  154,  154,  154,
      154,  156,  352,  156,  156,  156,  156,  156,  156,  157,
      352,  157,  157,  157,  157,  157,  157,  158,  352,  158,
      158,  158,  158,  158,  158,  159,  352,  352,  159,  159,
      159,  159,  159,  166,  352,  166,  167,  352,  167,  167,
      167,  168,  352,  168,  168,  168,  170,  352,  170,  170,
      170,  114,  352,  114,  114,  114,  214,  214,  214,  352,
      214,  215,  352,  215,  215,  215,  216,  352,  216,  216,

      216,  217,  352,  217,  217,  217,  257,  352,  257,  257,
      257,  218,  352,  218,  218,  218,  258,  352,  258,  258,
      258,  317,  317,  317,  352,  317,   15,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352
    } ;

static const flex_int16_t yy_chk[1914] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    5,   38,
       93,    6,    7,    8,    9,   10,    9,   10,    7,    8,

       13,   14,   19,   19,   31,   41,   31,   31,   31,   13,
       14,   32,   33,  102,  102,   34,   32,   34,   34,   34,
       93,   46,   46,   46,   19,   33,  163,  163,   33,  338,
      191,   34,  333,  257,   41,  192,   19,    3,    4,    5,
        3,    4,    6,    7,    8,    9,   10,   33,  217,   38,
      216,   44,   44,   44,  220,   33,  170,  169,   33,   46,
      191,   34,   43,   43,   43,  192,   19,  101,  101,  101,
      150,    5,  176,  176,    6,   44,  113,   45,   45,   45,
       49,   49,   49,  220,   19,   42,   42,   42,  235,   44,
       49,   45,   47,   47,   47,   45,   43,   98,   98,   98,

       43,   42,   47,  112,   90,   44,   42,  221,   42,  176,
       47,   98,   89,   42,   42,   45,   47,  235,   49,   47,
       49,   45,  236,   42,   43,   45,   48,   48,   48,   76,
       47,   42,   47,   50,   50,   50,   42,  221,   42,  176,
       47,   98,   42,   42,   68,   66,   47,   63,   47,   51,
       51,   51,  236,   48,   91,   91,   50,   52,   52,   52,
       53,   53,   53,  272,   48,  289,  260,   54,   54,   54,
       39,   50,   37,   51,   53,   56,   56,   56,   53,   55,
       55,   55,   48,  164,  164,  164,   50,   51,   91,   56,
      133,   54,  272,  133,  289,   52,  260,   54,   53,   95,

       95,   95,   55,   51,   53,   54,   55,  296,   53,   55,
       57,   57,   57,   56,   58,   58,   58,   55,   91,   56,
      133,   54,  133,   35,   57,  261,   54,   57,   59,   59,
       59,   23,   55,   17,   57,   55,  296,   95,   55,   15,
       12,   58,   60,   60,   60,  165,  165,  165,   57,  271,
       11,   59,   58,   59,   57,  261,  103,   57,  103,   60,
       60,  103,  103,  103,   57,    0,   59,  240,  240,  105,
       58,  105,  105,  105,  115,  115,  115,  274,    0,  271,
       60,   59,  297,   59,  288,  105,  116,  116,  116,   60,
       60,    0,  117,  117,  117,  118,  118,  118,  119,  119,

      119,  240,  116,    0,  120,  120,  310,  274,  118,  316,
      119,  297,  115,  117,  288,  105,  121,  121,  121,    0,
      120,  120,  120,  329,  116,  122,  122,  122,    0,  118,
      117,  240,  116,  118,  331,  310,  119,    0,  118,  316,
      119,    0,    0,  117,    0,  311,  122,  123,  123,  123,
      124,  124,  124,  329,  121,  322,    0,  118,  120,  125,
      125,  125,    0,  122,  331,  126,  126,  126,  127,  127,
      127,  130,  130,  130,  311,  123,  122,    0,  124,  325,
      125,  128,  128,  128,  322,  123,  126,  334,  124,  129,
      129,  129,  135,  135,  135,  127,  330,  125,  336,  129,

        0,    0,  130,  126,  123,  128,  127,  124,  325,  130,
      125,    0,  135,  129,  135,    0,  126,  334,  339,  128,
        0,  131,  131,  131,  127,  330,  332,  129,  336,  129,
      135,  130,  131,    0,    0,  128,  132,  132,  132,  134,
      134,  134,  135,  129,  135,  137,  137,  137,  339,  131,
      131,  138,  138,  138,  132,  332,  139,  139,  139,  131,
        0,  335,  131,  136,  136,  136,  137,    0,  134,  139,
        0,  140,  140,  140,  132,    0,    0,  134,  131,  131,
        0,    0,    0,  137,  132,  337,  136,    0,    0,  138,
      335,  342,  136,  340,  139,  341,  137,  134,  344,  139,

      140,  136,  141,  141,  141,  142,  142,  142,    0,  140,
      143,  143,  143,  346,  337,    0,  136,  144,  144,  144,
      342,  136,  345,  340,  141,  341,  142,  141,  344,  140,
      347,  141,  350,  348,  143,    0,  145,  145,  145,    0,
      141,    0,  346,  142,  144,  146,  146,  146,  143,  147,
      147,  147,  345,    0,  141,  144,  142,  141,    0,  347,
      141,  350,  147,  348,  143,    0,  145,    0,  146,    0,
      148,  148,  148,  144,  145,    0,    0,  147,  149,  149,
      149,    0,    0,  146,  148,    0,    0,  147,  162,  162,
      162,    0,  147,    0,    0,  145,    0,    0,  146,    0,

        0,  149,  162,  171,  171,  171,  147,  149,  148,  172,
      172,  172,    0,    0,  148,    0,  149,  173,  173,  173,
      174,  174,  174,  175,  175,  175,    0,  177,  177,  177,
      171,  149,  162,  178,  178,  178,  149,    0,  179,  179,
      179,  171,  180,  180,  180,  178,    0,  172,  177,    0,
      181,  181,  181,    0,    0,  173,    0,    0,  174,  171,
        0,  175,  182,  182,  182,  177,    0,  179,    0,    0,
      180,  178,  183,  183,  183,  178,  179,    0,  177,  181,
      180,  184,  184,  184,  185,  185,  185,    0,  181,  186,
      186,  186,    0,    0,  183,    0,  179,    0,    0,  180,

      182,  187,  187,  187,    0,    0,  184,  186,  181,    0,
      183,  189,  189,  189,  185,  188,  188,  188,    0,  184,
        0,    0,  185,    0,  183,  187,    0,  186,    0,  188,
        0,  190,  190,  190,    0,  189,  184,  186,    0,  187,
      193,  193,  193,  185,  194,  194,  194,    0,    0,  189,
        0,    0,    0,  188,  190,  187,    0,    0,  194,  188,
        0,  195,  195,  195,    0,  189,  196,  196,  196,  190,
      200,  200,  200,  197,  197,  198,  198,  198,  193,  195,
      196,  200,  194,    0,  190,  205,  205,  205,  194,  197,
      197,  197,  199,  199,  199,    0,  198,    0,    0,  195,

      201,  201,  201,    0,  196,    0,  199,    0,  200,  195,
      196,  200,  205,  198,  202,  202,  202,  203,  203,  203,
      204,  204,  204,  205,  201,    0,  198,  197,    0,    0,
      199,  206,  206,  206,  204,  202,  199,    0,  201,    0,
        0,  205,  207,  207,  207,    0,    0,  203,    0,  208,
      208,  208,  202,    0,  201,  203,  207,    0,  204,    0,
      206,    0,    0,  208,  204,  202,  213,  213,  213,  206,
        0,  209,  209,  209,    0,    0,  203,  210,  210,  210,
      207,  209,    0,  213,    0,    0,  207,  208,    0,  206,
        0,  210,    0,  208,    0,  211,  211,  211,    0,  212,

      212,  212,    0,    0,  213,  219,  219,  219,    0,  209,
        0,  209,  212,  213,    0,  210,  222,  222,  222,  219,
        0,  210,  211,  223,  223,  223,  224,  224,  224,    0,
      222,    0,    0,  211,  225,  225,  225,  212,  226,  226,
      226,    0,  212,  219,  224,  227,  227,  227,  225,  219,
        0,  211,  226,    0,  222,    0,  228,  228,  228,    0,
      222,  223,    0,    0,  224,    0,  229,  229,  229,  230,
      230,  230,  225,  228,  224,    0,  226,    0,  225,  231,
      231,  231,  226,  227,    0,  232,  232,  232,  233,  233,
      233,  229,  230,    0,  228,  234,  234,  234,  237,  237,

      237,    0,    0,  228,  229,    0,    0,  230,    0,  231,
        0,    0,  232,  238,  238,  238,    0,  231,  239,  239,
      239,  229,  230,  232,    0,    0,  233,  241,  241,  241,
      242,  242,  242,  234,    0,    0,  237,    0,  231,    0,
        0,  232,  238,  243,  243,  243,  244,  244,  244,    0,
        0,  238,  245,  245,  245,    0,  239,  242,  246,  246,
      246,    0,  245,    0,    0,  241,    0,  243,  242,    0,
        0,  238,  248,  248,  248,    0,    0,  244,  249,  249,
      249,  243,    0,    0,  244,  246,  242,  247,  247,  247,
      245,    0,  245,  250,  250,  250,  246,  243,    0,  247,

        0,  248,    0,  252,  252,  252,  244,  251,  251,  251,
      248,  253,  253,  253,  246,    0,  249,    0,    0,  254,
      254,  254,  255,  255,  255,  247,    0,    0,    0,  247,
      248,  250,  252,  254,    0,  251,    0,    0,  253,    0,
        0,  252,  256,  256,  256,  251,  255,    0,    0,  253,
      259,  259,  259,  262,  262,  262,    0,  254,    0,    0,
      255,  252,    0,  254,  251,  262,  259,  253,    0,  263,
      263,  263,  264,  264,  264,    0,  255,  265,  265,  265,
      256,  266,  266,  266,    0,  267,  267,  267,  259,    0,
        0,  262,  263,    0,    0,  262,  259,  268,  268,  268,

        0,  269,  269,  269,  265,    0,    0,  263,    0,    0,
      264,    0,    0,  268,    0,  265,    0,    0,    0,  266,
        0,    0,  263,  267,  269,    0,  270,  270,  270,  273,
      273,  273,    0,  265,    0,  268,  275,  275,  275,  269,
      276,  276,  276,  268,  277,  277,  277,  278,  278,  278,
        0,    0,    0,    0,  269,  270,    0,    0,  277,  278,
      279,  279,  279,    0,  270,    0,    0,  273,    0,    0,
      276,  280,  280,  280,  275,    0,    0,    0,  276,  281,
      281,  281,  277,  279,  270,  278,    0,    0,  277,  278,
      282,  282,  282,  281,  283,  283,  283,    0,  279,  276,

      280,  284,  284,  284,  285,  285,  285,    0,  283,  280,
        0,    0,    0,  279,  286,  286,  286,  281,    0,  282,
      290,  290,  290,  281,  287,  287,  287,    0,  282,  280,
      284,    0,  283,    0,  287,  291,  291,  291,  283,  284,
        0,    0,  285,  292,  292,  292,  286,  291,  282,  290,
        0,    0,  286,  293,  293,  293,    0,    0,  290,  284,
        0,    0,  287,    0,  287,    0,  294,  294,  294,  295,
      295,  295,    0,  291,    0,  286,    0,  291,  290,  294,
        0,  292,  299,  299,  299,  300,  300,  300,  301,  301,
      301,  293,  302,  302,  302,  303,  303,  303,    0,  304,

      304,  304,  301,    0,  294,  299,    0,  295,    0,  294,
      305,  305,  305,  306,  306,  306,  307,  307,  307,    0,
      299,    0,    0,  300,    0,    0,  301,  304,    0,    0,
      302,    0,  301,  303,    0,  299,    0,  304,  308,  308,
      308,  309,  309,  309,  312,  312,  312,    0,  305,    0,
        0,  306,    0,    0,  307,    0,  304,  313,  313,  313,
      314,  314,  314,    0,  318,  318,  318,  319,  319,  319,
      309,  320,  320,  320,    0,    0,  308,  318,    0,  309,
        0,    0,  312,  321,  321,  321,  313,  324,  324,  324,
      326,  326,  326,    0,    0,  313,    0,  321,  314,  309,

      320,    0,  318,    0,    0,  319,    0,  318,    0,  320,
      327,  327,  327,    0,    0,  313,  328,  328,  328,    0,
        0,  321,    0,    0,    0,  324,    0,  321,  326,  320,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  327,    0,
        0,    0,    0,    0,  328,  353,  353,  353,  353,  353,
      353,  353,  353,  354,  354,  354,  354,  354,  354,  354,
      354,  355,  355,  355,  355,  355,  355,  355,  355,  356,
      356,  356,  356,  356,  356,  356,  356,  357,  357,  357,
      357,  357,  357,  357,  357,  358,  358,  358,  358,  358,

      358,  358,  358,  359,  359,  360,  360,  360,  360,  360,
      361,    0,  361,  361,  361,  362,    0,  362,  362,  362,
      362,  362,  362,  363,    0,  363,  363,  363,  363,  363,
      363,  364,    0,  364,  364,  364,  364,  364,  364,  365,
        0,  365,  365,  365,  365,  365,  365,  366,    0,  366,
      366,  366,  366,  366,  366,  367,    0,    0,  367,  367,
      367,  367,  367,  368,    0,  368,  369,    0,  369,  369,
      369,  370,    0,  370,  370,  370,  371,    0,  371,  371,
      371,  372,    0,  372,  372,  372,  373,  373,  373,    0,
      373,  374,    0,  374,  374,  374,  375,    0,  375,  375,

      375,  376,    0,  376,  376,  376,  377,    0,  377,  377,
      377,  378,    0,  378,  378,  378,  379,    0,  379,  379,
      379,  380,  380,  380,    0,  380,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352
    } ;


/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[121] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET







#include "Basics/Common.h"
#include "Basics/NumberUtils.h"
#include "Basics/conversions.h"
#include "Basics/operating-system.h"

// introduce the namespace here, otherwise following references to
// the namespace in auto-generated headers might fail

namespace arangodb {
namespace aql {
class QueryContext;
class Parser;
}
}

#include "Aql/AstNode.h"
#include "Aql/grammar.hpp"
#include "Aql/Functions.h"
#include "Aql/Parser.h"
#include "Aql/QueryContext.h"

#define YY_EXTRA_TYPE arangodb::aql::Parser*

#define YY_USER_ACTION                                                   \
  yylloc->first_line = static_cast<int>(yylineno);                       \
  yylloc->first_column = static_cast<int>(yycolumn);                     \
  yylloc->last_column = static_cast<int>(yycolumn + yyleng - 1);         \
  yycolumn += static_cast<int>(yyleng);                                  \
  yyextra->increaseOffset(yyleng);

#define YY_NO_INPUT 1

#define YY_INPUT(resultBuffer, resultState, maxBytesToRead) {            \
  size_t length = std::min(yyextra->remainingLength(), static_cast<size_t>(maxBytesToRead));  \
  if (length > 0) {                                                      \
    yyextra->fillBuffer(resultBuffer, length);                           \
    resultState = length;                                                \
  } else {                                                               \
    resultState = YY_NULL;                                               \
  }                                                                      \
}



#define INITIAL 0
#define BACKTICK 1
#define FORWARDTICK 2
#define SINGLE_QUOTE 3
#define DOUBLE_QUOTE 4
#define COMMENT_SINGLE 5
#define COMMENT_MULTI 6




#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;



    YYLTYPE * yylloc_r;


    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    
    #    define yylloc yyg->yylloc_r
    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );


    
       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    

    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    



    
    
    


extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;



    yylloc = yylloc_param;


	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{


 /* ---------------------------------------------------------------------------
  * language keywords
  * --------------------------------------------------------------------------- */


	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 353 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 352 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
  return T_FOR;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  return T_LET;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
  return T_FILTER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
  return T_RETURN;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  return T_COLLECT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  return T_SORT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  return T_LIMIT;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  return T_WINDOW;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  return T_DISTINCT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
  return T_AGGREGATE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  return T_ASC;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  return T_DESC;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
  return T_NOT_IN;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  return T_NOT;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  return T_AND;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  return T_OR;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  return T_IN;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  return T_INTO;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  return T_WITH;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  return T_REMOVE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  return T_INSERT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  return T_UPDATE;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  return T_REPLACE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return T_UPSERT;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return T_GRAPH;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return T_SHORTEST_PATH;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return T_K_SHORTEST_PATHS;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return T_ALL_SHORTEST_PATHS;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return T_K_PATHS;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return T_OUTBOUND;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return T_INBOUND;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return T_ANY;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return T_ALL;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return T_NONE;
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
  return T_AT_LEAST;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  return T_LIKE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * SQL language keywords
  * --------------------------------------------------------------------------- */
case 37:
YY_RULE_SETUP
{
  return T_SELECT;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return T_FROM;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return T_AS;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return T_WHERE;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return T_GROUP;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return T_ORDER;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return T_BY;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return T_HAVING;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return T_UNNEST;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return T_JOIN;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return T_ON;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * predefined type literals
  * --------------------------------------------------------------------------- */
case 48:
YY_RULE_SETUP
{
  return T_NULL;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return T_TRUE;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return T_FALSE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * operators
  * --------------------------------------------------------------------------- */
case 51:
YY_RULE_SETUP
{
  return T_REGEX_MATCH;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return T_REGEX_NON_MATCH;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return T_EQ;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  return T_NE;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return T_GE;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return T_GT;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return T_LE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return T_LT;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return T_ASSIGN;
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
  return T_NOT_IN;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return T_NOT;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return T_AND;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return T_OR;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return T_PLUS;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  return T_MINUS;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  return T_TIMES;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  return T_DIV;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  return T_MOD;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  return T_QUESTION;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  return T_SCOPE;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  return T_COLON;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  return T_RANGE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * punctuation
  * --------------------------------------------------------------------------- */
case 73:
YY_RULE_SETUP
{
  return T_COMMA;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  return T_OPEN;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  return T_CLOSE;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  return T_OBJECT_OPEN;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  return T_OBJECT_CLOSE;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  return T_ARRAY_OPEN;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  return T_ARRAY_CLOSE;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
  return T_SEMICOLON;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
  return T_DOLLAR;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * identifiers
  * --------------------------------------------------------------------------- */
case 82:
YY_RULE_SETUP
{
  /* unquoted string */
  yylval->strval.value = yyextra->ast()->resources().registerString(yytext, yyleng);
  yylval->strval.length = yyleng;
  return T_STRING;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
  /* string enclosed in backticks */
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(BACKTICK);
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
  /* end of backtick-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->ast()->resources().registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 1, outLength);
  yylval->strval.length = outLength;
  return T_STRING;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
  /* newline character inside backtick */
}
	YY_BREAK
case YY_STATE_EOF(BACKTICK):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated identifier", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
  /* any character (except newline) inside backtick */
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
  /* string enclosed in forwardticks */
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(FORWARDTICK);
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
  /* end of forwardtick-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->ast()->resources().registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 2, outLength);
  yylval->strval.length = outLength;
  return T_STRING;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
  /* newline character inside forwardtick */
}
	YY_BREAK
case YY_STATE_EOF(FORWARDTICK):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated identifier", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
  /* any character (except newline) inside forwardtick */
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * strings
  * --------------------------------------------------------------------------- */
case 93:
YY_RULE_SETUP
{
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(DOUBLE_QUOTE);
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
  /* end of quote-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->ast()->resources().registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 1, outLength);
  yylval->strval.length = outLength;
  return T_QUOTED_STRING;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{
  /* newline character inside quote */
}
	YY_BREAK
case YY_STATE_EOF(DOUBLE_QUOTE):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated string literal", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 97:
YY_RULE_SETUP
{
  /* any character (except newline) inside quote */
}
	YY_BREAK
case 98:
YY_RULE_SETUP
{
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(SINGLE_QUOTE);
}
	YY_BREAK
case 99:
YY_RULE_SETUP
{
  /* end of quote-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->ast()->resources().registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 1, outLength);
  yylval->strval.length = outLength;
  return T_QUOTED_STRING;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{
  /* newline character inside quote */
}
	YY_BREAK
case YY_STATE_EOF(SINGLE_QUOTE):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated string literal", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 102:
YY_RULE_SETUP
{
  /* any character (except newline) inside quote */
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * number literals
  * --------------------------------------------------------------------------- */
case 103:
YY_RULE_SETUP
{
  /* a numeric integer value, base 10 (decimal) */
  arangodb::aql::AstNode* node = nullptr;
  auto parser = yyextra;

  bool valid;
  int64_t value1 = arangodb::NumberUtils::atoi<int64_t>(yytext, yytext + yyleng, valid);

  if (valid) {
    node = parser->ast()->createNodeValueInt(value1);
  } else {
    // TODO: use std::from_chars
    double value2 = TRI_DoubleString(yytext);

    if (TRI_errno() != TRI_ERROR_NO_ERROR) {
      parser->registerWarning(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE, TRI_errno_string(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE), yylloc->first_line, yylloc->first_column);
      node = parser->ast()->createNodeValueNull();
    } else {
      node = parser->ast()->createNodeValueDouble(value2);
    }
  }

  yylval->node = node;

  return T_INTEGER;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
{
  /* a numeric integer value, base 2 (binary) */
  /* note that we support an arbitrary run of leading zeroes for the actual number */

  /* cut off first 2 characters */
  char const* p = yytext + 2;
  char const* e = yytext + yyleng;

  auto parser = yyextra;
  if (static_cast<uint64_t>(e - p) > arangodb::aql::functions::bitFunctionsMaxSupportedBits) {
    /* we only support up to 32 bits for now */
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "binary number literal value exceeds the supported range", yylloc->first_line, yylloc->first_column);
  }
  
  uint64_t result = 0;

  while (p != e) {
    char c = *p;
    if (c == '1') {
      /* only the 1s are interesting for us */
      result += (static_cast<uint64_t>(1) << (e - p - 1));
    }
    ++p;
  }
  
  TRI_ASSERT(result <= UINT32_MAX);
  
  arangodb::aql::AstNode* node = parser->ast()->createNodeValueInt(static_cast<int64_t>(result));
  yylval->node = node;

  return T_INTEGER;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
{
  /* a numeric integer value, base 16 (hexadecimal) */
  /* note that we support an arbitrary run of leading zeroes for the actual number */

  /* cut off first 2 characters */
  char const* p = yytext + 2;
  char const* e = yytext + yyleng;

  auto parser = yyextra;
  /* each digit 0-9a-f carries 4 bits of information */
  if (static_cast<uint64_t>(e - p) > arangodb::aql::functions::bitFunctionsMaxSupportedBits / 4) {
    /* we only support up to 32 bits for now */
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "hex number literal value exceeds the supported range", yylloc->first_line, yylloc->first_column);
  }
  
  uint64_t result = 0;
  
  while (p != e) {
    uint8_t v;
    char c = *p;
    if (c >= 'A' && c <= 'F') {
      v = c - 'A' + 10;
    } else if (c >= 'a' && c <= 'f') {
      v = c - 'a' + 10;
    } else {
      v = c - '0';
    }
    result += (static_cast<uint64_t>(v) << (4 * (e - p - 1)));
    ++p;
  }

  TRI_ASSERT(result <= UINT32_MAX);

  arangodb::aql::AstNode* node = parser->ast()->createNodeValueInt(static_cast<int64_t>(result));
  yylval->node = node;

  return T_INTEGER;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
{
  /* a numeric double value, base 10 (decimal) */

  arangodb::aql::AstNode* node = nullptr;
  auto parser = yyextra;
  // TODO: use std::from_chars
  double value = TRI_DoubleString(yytext);

  if (TRI_errno() != TRI_ERROR_NO_ERROR) {
    parser->registerWarning(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE, TRI_errno_string(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE), yylloc->first_line, yylloc->first_column);
    node = parser->ast()->createNodeValueNull();
  } else {
    node = parser->ast()->createNodeValueDouble(value);
  }

  yylval->node = node;

  return T_DOUBLE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * bind parameters
  * --------------------------------------------------------------------------- */
case 107:
YY_RULE_SETUP
{
  /* bind parameters must start with a @
     if followed by another @, this is a collection name or a view name parameter */
  yylval->strval.value = yyextra->ast()->resources().registerString(yytext + 1, yyleng - 1);
  yylval->strval.length = yyleng - 1;
  return T_PARAMETER;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * bind data source parameters
  * --------------------------------------------------------------------------- */
case 108:
YY_RULE_SETUP
{
  /* bind parameters must start with a @
     if followed by another @, this is a collection name or a view name parameter */
  yylval->strval.value = yyextra->ast()->resources().registerString(yytext + 1, yyleng - 1);
  yylval->strval.length = yyleng - 1;
  return T_DATA_SOURCE_PARAMETER;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * whitespace etc.
  * --------------------------------------------------------------------------- */
case 109:
YY_RULE_SETUP
{
  /* whitespace is ignored */
}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{
  yycolumn = 0;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * comments
  * --------------------------------------------------------------------------- */
case 111:
YY_RULE_SETUP
{
  BEGIN(COMMENT_SINGLE);
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{
  /* line numbers are counted elsewhere already */
  yycolumn = 0;
  BEGIN(INITIAL);
}
	YY_BREAK
case 113:
YY_RULE_SETUP
{
  /* everything else */
}
	YY_BREAK
case 114:
YY_RULE_SETUP
{
  BEGIN(COMMENT_MULTI);
}
	YY_BREAK
case 115:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
}
	YY_BREAK
case 116:
YY_RULE_SETUP
{
  // eat comment in chunks
}
	YY_BREAK
case 117:
YY_RULE_SETUP
{
  // eat the lone star
}
	YY_BREAK
case YY_STATE_EOF(COMMENT_MULTI):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated multi-line comment", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
  /* line numbers are counted elsewhere already */
  yycolumn = 0;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
  /* anything else is returned as it is */
  return (int) yytext[0];
}
	YY_BREAK
case 120:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT_SINGLE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 353 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 353 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 352);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}



    
YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    

    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    




/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








