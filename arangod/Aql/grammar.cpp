/* clang-format off */
/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs

/* First part of user prologue.  */
#line 9 "grammar.y"

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/QueryContext.h"
#include "Aql/types.h"
#include "Basics/StaticStrings.h"
#include "Basics/StringUtils.h"
#include "Containers/HashSet.h"
#include "Containers/SmallVector.h"
#include "Graph/PathType.h"
#include "VocBase/AccessMode.h"

#include <absl/strings/str_cat.h>

#include <algorithm>
#include <cstdint>
#include <string>
#include <string_view>


#line 113 "grammar.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "grammar.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of query string"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_T_FOR = 3,                      /* "FOR declaration"  */
  YYSYMBOL_T_LET = 4,                      /* "LET declaration"  */
  YYSYMBOL_T_FILTER = 5,                   /* "FILTER declaration"  */
  YYSYMBOL_T_RETURN = 6,                   /* "RETURN declaration"  */
  YYSYMBOL_T_COLLECT = 7,                  /* "COLLECT declaration"  */
  YYSYMBOL_T_SORT = 8,                     /* "SORT declaration"  */
  YYSYMBOL_T_LIMIT = 9,                    /* "LIMIT declaration"  */
  YYSYMBOL_T_WINDOW = 10,                  /* "WINDOW declaration"  */
  YYSYMBOL_T_ASC = 11,                     /* "ASC keyword"  */
  YYSYMBOL_T_DESC = 12,                    /* "DESC keyword"  */
  YYSYMBOL_T_IN = 13,                      /* "IN keyword"  */
  YYSYMBOL_T_WITH = 14,                    /* "WITH keyword"  */
  YYSYMBOL_T_INTO = 15,                    /* "INTO keyword"  */
  YYSYMBOL_T_AGGREGATE = 16,               /* "AGGREGATE keyword"  */
  YYSYMBOL_T_GRAPH = 17,                   /* "GRAPH keyword"  */
  YYSYMBOL_T_SHORTEST_PATH = 18,           /* "SHORTEST_PATH keyword"  */
  YYSYMBOL_T_K_SHORTEST_PATHS = 19,        /* "K_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_K_PATHS = 20,                 /* "K_PATHS keyword"  */
  YYSYMBOL_T_ALL_SHORTEST_PATHS = 21,      /* "ALL_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_DISTINCT = 22,                /* "DISTINCT modifier"  */
  YYSYMBOL_T_REMOVE = 23,                  /* "REMOVE command"  */
  YYSYMBOL_T_INSERT = 24,                  /* "INSERT command"  */
  YYSYMBOL_T_UPDATE = 25,                  /* "UPDATE command"  */
  YYSYMBOL_T_REPLACE = 26,                 /* "REPLACE command"  */
  YYSYMBOL_T_UPSERT = 27,                  /* "UPSERT command"  */
  YYSYMBOL_T_NULL = 28,                    /* "null"  */
  YYSYMBOL_T_TRUE = 29,                    /* "true"  */
  YYSYMBOL_T_FALSE = 30,                   /* "false"  */
  YYSYMBOL_T_STRING = 31,                  /* "identifier"  */
  YYSYMBOL_T_QUOTED_STRING = 32,           /* "quoted string"  */
  YYSYMBOL_T_INTEGER = 33,                 /* "integer number"  */
  YYSYMBOL_T_DOUBLE = 34,                  /* "number"  */
  YYSYMBOL_T_PARAMETER = 35,               /* "bind parameter"  */
  YYSYMBOL_T_DATA_SOURCE_PARAMETER = 36,   /* "bind data source parameter"  */
  YYSYMBOL_T_ASSIGN = 37,                  /* "assignment"  */
  YYSYMBOL_T_NOT = 38,                     /* "not operator"  */
  YYSYMBOL_T_AND = 39,                     /* "and operator"  */
  YYSYMBOL_T_OR = 40,                      /* "or operator"  */
  YYSYMBOL_T_NOT_IN = 41,                  /* "not in operator"  */
  YYSYMBOL_T_REGEX_MATCH = 42,             /* "~= operator"  */
  YYSYMBOL_T_REGEX_NON_MATCH = 43,         /* "~! operator"  */
  YYSYMBOL_T_EQ = 44,                      /* "== operator"  */
  YYSYMBOL_T_NE = 45,                      /* "!= operator"  */
  YYSYMBOL_T_LT = 46,                      /* "< operator"  */
  YYSYMBOL_T_GT = 47,                      /* "> operator"  */
  YYSYMBOL_T_LE = 48,                      /* "<= operator"  */
  YYSYMBOL_T_GE = 49,                      /* ">= operator"  */
  YYSYMBOL_T_LIKE = 50,                    /* "like operator"  */
  YYSYMBOL_T_PLUS = 51,                    /* "+ operator"  */
  YYSYMBOL_T_MINUS = 52,                   /* "- operator"  */
  YYSYMBOL_T_TIMES = 53,                   /* "* operator"  */
  YYSYMBOL_T_DIV = 54,                     /* "/ operator"  */
  YYSYMBOL_T_MOD = 55,                     /* "% operator"  */
  YYSYMBOL_T_QUESTION = 56,                /* "?"  */
  YYSYMBOL_T_COLON = 57,                   /* ":"  */
  YYSYMBOL_T_SCOPE = 58,                   /* "::"  */
  YYSYMBOL_T_RANGE = 59,                   /* ".."  */
  YYSYMBOL_T_COMMA = 60,                   /* ","  */
  YYSYMBOL_T_OPEN = 61,                    /* "("  */
  YYSYMBOL_T_CLOSE = 62,                   /* ")"  */
  YYSYMBOL_T_OBJECT_OPEN = 63,             /* "{"  */
  YYSYMBOL_T_OBJECT_CLOSE = 64,            /* "}"  */
  YYSYMBOL_T_ARRAY_OPEN = 65,              /* "["  */
  YYSYMBOL_T_ARRAY_CLOSE = 66,             /* "]"  */
  YYSYMBOL_T_SEMICOLON = 67,               /* ";"  */
  YYSYMBOL_T_OUTBOUND = 68,                /* "outbound modifier"  */
  YYSYMBOL_T_INBOUND = 69,                 /* "inbound modifier"  */
  YYSYMBOL_T_ANY = 70,                     /* "any modifier"  */
  YYSYMBOL_T_ALL = 71,                     /* "all modifier"  */
  YYSYMBOL_T_NONE = 72,                    /* "none modifier"  */
  YYSYMBOL_T_AT_LEAST = 73,                /* "at least modifier"  */
  YYSYMBOL_T_SELECT = 74,                  /* "select"  */
  YYSYMBOL_T_FROM = 75,                    /* "from"  */
  YYSYMBOL_T_AS = 76,                      /* "as"  */
  YYSYMBOL_T_WHERE = 77,                   /* "where"  */
  YYSYMBOL_T_GROUP = 78,                   /* "group"  */
  YYSYMBOL_T_ORDER = 79,                   /* "order"  */
  YYSYMBOL_T_BY = 80,                      /* "by"  */
  YYSYMBOL_T_HAVING = 81,                  /* "having"  */
  YYSYMBOL_UMINUS = 82,                    /* UMINUS  */
  YYSYMBOL_UPLUS = 83,                     /* UPLUS  */
  YYSYMBOL_UNEGATION = 84,                 /* UNEGATION  */
  YYSYMBOL_FUNCCALL = 85,                  /* FUNCCALL  */
  YYSYMBOL_REFERENCE = 86,                 /* REFERENCE  */
  YYSYMBOL_INDEXED = 87,                   /* INDEXED  */
  YYSYMBOL_EXPANSION = 88,                 /* EXPANSION  */
  YYSYMBOL_89_ = 89,                       /* '.'  */
  YYSYMBOL_YYACCEPT = 90,                  /* $accept  */
  YYSYMBOL_optional_prune_variable = 91,   /* optional_prune_variable  */
  YYSYMBOL_with_collection = 92,           /* with_collection  */
  YYSYMBOL_with_collection_list = 93,      /* with_collection_list  */
  YYSYMBOL_optional_with = 94,             /* optional_with  */
  YYSYMBOL_95_1 = 95,                      /* $@1  */
  YYSYMBOL_queryStart = 96,                /* queryStart  */
  YYSYMBOL_query = 97,                     /* query  */
  YYSYMBOL_final_statement = 98,           /* final_statement  */
  YYSYMBOL_optional_statement_block_statements = 99, /* optional_statement_block_statements  */
  YYSYMBOL_statement_block_statement = 100, /* statement_block_statement  */
  YYSYMBOL_more_output_variables = 101,    /* more_output_variables  */
  YYSYMBOL_for_output_variables = 102,     /* for_output_variables  */
  YYSYMBOL_prune_and_options = 103,        /* prune_and_options  */
  YYSYMBOL_traversal_graph_info = 104,     /* traversal_graph_info  */
  YYSYMBOL_shortest_path_graph_info = 105, /* shortest_path_graph_info  */
  YYSYMBOL_k_shortest_paths_graph_info = 106, /* k_shortest_paths_graph_info  */
  YYSYMBOL_k_paths_graph_info = 107,       /* k_paths_graph_info  */
  YYSYMBOL_all_shortest_paths_graph_info = 108, /* all_shortest_paths_graph_info  */
  YYSYMBOL_for_statement = 109,            /* for_statement  */
  YYSYMBOL_110_2 = 110,                    /* $@2  */
  YYSYMBOL_111_3 = 111,                    /* $@3  */
  YYSYMBOL_filter_statement = 112,         /* filter_statement  */
  YYSYMBOL_let_statement = 113,            /* let_statement  */
  YYSYMBOL_let_list = 114,                 /* let_list  */
  YYSYMBOL_let_element = 115,              /* let_element  */
  YYSYMBOL_count_into = 116,               /* count_into  */
  YYSYMBOL_collect_variable_list = 117,    /* collect_variable_list  */
  YYSYMBOL_118_4 = 118,                    /* $@4  */
  YYSYMBOL_collect_statement = 119,        /* collect_statement  */
  YYSYMBOL_collect_list = 120,             /* collect_list  */
  YYSYMBOL_collect_element = 121,          /* collect_element  */
  YYSYMBOL_collect_optional_into = 122,    /* collect_optional_into  */
  YYSYMBOL_variable_list = 123,            /* variable_list  */
  YYSYMBOL_keep = 124,                     /* keep  */
  YYSYMBOL_125_5 = 125,                    /* $@5  */
  YYSYMBOL_aggregate = 126,                /* aggregate  */
  YYSYMBOL_127_6 = 127,                    /* $@6  */
  YYSYMBOL_aggregate_list = 128,           /* aggregate_list  */
  YYSYMBOL_aggregate_element = 129,        /* aggregate_element  */
  YYSYMBOL_aggregate_function_call = 130,  /* aggregate_function_call  */
  YYSYMBOL_131_7 = 131,                    /* $@7  */
  YYSYMBOL_sort_statement = 132,           /* sort_statement  */
  YYSYMBOL_133_8 = 133,                    /* $@8  */
  YYSYMBOL_sort_list = 134,                /* sort_list  */
  YYSYMBOL_sort_element = 135,             /* sort_element  */
  YYSYMBOL_sort_direction = 136,           /* sort_direction  */
  YYSYMBOL_limit_statement = 137,          /* limit_statement  */
  YYSYMBOL_window_statement = 138,         /* window_statement  */
  YYSYMBOL_return_statement = 139,         /* return_statement  */
  YYSYMBOL_in_or_into_collection = 140,    /* in_or_into_collection  */
  YYSYMBOL_remove_statement = 141,         /* remove_statement  */
  YYSYMBOL_insert_statement = 142,         /* insert_statement  */
  YYSYMBOL_update_parameters = 143,        /* update_parameters  */
  YYSYMBOL_update_statement = 144,         /* update_statement  */
  YYSYMBOL_replace_parameters = 145,       /* replace_parameters  */
  YYSYMBOL_replace_statement = 146,        /* replace_statement  */
  YYSYMBOL_update_or_replace = 147,        /* update_or_replace  */
  YYSYMBOL_upsert_input = 148,             /* upsert_input  */
  YYSYMBOL_upsert_statement = 149,         /* upsert_statement  */
  YYSYMBOL_150_9 = 150,                    /* $@9  */
  YYSYMBOL_151_10 = 151,                   /* $@10  */
  YYSYMBOL_152_11 = 152,                   /* $@11  */
  YYSYMBOL_quantifier = 153,               /* quantifier  */
  YYSYMBOL_distinct_expression = 154,      /* distinct_expression  */
  YYSYMBOL_155_12 = 155,                   /* $@12  */
  YYSYMBOL_expression = 156,               /* expression  */
  YYSYMBOL_function_name = 157,            /* function_name  */
  YYSYMBOL_function_call = 158,            /* function_call  */
  YYSYMBOL_159_13 = 159,                   /* $@13  */
  YYSYMBOL_160_14 = 160,                   /* $@14  */
  YYSYMBOL_operator_unary = 161,           /* operator_unary  */
  YYSYMBOL_operator_binary = 162,          /* operator_binary  */
  YYSYMBOL_operator_ternary = 163,         /* operator_ternary  */
  YYSYMBOL_optional_function_call_arguments = 164, /* optional_function_call_arguments  */
  YYSYMBOL_expression_or_query = 165,      /* expression_or_query  */
  YYSYMBOL_166_15 = 166,                   /* $@15  */
  YYSYMBOL_function_arguments_list = 167,  /* function_arguments_list  */
  YYSYMBOL_compound_value = 168,           /* compound_value  */
  YYSYMBOL_array = 169,                    /* array  */
  YYSYMBOL_170_16 = 170,                   /* $@16  */
  YYSYMBOL_optional_array_elements = 171,  /* optional_array_elements  */
  YYSYMBOL_array_elements_list = 172,      /* array_elements_list  */
  YYSYMBOL_array_element = 173,            /* array_element  */
  YYSYMBOL_for_options = 174,              /* for_options  */
  YYSYMBOL_options = 175,                  /* options  */
  YYSYMBOL_object = 176,                   /* object  */
  YYSYMBOL_177_17 = 177,                   /* $@17  */
  YYSYMBOL_optional_object_elements = 178, /* optional_object_elements  */
  YYSYMBOL_object_elements_list = 179,     /* object_elements_list  */
  YYSYMBOL_object_element = 180,           /* object_element  */
  YYSYMBOL_array_filter_operator = 181,    /* array_filter_operator  */
  YYSYMBOL_array_map_operator = 182,       /* array_map_operator  */
  YYSYMBOL_optional_array_filter = 183,    /* optional_array_filter  */
  YYSYMBOL_optional_array_limit = 184,     /* optional_array_limit  */
  YYSYMBOL_optional_array_return = 185,    /* optional_array_return  */
  YYSYMBOL_graph_collection = 186,         /* graph_collection  */
  YYSYMBOL_graph_collection_list = 187,    /* graph_collection_list  */
  YYSYMBOL_graph_subject = 188,            /* graph_subject  */
  YYSYMBOL_189_18 = 189,                   /* $@18  */
  YYSYMBOL_graph_direction = 190,          /* graph_direction  */
  YYSYMBOL_graph_direction_steps = 191,    /* graph_direction_steps  */
  YYSYMBOL_reference = 192,                /* reference  */
  YYSYMBOL_193_19 = 193,                   /* $@19  */
  YYSYMBOL_194_20 = 194,                   /* $@20  */
  YYSYMBOL_195_21 = 195,                   /* $@21  */
  YYSYMBOL_simple_value = 196,             /* simple_value  */
  YYSYMBOL_numeric_value = 197,            /* numeric_value  */
  YYSYMBOL_value_literal = 198,            /* value_literal  */
  YYSYMBOL_in_or_into_collection_name = 199, /* in_or_into_collection_name  */
  YYSYMBOL_bind_parameter = 200,           /* bind_parameter  */
  YYSYMBOL_bind_parameter_datasource_expected = 201, /* bind_parameter_datasource_expected  */
  YYSYMBOL_object_element_name = 202,      /* object_element_name  */
  YYSYMBOL_variable_name = 203,            /* variable_name  */
  YYSYMBOL_sql_statements = 204,           /* sql_statements  */
  YYSYMBOL_205_22 = 205,                   /* $@22  */
  YYSYMBOL_206_23 = 206,                   /* $@23  */
  YYSYMBOL_207_24 = 207,                   /* $@24  */
  YYSYMBOL_collection_pair_list = 208,     /* collection_pair_list  */
  YYSYMBOL_collection_pair = 209,          /* collection_pair  */
  YYSYMBOL_distinct_label = 210,           /* distinct_label  */
  YYSYMBOL_select_list = 211,              /* select_list  */
  YYSYMBOL_select_element = 212,           /* select_element  */
  YYSYMBOL_where_statements = 213,         /* where_statements  */
  YYSYMBOL_group_by_statements = 214,      /* group_by_statements  */
  YYSYMBOL_215_25 = 215,                   /* $@25  */
  YYSYMBOL_group_by_variable_list = 216,   /* group_by_variable_list  */
  YYSYMBOL_217_26 = 217,                   /* $@26  */
  YYSYMBOL_group_by_list = 218,            /* group_by_list  */
  YYSYMBOL_group_by_element = 219,         /* group_by_element  */
  YYSYMBOL_having_statements = 220,        /* having_statements  */
  YYSYMBOL_order_by_statements = 221,      /* order_by_statements  */
  YYSYMBOL_222_27 = 222,                   /* $@27  */
  YYSYMBOL_limit_statements = 223          /* limit_statements  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;


/* Second part of user prologue.  */
#line 56 "grammar.y"

#include <iostream>
using namespace arangodb::aql;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);

/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp,
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

namespace {
  struct strval {
  char*                  value;
  size_t                 length;
  };

bool caseInsensitiveEqual(std::string_view lhs, std::string_view rhs) noexcept {
  return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end(), [](char l, char r) {
    return arangodb::basics::StringUtils::tolower(l) == arangodb::basics::StringUtils::tolower(r);
  });
}

void handleUpsertOptions(AstNode const* options, AstNode* forNode, AstNode* forOptionsNode, AstNode* upsertOptionsNode, bool& canReadOwnWrites) {
  TRI_ASSERT(canReadOwnWrites);
  if (options != nullptr && options->type == NODE_TYPE_OBJECT) {
    for (size_t i = 0; i < options->numMembers(); ++i) {
      auto nodeMember = options->getMember(i);
      if (nodeMember->type == NODE_TYPE_OBJECT_ELEMENT) {
        std::string_view nodeMemberName = nodeMember->getStringView();
        if (nodeMemberName == arangodb::StaticStrings::IndexHintOption || 
          nodeMemberName == arangodb::StaticStrings::IndexHintOptionForce ||
          nodeMemberName == arangodb::StaticStrings::IndexHintDisableIndex ||
          nodeMemberName == arangodb::StaticStrings::UseCache) {
          forOptionsNode->addMember(nodeMember);
        } else {
          upsertOptionsNode->addMember(nodeMember);
        }

        if (nodeMemberName == arangodb::StaticStrings::ReadOwnWrites) {
          canReadOwnWrites = nodeMember->getMember(0)->isTrue();
        }
      }
    }
    forNode->changeMember(2, forOptionsNode);
  }
  if (canReadOwnWrites) {
    forNode->setFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES);
  }
}

AstNode* buildShortestPathInfo(Parser* parser,
                               char const* seperator,
                               AstNode* direction,
                               AstNode* startNode,
                               AstNode* endNode,
                               AstNode* graph,
                               AstNode* options,
                               YYLTYPE const& yyloc) {
  if (!caseInsensitiveEqual(seperator, "TO")) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", seperator, yyloc.first_line, yyloc.first_column);
  }
  auto infoNode = parser->ast()->createNodeArray();
  infoNode->addMember(direction);
  infoNode->addMember(startNode);
  infoNode->addMember(endNode);
  infoNode->addMember(graph);
  
  auto opts = parser->ast()->createNodeOptions(options);
  TRI_ASSERT(opts != nullptr);
  infoNode->addMember(opts);
  return infoNode;
}

void checkOutVariables(Parser* parser,
                       AstNode const* variableNamesNode,
                       size_t minVariables, size_t maxVariables,
                       char const* errorMessage,
                       YYLTYPE const& yyloc) {
  TRI_ASSERT(variableNamesNode != nullptr);
  TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
  if (variableNamesNode->numMembers() < minVariables ||
      variableNamesNode->numMembers() > maxVariables) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, errorMessage, yyloc.first_line, yyloc.first_column);
  }
}

void validateOptions(Parser* parser, AstNode const* node,
                     int line, int column) {
  TRI_ASSERT(node != nullptr);
  if (!node->isObject()) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "'OPTIONS' have to be an object", line, column);
  }
  if (!node->isConstant()) {
    parser->registerParseError(TRI_ERROR_QUERY_COMPILE_TIME_OPTIONS, "'OPTIONS' have to be known at query compile time", line, column);
  }
}

/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
void checkCollectVariables(Parser* parser, char const* context, 
                           AstNode const* expression,
                           int line, int column,
                           VarSet const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }

  arangodb::containers::SmallVector<AstNode const*, 4> toTraverse = { expression };
 
  // recursively find all variables in expression
  auto preVisitor = [](AstNode const* node) -> bool {
    // ignore constant nodes, as they can't contain variables
    return !node->isConstant();
  };
  auto visitor = [&](AstNode const* node) {
    // reference to a variable
    if (node != nullptr && node->type == NODE_TYPE_REFERENCE) {
      auto variable = static_cast<Variable const*>(node->getData());

      if (variable == nullptr) {
        THROW_ARANGO_EXCEPTION_MESSAGE(TRI_ERROR_INTERNAL,
                                       "invalid reference in AST");
      }

      if (variable->needsRegister()) {
        if (variablesIntroduced.contains(variable)) {
          auto msg = absl::StrCat("use of COLLECT variable '", variable->name, "' inside same COLLECT's expression");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), variable->name, line, column);
        }
        if (auto subquery = parser->ast()->getSubqueryForVariable(variable); subquery != nullptr) {
          toTraverse.push_back(subquery);
        }
      }
    }
  };

  size_t pos = 0;
  while (pos < toTraverse.size()) {
    AstNode const* node = toTraverse[pos++];
    // note: the traverseReadOnly may add to the toTraverse vector!
    Ast::traverseReadOnly(node, preVisitor, visitor);
  }
}

/// @brief register variables in the scope
void registerAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes,
                             int line, int column,
                             VarSet& variablesIntroduced,
                             AstNode const* vars) {
  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
bool validateAggregates(Parser* parser, AstNode const* aggregates,
                        int line, int column) {
  VarSet variablesIntroduced{};
  VarSet varsInAssignment{};
  
  size_t const n = aggregates->numMembers();
  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      variablesIntroduced.emplace(v);

      auto func = member->getMember(1);
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        constexpr std::string_view error = "aggregate expression must be a function call";
        parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
      } else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          constexpr std::string_view error = "unknown aggregate function used";
          parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
        }
      }
      
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.contains(it)) {
          auto msg = absl::StrCat("use of COLLECT variable '", it->name, "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name, line, column);
        }
      }
    }
  }

  return true;
}


/// @brief validate the WINDOW specification
bool validateWindowSpec(Parser* parser, AstNode const* spec,
                        int line, int column) {
  bool preceding = false;
  bool following = false;
  
  size_t const n = spec->numMembers();
  if (n == 0) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "At least one WINDOW bound must be specified ('preceding'/'following')", line, column);
  }
  
  for (size_t i = 0; i < n; ++i) {
    auto member = spec->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_OBJECT_ELEMENT);
      bool* attr{};
      auto name = member->getString();
      if (name == "preceding") {
        attr = &preceding;
      } else if (name == "following") {
        attr = &following;
      } else  {
        char const* error = "Invalid WINDOW attribute '%s'; only \"preceding\" and \"following\" are supported";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      if (*attr) {
        char const* error = "WINDOW attribute '%s' is specified multiple times";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      // mark this attribute as "seen"
      *attr = true;
    }
  }
  return true;
}

/// @brief start a new scope for the collect
bool startCollectScope(arangodb::aql::Scopes* scopes) {
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN ||
      scopes->type() == arangodb::aql::AQL_SCOPE_SUBQUERY) {
    return false;
  }


  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
AstNode const* getIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringView(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringView(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
AstNode const* getIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

AstNode* transformOutputVariables(Parser* parser, AstNode const* names) {
  auto wrapperNode = parser->ast()->createNodeArray();
  for (size_t i = 0; i < names->numMembers(); ++i) {
    AstNode* variableNameNode = names->getMemberUnchecked(i);
    TRI_ASSERT(variableNameNode->isStringValue());
    AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
    wrapperNode->addMember(variableNode);
  }
  return wrapperNode;
}

} // namespace


#line 691 "grammar.cpp"


#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if 1

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* 1 */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  10
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   2105

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  90
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  134
/* YYNRULES -- Number of rules.  */
#define YYNRULES  305
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  524

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   343


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    89,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   587,   587,   593,   603,   606,   612,   616,   620,   627,
     629,   629,   641,   643,   648,   653,   655,   658,   661,   664,
     667,   673,   675,   680,   682,   684,   686,   688,   690,   692,
     694,   696,   698,   700,   702,   707,   714,   721,   727,   734,
     758,   781,   794,   800,   806,   812,   821,   821,   872,   872,
     906,   918,   930,   942,   957,   965,   970,   972,   977,   984,
     995,   995,  1006,  1016,  1029,  1053,  1108,  1127,  1158,  1160,
    1165,  1172,  1175,  1178,  1187,  1200,  1216,  1216,  1231,  1231,
    1241,  1243,  1248,  1255,  1255,  1267,  1267,  1278,  1281,  1287,
    1293,  1296,  1299,  1302,  1308,  1313,  1320,  1335,  1353,  1361,
    1364,  1370,  1380,  1390,  1398,  1409,  1414,  1422,  1433,  1438,
    1441,  1447,  1450,  1456,  1472,  1456,  1519,  1519,  1578,  1581,
    1584,  1590,  1590,  1600,  1606,  1609,  1612,  1615,  1618,  1621,
    1627,  1630,  1643,  1643,  1652,  1652,  1662,  1665,  1668,  1674,
    1677,  1680,  1683,  1686,  1689,  1692,  1695,  1698,  1701,  1704,
    1707,  1710,  1713,  1716,  1719,  1726,  1733,  1739,  1745,  1751,
    1758,  1761,  1764,  1767,  1770,  1773,  1776,  1779,  1782,  1786,
    1790,  1794,  1798,  1802,  1806,  1810,  1817,  1820,  1826,  1828,
    1833,  1836,  1836,  1852,  1855,  1861,  1864,  1870,  1870,  1879,
    1881,  1883,  1888,  1890,  1895,  1901,  1904,  1929,  1949,  1952,
    1967,  1967,  1976,  1978,  1980,  1985,  1987,  1992,  2008,  2012,
    2022,  2029,  2032,  2038,  2041,  2047,  2050,  2054,  2058,  2062,
    2070,  2073,  2076,  2082,  2085,  2091,  2094,  2097,  2101,  2107,
    2111,  2118,  2124,  2124,  2133,  2137,  2141,  2150,  2153,  2156,
    2162,  2165,  2171,  2208,  2211,  2214,  2218,  2227,  2227,  2240,
    2255,  2268,  2281,  2281,  2319,  2319,  2370,  2373,  2379,  2383,
    2390,  2393,  2396,  2399,  2402,  2408,  2413,  2418,  2429,  2437,
    2444,  2452,  2459,  2462,  2467,  2478,  2482,  2482,  2478,  2513,
    2517,  2522,  2535,  2553,  2556,  2562,  2565,  2570,  2575,  2588,
    2590,  2598,  2616,  2616,  2643,  2643,  2653,  2657,  2662,  2670,
    2673,  2678,  2680,  2680,  2690,  2692
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if 1
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "\"invalid token\"",
  "\"FOR declaration\"", "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"",
  "\"WINDOW declaration\"", "\"ASC keyword\"", "\"DESC keyword\"",
  "\"IN keyword\"", "\"WITH keyword\"", "\"INTO keyword\"",
  "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"K_SHORTEST_PATHS keyword\"",
  "\"K_PATHS keyword\"", "\"ALL_SHORTEST_PATHS keyword\"",
  "\"DISTINCT modifier\"", "\"REMOVE command\"", "\"INSERT command\"",
  "\"UPDATE command\"", "\"REPLACE command\"", "\"UPSERT command\"",
  "\"null\"", "\"true\"", "\"false\"", "\"identifier\"",
  "\"quoted string\"", "\"integer number\"", "\"number\"",
  "\"bind parameter\"", "\"bind data source parameter\"", "\"assignment\"",
  "\"not operator\"", "\"and operator\"", "\"or operator\"",
  "\"not in operator\"", "\"~= operator\"", "\"~! operator\"",
  "\"== operator\"", "\"!= operator\"", "\"< operator\"", "\"> operator\"",
  "\"<= operator\"", "\">= operator\"", "\"like operator\"",
  "\"+ operator\"", "\"- operator\"", "\"* operator\"", "\"/ operator\"",
  "\"% operator\"", "\"?\"", "\":\"", "\"::\"", "\"..\"", "\",\"", "\"(\"",
  "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\";\"",
  "\"outbound modifier\"", "\"inbound modifier\"", "\"any modifier\"",
  "\"all modifier\"", "\"none modifier\"", "\"at least modifier\"",
  "\"select\"", "\"from\"", "\"as\"", "\"where\"", "\"group\"",
  "\"order\"", "\"by\"", "\"having\"", "UMINUS", "UPLUS", "UNEGATION",
  "FUNCCALL", "REFERENCE", "INDEXED", "EXPANSION", "'.'", "$accept",
  "optional_prune_variable", "with_collection", "with_collection_list",
  "optional_with", "$@1", "queryStart", "query", "final_statement",
  "optional_statement_block_statements", "statement_block_statement",
  "more_output_variables", "for_output_variables", "prune_and_options",
  "traversal_graph_info", "shortest_path_graph_info",
  "k_shortest_paths_graph_info", "k_paths_graph_info",
  "all_shortest_paths_graph_info", "for_statement", "$@2", "$@3",
  "filter_statement", "let_statement", "let_list", "let_element",
  "count_into", "collect_variable_list", "$@4", "collect_statement",
  "collect_list", "collect_element", "collect_optional_into",
  "variable_list", "keep", "$@5", "aggregate", "$@6", "aggregate_list",
  "aggregate_element", "aggregate_function_call", "$@7", "sort_statement",
  "$@8", "sort_list", "sort_element", "sort_direction", "limit_statement",
  "window_statement", "return_statement", "in_or_into_collection",
  "remove_statement", "insert_statement", "update_parameters",
  "update_statement", "replace_parameters", "replace_statement",
  "update_or_replace", "upsert_input", "upsert_statement", "$@9", "$@10",
  "$@11", "quantifier", "distinct_expression", "$@12", "expression",
  "function_name", "function_call", "$@13", "$@14", "operator_unary",
  "operator_binary", "operator_ternary",
  "optional_function_call_arguments", "expression_or_query", "$@15",
  "function_arguments_list", "compound_value", "array", "$@16",
  "optional_array_elements", "array_elements_list", "array_element",
  "for_options", "options", "object", "$@17", "optional_object_elements",
  "object_elements_list", "object_element", "array_filter_operator",
  "array_map_operator", "optional_array_filter", "optional_array_limit",
  "optional_array_return", "graph_collection", "graph_collection_list",
  "graph_subject", "$@18", "graph_direction", "graph_direction_steps",
  "reference", "$@19", "$@20", "$@21", "simple_value", "numeric_value",
  "value_literal", "in_or_into_collection_name", "bind_parameter",
  "bind_parameter_datasource_expected", "object_element_name",
  "variable_name", "sql_statements", "$@22", "$@23", "$@24",
  "collection_pair_list", "collection_pair", "distinct_label",
  "select_list", "select_element", "where_statements",
  "group_by_statements", "$@25", "group_by_variable_list", "$@26",
  "group_by_list", "group_by_element", "having_statements",
  "order_by_statements", "$@27", "limit_statements", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-452)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-275)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
       7,  -452,  -452,  -452,    35,  -452,   117,    18,  -452,  2078,
    -452,  -452,  -452,  -452,  -452,   110,  -452,  -452,  1952,    44,
      44,  1952,  1757,   209,  -452,  1952,  1952,  1952,  1952,  1952,
    1952,    66,  -452,  -452,  -452,  -452,  -452,   261,  -452,  -452,
    -452,  -452,  -452,    16,    20,    26,    37,    38,   117,  -452,
    -452,  -452,  -452,    46,  -452,  -452,  -452,  -452,  -452,  1952,
     -14,  1952,  1952,  1952,  -452,  -452,   510,    93,  -452,  -452,
    -452,  -452,  -452,  -452,  -452,   -43,  -452,  -452,  -452,     8,
    -452,  -452,    24,    76,  -452,    43,  -452,    91,  1586,  -452,
    -452,  1586,   105,  -452,   113,    44,   145,  1952,   924,   968,
     157,  1013,  1013,  -452,   740,  -452,   787,  -452,  -452,  -452,
    -452,    44,   113,   146,   145,  -452,  -452,  -452,  -452,  -452,
    1057,  -452,     1,  1952,  1952,    27,  1952,  1952,  1952,  1952,
    1952,  1952,  1952,  1952,  1952,  1952,  1952,  1952,  1952,  1952,
    1952,  1952,  1952,  1876,  1952,  -452,  -452,  -452,   115,    44,
     137,   156,  -452,  1838,   168,  1952,   120,    44,  1795,    44,
    1952,  1952,   186,    44,   139,  -452,   175,  -452,   169,   113,
     176,  -452,   603,  1952,   139,  -452,  1990,   143,   113,   113,
    1952,   113,  1952,   113,  1952,   215,   207,  -452,   139,   113,
    -452,   113,  1914,  -452,   181,   189,  -452,   197,  1952,   192,
     187,  -452,   217,  1586,   218,   203,  -452,   322,  1952,  1952,
    1952,  1673,  1630,   322,   299,   299,   299,   299,    79,    79,
      79,    79,   299,   225,   225,  -452,  -452,  -452,  1952,  1101,
     198,  1952,  -452,  1952,  1952,  1952,  1952,  1952,  1952,  1952,
    1952,  -452,  1914,  -452,  -452,  1146,   208,   230,  -452,  -452,
    -452,  1952,  -452,  -452,  -452,  -452,  -452,  -452,  -452,  -452,
    -452,   831,   190,  1719,  -452,  1586,  1586,    44,   231,  -452,
     253,  -452,    44,  1952,  -452,  1952,  -452,  -452,  -452,  -452,
    -452,  -452,  1586,   157,   262,   660,   690,  -452,  -452,  -452,
    -452,  -452,  -452,  -452,  1013,  -452,  1013,  -452,  1586,  1952,
    1952,    44,  -452,  -452,  1586,   232,  -452,  -452,   235,  -452,
    1952,  1190,  -452,     1,  1952,  -452,  1952,   299,   299,   299,
    1586,  1952,  1234,   322,   322,   299,   299,    79,    79,    79,
      79,   237,  -452,  -452,    22,  -452,    22,   554,   240,  -452,
     266,   183,   271,  -452,  1952,  1952,  1952,  1952,   688,  -452,
      44,   279,  -452,  1586,  -452,  -452,   113,   113,   287,   880,
    1586,   254,  -452,  -452,  -452,  1952,  1586,   256,  -452,  1586,
    -452,  1586,   260,  -452,  1952,   258,   310,   466,   251,   312,
      44,  1952,   248,  2028,  -452,  1952,  -452,  1278,  1322,  1366,
    1410,   162,  -452,   270,  -452,   206,  -452,  -452,  -452,  -452,
     107,  -452,  -452,  1952,  -452,  -452,  1952,    44,  -452,  1952,
    1952,  1952,  1952,  1952,  1952,  1952,  1952,  1952,  1586,  1952,
    1952,  1952,  -452,  1952,   325,  -452,  -452,  1952,   255,   -19,
     301,  1586,   302,  1454,  1952,  1952,  1952,  1952,  -452,  -452,
    -452,  -452,  -452,  -452,  -452,   880,  1013,  -452,  1586,   322,
     322,   299,   299,    79,    79,    79,    79,  1498,  1586,  1586,
    1542,  1952,   272,  1586,   263,   257,  -452,   139,  1952,  1952,
     688,   688,   688,   688,    -6,  1914,  1952,   113,   336,  1952,
    1586,  -452,  -452,   275,   333,   278,  -452,  1586,  1586,   113,
     113,   113,   113,  -452,   300,   304,  1013,  -452,  1952,  1586,
    1952,  -452,  -452,  -452,  1952,  -452,  -452,  -452,  -452,  -452,
      -6,  -452,   113,  1586,  1586,   319,  -452,  1952,  1586,  -452,
    -452,  1952,   176,  -452
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       9,    10,   275,    21,     0,    13,     0,   283,    12,     0,
       1,     4,   271,   270,     6,    11,     5,   284,     0,     0,
       0,     0,     0,    60,    85,     0,     0,     0,     0,     0,
       0,     0,    14,    22,    23,    25,    24,    71,    26,    27,
      28,    29,    15,    30,    31,    32,    33,    34,     0,     8,
     262,   263,   264,   242,   260,   258,   259,   269,   268,     0,
       0,     0,     0,   247,   200,   187,   288,     0,   245,   124,
     125,   126,   243,   185,   186,   128,   261,   127,   244,   276,
     285,   274,    37,     0,    35,    55,    56,     0,    54,   121,
      98,   123,     0,    78,   198,     0,    71,     0,    94,     0,
     186,     0,     0,   105,     0,   108,     0,   113,   116,   111,
     112,     0,   198,   198,    71,     7,   138,   134,   136,   137,
       0,    21,   202,   189,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   118,   120,     0,     0,
       0,     0,   132,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    62,    61,    68,     0,   198,
      86,    87,    90,     0,     0,    96,     0,     0,   198,   198,
       0,   198,     0,   198,     0,     0,    72,    63,    76,   198,
      66,   198,   181,   246,     0,   207,   273,     0,     0,     0,
     203,   205,     0,   194,     0,   190,   192,   152,     0,     0,
       0,   140,   139,   153,   158,   159,   146,   147,   148,   149,
     150,   151,   157,   141,   142,   143,   144,   145,     0,     0,
     129,     0,   287,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   181,   213,   211,     0,   252,   254,   249,   250,
     286,     0,    36,   237,   238,   239,    48,    50,    51,    52,
      53,    46,   240,     0,    57,    58,   122,     0,    79,    80,
       0,   199,     0,     0,    64,     0,    91,    92,    89,    93,
     256,   257,    95,     0,   242,   260,   268,    99,   265,   266,
     267,   100,   101,   102,     0,   103,     0,   106,   114,     0,
       0,     0,    67,    65,   180,     0,   183,    21,   179,   248,
       0,     0,   201,   204,     0,   188,   191,   155,   156,   154,
     177,     0,     0,   166,   167,   160,   161,   162,   163,   164,
     165,     0,   251,   212,   215,   214,   215,   282,   277,   279,
      38,   239,   195,   241,     0,     0,     0,     0,     0,    59,
       0,     0,    69,    70,    88,    97,   198,   198,     0,     0,
      73,    77,    74,   135,   182,   181,   209,     0,   206,   208,
     193,   176,     0,   133,     0,     0,     0,     0,     0,   220,
       0,     0,   289,     0,    49,     0,    47,     0,     0,     0,
       0,     0,   225,   231,    41,     0,   226,    81,   130,    82,
       0,   104,   107,     0,   109,   110,     0,     0,   184,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   216,     0,
       0,     0,   253,     0,   223,   281,   280,     0,   291,   242,
      39,     2,     0,   196,     0,     0,     0,     0,   236,   235,
     234,   232,   227,   228,    83,     0,     0,    75,   210,   174,
     175,   168,   169,   170,   171,   172,   173,     0,   217,   219,
     221,     0,     0,   290,     0,   301,   292,     0,     0,     0,
       0,     0,     0,     0,     0,   181,     0,   198,     0,     0,
     224,   255,   294,     0,   304,   299,    40,     3,   197,   198,
     198,   198,   198,   229,   233,     0,     0,   117,     0,   222,
       0,   302,   305,   278,     0,   293,    42,    43,    45,    44,
       0,    84,   198,   218,   298,   295,   296,     0,   300,   230,
     115,     0,   303,   297
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -452,  -452,    19,  -452,  -452,  -452,  -452,  -107,  -452,  -452,
    -452,  -452,  -452,  -452,  -452,  -452,  -452,  -452,  -452,  -452,
    -452,  -452,  -452,  -452,  -452,   202,   327,  -452,  -452,  -452,
    -452,    90,   -65,  -452,  -452,  -452,   -35,  -452,  -452,    30,
    -452,  -452,  -452,  -452,  -145,   108,  -452,  -102,  -452,  -452,
     -89,  -452,  -452,  -452,  -452,  -452,  -452,   -61,  -452,  -452,
    -452,  -452,  -452,  -122,  -452,  -452,   -18,    36,  -452,  -452,
    -452,  -452,  -452,  -452,  -237,    21,  -452,  -452,  -452,  -452,
    -452,  -452,  -452,    73,  -452,   -22,   -25,  -452,  -452,  -452,
      87,  -452,  -452,    54,  -452,  -452,  -451,  -452,  -212,  -452,
    -134,  -452,  -452,  -452,  -452,  -452,  -452,  -452,   234,   227,
      17,    13,  -452,    77,  -452,  -452,  -452,  -452,  -452,    29,
    -452,  -452,   259,  -452,  -452,  -452,  -452,  -452,  -452,  -110,
    -452,  -452,  -452,  -452
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,   430,    14,    15,     3,     6,     4,     8,    32,     9,
      33,    82,    83,   384,   256,   257,   258,   259,   260,    34,
     342,   340,    35,    36,    85,    86,    94,    37,    95,    38,
     166,   167,   113,   361,   189,   301,    96,   163,   268,   269,
     399,   475,    39,    97,   170,   171,   278,    40,    41,    42,
     178,    43,    44,   103,    45,   105,    46,   406,   108,    47,
     184,   358,   185,   150,    90,   161,   304,    67,    68,   242,
     192,    69,    70,    71,   305,   306,   307,   308,    72,    73,
     123,   204,   205,   206,   386,   165,    74,   122,   199,   200,
     201,   246,   247,   378,   424,   462,   393,   494,   394,   474,
     395,   263,    75,   121,   334,   336,   279,    76,    77,   287,
      78,   396,   202,    87,     5,     7,   156,   382,   338,   339,
      18,    79,    80,   428,   465,   485,   466,   500,   515,   516,
     505,   484,   517,   503
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      66,   100,   114,    88,    91,   331,   109,    98,    99,   101,
     102,   104,   106,   179,   194,   181,   -16,   183,  -274,    16,
     -17,     1,   153,   493,   262,   392,   -18,   374,    16,    12,
      13,   169,   195,   196,    49,    10,   197,   -19,   -20,  -130,
      17,   116,  -130,   118,   119,   120,   154,   117,   110,   191,
      50,    51,    52,    53,    54,    55,    56,    57,    58,   519,
      59,    16,   253,   254,   255,   175,   198,   115,   155,   208,
     209,   107,    60,    61,    62,    81,   -16,   210,   -16,   172,
     -17,     2,   -17,    63,   157,    64,   -18,    65,   -18,   158,
     187,   190,   145,   146,   147,   375,    84,   -19,   -20,   -19,
     -20,    57,    58,   159,  -130,   203,   207,  -130,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   229,   230,   343,   160,    64,
     138,   139,   140,   141,   142,   245,   162,    66,   144,   271,
     261,    11,   265,   266,   164,    12,    13,   274,    11,   283,
     233,   151,    12,    13,   152,   282,   292,   293,   207,   295,
     111,   297,   294,   271,   296,   151,   298,   302,   444,   303,
      48,   249,   168,    93,   288,   289,   231,   188,   234,   290,
     311,   235,   236,   237,   238,   239,   240,   241,   186,   281,
     317,   318,   319,   438,   439,   251,  -119,    57,    58,   248,
     364,   267,    64,    57,    58,   356,   273,   357,   344,   345,
     320,   346,   376,   322,   376,   323,   324,   325,   326,   327,
     328,   329,   330,    92,  -119,    93,   232,  -119,  -119,  -119,
    -119,  -119,  -119,   337,   252,   272,   275,   442,   495,   299,
     270,    57,    58,   309,   300,   348,  -272,   313,   355,   138,
     139,   140,   141,   142,   310,   353,   312,   172,   489,   490,
     491,   492,  -265,   316,   333,  -265,  -265,  -265,  -265,  -265,
    -265,  -265,  -265,   410,   314,    92,   111,    93,   140,   141,
     142,   359,   360,   335,   315,  -265,  -265,  -265,  -265,  -265,
     351,   350,   366,  -265,   363,   365,   369,   383,   203,   373,
     381,   411,   385,   371,   412,   413,   414,   415,   416,   417,
     398,   403,   124,   409,   407,   420,   377,   422,   377,   419,
    -130,   423,  -265,  -130,  -265,   427,   387,   388,   389,   390,
     441,   461,   467,   464,   401,   402,   483,   125,   481,   468,
     128,   498,    25,   482,   349,   133,   134,   135,   136,   168,
     138,   139,   140,   141,   142,   501,   418,   477,   144,   504,
     510,   264,   352,   337,   112,   431,   511,   433,   133,   134,
     135,   136,   522,   138,   139,   140,   141,   142,   362,   521,
     397,   144,   502,   354,   476,   445,   408,   400,   446,   370,
     379,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     368,   457,   458,   459,   291,   460,   280,   512,   440,   463,
     426,   523,   443,     0,   250,     0,   470,   471,   472,   473,
       0,     0,     0,     0,     0,     0,     0,   270,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   486,   480,     0,     0,     0,     0,     0,     0,
     487,   488,     0,     0,     0,   497,     0,   425,   496,     0,
     432,   499,     0,     0,     0,     0,     0,   506,   507,   508,
     509,   421,     0,     0,     0,     0,     0,     0,     0,   124,
     513,     0,   514,     0,   447,     0,   518,     0,     0,     0,
     520,     0,     0,     0,     0,     0,     0,     0,     0,   172,
       0,     0,     0,   514,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   124,     0,   144,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,   146,   147,   148,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   124,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
       0,     0,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,     0,     0,   144,   276,   277,   124,     0,     0,     0,
       0,     0,     0,     0,   145,   146,   147,   148,     0,     0,
     380,    50,    51,    52,     0,    54,    55,    56,    57,    58,
       0,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
    -266,     0,   144,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
    -266,     0,     0,   145,   146,   147,   148,     0,     0,     0,
       0,     0,     0,  -266,  -266,  -266,  -266,  -266,     0,     0,
    -267,  -266,     0,  -267,  -267,  -267,  -267,  -267,  -267,  -267,
    -267,   124,     0,     0,     0,   391,     0,     0,     0,     0,
       0,     0,     0,  -267,  -267,  -267,  -267,  -267,     0,   392,
    -266,  -267,  -266,    12,    13,     0,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,     0,     0,   144,     0,     0,
    -267,     0,  -267,   176,   180,   177,   253,   254,   341,   146,
     147,   148,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,     0,     0,   144,
     176,   182,   177,     0,     0,     0,     0,     0,     0,     0,
     145,   146,   147,   148,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   124,     0,   144,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   145,   146,   147,
     148,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,     0,     0,
     144,     0,     0,   124,     0,     0,     0,     0,     0,   253,
     254,   341,   146,   147,   148,   404,   405,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   124,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     145,   146,   147,   148,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   124,   174,   144,   173,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,   146,   147,   148,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,     0,   176,   144,   177,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   145,   146,
     147,   148,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     124,     0,   144,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   145,   146,   147,   148,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   124,     0,   144,     0,     0,   193,
       0,     0,     0,     0,     0,     0,     0,   145,   146,   147,
     148,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   321,   124,
     144,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   145,   146,   147,   148,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   124,     0,   144,     0,     0,     0,     0,
       0,     0,   332,     0,     0,     0,   145,   146,   147,   148,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   124,     0,   144,
       0,     0,     0,     0,     0,     0,   367,     0,     0,     0,
     145,   146,   147,   148,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   124,     0,   144,     0,     0,   372,     0,     0,     0,
       0,     0,     0,     0,   145,   146,   147,   148,     0,   434,
       0,     0,     0,     0,     0,     0,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   124,     0,   144,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   145,   146,
     147,   148,     0,   435,     0,     0,     0,     0,     0,     0,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   124,
       0,   144,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   145,   146,   147,   148,     0,   436,     0,     0,
       0,     0,     0,     0,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   124,     0,   144,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,   146,   147,   148,
       0,   437,     0,     0,     0,     0,     0,     0,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   124,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     145,   146,   147,   148,     0,   469,     0,     0,     0,     0,
       0,     0,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   124,     0,   144,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,   146,   147,   148,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   124,     0,   144,     0,     0,
     478,     0,     0,     0,     0,     0,     0,     0,   145,   146,
     147,   148,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   124,
       0,   144,   479,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   145,   146,   147,   148,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   124,     0,   144,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   145,   146,   147,   148,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   124,     0,     0,   144,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     145,   146,   147,   148,     0,     0,     0,     0,     0,     0,
       0,   125,     0,     0,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
       0,     0,   144,     0,     0,     0,     0,     0,     0,   347,
       0,     0,     0,   145,   146,   147,   148,    50,    51,    52,
      53,    54,    55,    56,    57,    58,     0,    59,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    60,
      61,    62,     0,     0,     0,     0,     0,     0,     0,    89,
      63,     0,    64,     0,    65,    50,    51,    52,    53,    54,
      55,    56,    57,    58,     0,    59,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    60,    61,    62,
       0,     0,     0,     0,     0,     0,     0,     0,    63,     0,
      64,     0,    65,    50,    51,    52,    53,    54,    55,    56,
      57,    58,     0,    59,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    60,    61,    62,     0,     0,
       0,     0,     0,     0,     0,     0,    63,     0,    64,     0,
      65,     0,     0,   253,   254,   255,    50,    51,    52,    53,
      54,    55,    56,    57,    58,     0,    59,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    60,    61,
      62,   243,     0,     0,   244,     0,     0,     0,     0,    63,
       0,    64,     0,    65,    50,    51,    52,    53,    54,    55,
      56,    57,    58,     0,    59,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    60,    61,    62,     0,
       0,     0,     0,   228,     0,     0,     0,    63,     0,    64,
       0,    65,    50,    51,    52,    53,    54,    55,    56,    57,
      58,     0,    59,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    60,    61,    62,     0,     0,     0,
       0,     0,     0,     0,     0,    63,  -178,    64,     0,    65,
      50,    51,    52,    53,    54,    55,    56,    57,    58,     0,
      59,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    60,    61,    62,     0,     0,     0,     0,     0,
       0,     0,     0,    63,     0,    64,     0,    65,    50,    51,
      52,   284,   285,    55,    56,    57,   286,     0,    59,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      60,    61,    62,     0,     0,     0,     0,     0,     0,     0,
       0,    63,     0,    64,     0,    65,    50,    51,    52,   429,
      54,    55,    56,    57,    58,     0,    59,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    60,    61,
      62,    19,    20,    21,    22,    23,    24,    25,    26,    63,
       0,    64,     0,    65,     0,     0,     0,     0,     0,     0,
       0,    27,    28,    29,    30,    31
};

static const yytype_int16 yycheck[] =
{
      18,    26,    37,    21,    22,   242,    31,    25,    26,    27,
      28,    29,    30,   102,   121,   104,     0,   106,    37,     6,
       0,    14,    65,   474,   158,    31,     0,     5,    15,    35,
      36,    96,    31,    32,    15,     0,    35,     0,     0,    58,
      22,    59,    61,    61,    62,    63,    89,    61,    31,   114,
      28,    29,    30,    31,    32,    33,    34,    35,    36,   510,
      38,    48,    68,    69,    70,   100,    65,    48,    60,    42,
      43,     5,    50,    51,    52,    31,    60,    50,    62,    97,
      60,    74,    62,    61,    60,    63,    60,    65,    62,    13,
     112,   113,    70,    71,    72,    73,    19,    60,    60,    62,
      62,    35,    36,    60,    58,   123,   124,    61,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   261,    37,    63,
      51,    52,    53,    54,    55,   153,    31,   155,    59,   164,
     158,    31,   160,   161,    31,    35,    36,   169,    31,   174,
      13,    58,    35,    36,    61,   173,   178,   179,   176,   181,
      15,   183,   180,   188,   182,    58,   184,   189,    61,   191,
      60,   154,    95,    16,    31,    32,    61,    31,    41,    36,
     198,    44,    45,    46,    47,    48,    49,    31,   111,   172,
     208,   209,   210,    31,    32,    75,    13,    35,    36,    31,
     307,    15,    63,    35,    36,   294,    37,   296,    18,    19,
     228,    21,   334,   231,   336,   233,   234,   235,   236,   237,
     238,   239,   240,    14,    41,    16,   149,    44,    45,    46,
      47,    48,    49,   251,   157,    60,    60,    31,   475,    24,
     163,    35,    36,    62,    37,   263,    57,    60,   283,    51,
      52,    53,    54,    55,    57,   273,    64,   275,   470,   471,
     472,   473,     0,    60,    56,     3,     4,     5,     6,     7,
       8,     9,    10,    13,    57,    14,    15,    16,    53,    54,
      55,   299,   300,    53,    66,    23,    24,    25,    26,    27,
      37,    60,   310,    31,    62,    60,   314,    31,   316,    62,
      60,    41,    31,   321,    44,    45,    46,    47,    48,    49,
      31,    24,    13,    57,    60,     5,   334,    66,   336,    61,
      58,     9,    60,    61,    62,    77,   344,   345,   346,   347,
      60,     6,    31,    78,   356,   357,    79,    38,    66,    37,
      41,     5,     9,    80,   267,    46,    47,    48,    49,   272,
      51,    52,    53,    54,    55,    80,   374,   446,    59,    81,
      60,   159,   272,   381,    37,   383,    62,   385,    46,    47,
      48,    49,   517,    51,    52,    53,    54,    55,   301,    60,
     350,    59,   484,   275,   445,   403,   365,   351,   406,   316,
     336,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     313,   419,   420,   421,   177,   423,   172,   496,   391,   427,
     381,   521,   395,    -1,   155,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   350,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,   461,    -1,    -1,    -1,    -1,    -1,    -1,
     468,   469,    -1,    -1,    -1,   477,    -1,   380,   476,    -1,
     383,   479,    -1,    -1,    -1,    -1,    -1,   489,   490,   491,
     492,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,
     498,    -1,   500,    -1,   407,    -1,   504,    -1,    -1,    -1,
     512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,
      -1,    -1,    -1,   521,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    76,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    -1,    59,    11,    12,    13,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,
      76,    28,    29,    30,    -1,    32,    33,    34,    35,    36,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
       0,    -1,    59,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,
       0,    31,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    13,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,    31,
      60,    31,    62,    35,    36,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    -1,    59,    -1,    -1,
      60,    -1,    62,    13,    14,    15,    68,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    -1,    -1,    59,
      13,    14,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    -1,
      59,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    71,    72,    73,    25,    26,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    13,    14,    59,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    -1,    13,    59,    15,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    13,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    13,    -1,    59,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    13,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
      72,    73,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    13,    -1,    59,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    13,    -1,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
      -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      -1,    -1,    -1,    70,    71,    72,    73,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      61,    -1,    63,    -1,    65,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      63,    -1,    65,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    63,    -1,
      65,    -1,    -1,    68,    69,    70,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,
      52,    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,
      -1,    63,    -1,    65,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    52,    -1,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    61,    -1,    63,
      -1,    65,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,    65,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    63,    -1,    65,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    -1,    63,    -1,    65,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,
      52,     3,     4,     5,     6,     7,     8,     9,    10,    61,
      -1,    63,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    14,    74,    94,    96,   204,    95,   205,    97,    99,
       0,    31,    35,    36,    92,    93,   201,    22,   210,     3,
       4,     5,     6,     7,     8,     9,    10,    23,    24,    25,
      26,    27,    98,   100,   109,   112,   113,   117,   119,   132,
     137,   138,   139,   141,   142,   144,   146,   149,    60,    92,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    38,
      50,    51,    52,    61,    63,    65,   156,   157,   158,   161,
     162,   163,   168,   169,   176,   192,   197,   198,   200,   211,
     212,    31,   101,   102,   203,   114,   115,   203,   156,    22,
     154,   156,    14,    16,   116,   118,   126,   133,   156,   156,
     176,   156,   156,   143,   156,   145,   156,     5,   148,   176,
     200,    15,   116,   122,   126,    92,   156,    61,   156,   156,
     156,   193,   177,   170,    13,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    59,    70,    71,    72,    73,    76,
     153,    58,    61,    65,    89,    60,   206,    60,    13,    60,
      37,   155,    31,   127,    31,   175,   120,   121,   203,   122,
     134,   135,   156,    60,    14,   126,    13,    15,   140,   140,
      14,   140,    14,   140,   150,   152,   203,   175,    31,   124,
     175,   122,   160,    62,    97,    31,    32,    35,    65,   178,
     179,   180,   202,   156,   171,   172,   173,   156,    42,    43,
      50,   156,   156,   156,   156,   156,   156,   156,   156,   156,
     156,   156,   156,   156,   156,   156,   156,   156,    57,   156,
     156,    61,   203,    13,    41,    44,    45,    46,    47,    48,
      49,    31,   159,    53,    56,   156,   181,   182,    31,   200,
     212,    75,   203,    68,    69,    70,   104,   105,   106,   107,
     108,   156,   190,   191,   115,   156,   156,    15,   128,   129,
     203,   176,    60,    37,   175,    60,    11,    12,   136,   196,
     198,   200,   156,   176,    31,    32,    36,   199,    31,    32,
      36,   199,   175,   175,   156,   175,   156,   175,   156,    24,
      37,   125,   175,   175,   156,   164,   165,   166,   167,    62,
      57,   156,    64,    60,    57,    66,    60,   156,   156,   156,
     156,    57,   156,   156,   156,   156,   156,   156,   156,   156,
     156,   164,    66,    56,   194,    53,   195,   156,   208,   209,
     111,    70,   110,   190,    18,    19,    21,    20,   156,   203,
      60,    37,   121,   156,   135,   126,   140,   140,   151,   156,
     156,   123,   203,    62,    97,    60,   156,    66,   180,   156,
     173,   156,    62,    62,     5,    73,   153,   156,   183,   183,
      76,    60,   207,    31,   103,    31,   174,   156,   156,   156,
     156,    17,    31,   186,   188,   190,   201,   129,    31,   130,
     157,   175,   175,    24,    25,    26,   147,    60,   165,    57,
      13,    41,    44,    45,    46,    47,    48,    49,   156,    61,
       5,     5,    66,     9,   184,   203,   209,    77,   213,    31,
      91,   156,   203,   156,    31,    31,    31,    31,    31,    32,
     200,    60,    31,   200,    61,   156,   156,   203,   156,   156,
     156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
     156,     6,   185,   156,    78,   214,   216,    31,    37,    31,
     156,   156,   156,   156,   189,   131,   147,   140,    62,    60,
     156,    66,    80,    79,   221,   215,   176,   156,   156,   188,
     188,   188,   188,   186,   187,   164,   156,   175,     5,   156,
     217,    80,   137,   223,    81,   220,   175,   175,   175,   175,
      60,    62,   140,   156,   156,   218,   219,   222,   156,   186,
     175,    60,   134,   219
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_uint8 yyr1[] =
{
       0,    90,    91,    91,    92,    92,    93,    93,    93,    94,
      95,    94,    96,    96,    97,    98,    98,    98,    98,    98,
      98,    99,    99,   100,   100,   100,   100,   100,   100,   100,
     100,   100,   100,   100,   100,   101,   101,   102,   103,   103,
     103,   104,   105,   106,   107,   108,   110,   109,   111,   109,
     109,   109,   109,   109,   112,   113,   114,   114,   115,   116,
     118,   117,   119,   119,   119,   119,   119,   119,   120,   120,
     121,   122,   122,   122,   123,   123,   125,   124,   127,   126,
     128,   128,   129,   131,   130,   133,   132,   134,   134,   135,
     136,   136,   136,   136,   137,   137,   138,   138,   139,   140,
     140,   141,   142,   143,   143,   144,   145,   145,   146,   147,
     147,   148,   148,   150,   151,   149,   152,   149,   153,   153,
     153,   155,   154,   154,   156,   156,   156,   156,   156,   156,
     157,   157,   159,   158,   160,   158,   161,   161,   161,   162,
     162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
     162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
     162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
     162,   162,   162,   162,   162,   162,   163,   163,   164,   164,
     165,   166,   165,   167,   167,   168,   168,   170,   169,   171,
     171,   171,   172,   172,   173,   174,   174,   174,   175,   175,
     177,   176,   178,   178,   178,   179,   179,   180,   180,   180,
     180,   181,   181,   182,   182,   183,   183,   183,   183,   183,
     184,   184,   184,   185,   185,   186,   186,   186,   186,   187,
     187,   188,   189,   188,   188,   188,   188,   190,   190,   190,
     191,   191,   192,   192,   192,   192,   192,   193,   192,   192,
     192,   192,   194,   192,   195,   192,   196,   196,   197,   197,
     198,   198,   198,   198,   198,   199,   199,   199,   200,   200,
     201,   201,   202,   202,   203,   205,   206,   207,   204,   208,
     208,   209,   209,   210,   210,   211,   211,   212,   212,   213,
     213,   214,   215,   214,   217,   216,   218,   218,   219,   220,
     220,   221,   222,   221,   223,   223
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     3,     2,     0,
       0,     3,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     0,     2,
       4,     3,     7,     7,     7,     7,     0,     6,     0,     6,
       4,     4,     4,     4,     2,     2,     1,     3,     3,     4,
       0,     3,     3,     3,     4,     4,     3,     4,     1,     3,
       3,     0,     2,     4,     1,     3,     0,     3,     0,     3,
       1,     3,     3,     0,     5,     0,     3,     1,     3,     2,
       0,     1,     1,     1,     2,     4,     3,     5,     2,     2,
       2,     4,     4,     3,     5,     2,     3,     5,     2,     1,
       1,     1,     1,     0,     0,    11,     0,     9,     1,     1,
       1,     0,     3,     1,     1,     1,     1,     1,     1,     3,
       1,     3,     0,     5,     0,     5,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     4,     4,     4,     3,     3,     3,
       4,     4,     4,     4,     4,     4,     4,     4,     7,     7,
       7,     7,     7,     7,     7,     7,     5,     4,     0,     1,
       1,     0,     2,     1,     3,     1,     1,     0,     4,     0,
       1,     2,     1,     3,     1,     0,     2,     4,     0,     2,
       0,     4,     0,     1,     2,     1,     3,     1,     3,     3,
       5,     1,     2,     1,     2,     0,     2,     3,     6,     3,
       0,     2,     4,     0,     2,     1,     1,     2,     2,     1,
       3,     1,     0,     4,     2,     2,     2,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     3,     0,     4,     3,
       3,     4,     0,     6,     0,     8,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     0,     0,    12,     1,
       3,     3,     1,     0,     1,     1,     3,     3,     1,     0,
       2,     0,     0,     3,     0,     4,     1,     3,     1,     0,
       2,     0,     0,     4,     0,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, arangodb::aql::Parser* parser)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


/* Context of a parse error.  */
typedef struct
{
  yy_state_t *yyssp;
  yysymbol_kind_t yytoken;
  YYLTYPE *yylloc;
} yypcontext_t;

/* Put in YYARG at most YYARGN of the expected tokens given the
   current YYCTX, and return the number of tokens stored in YYARG.  If
   YYARG is null, return the number of expected tokens (guaranteed to
   be less than YYNTOKENS).  Return YYENOMEM on memory exhaustion.
   Return 0 if there are more than YYARGN expected tokens, yet fill
   YYARG up to YYARGN. */
static int
yypcontext_expected_tokens (const yypcontext_t *yyctx,
                            yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  int yyn = yypact[+*yyctx->yyssp];
  if (!yypact_value_is_default (yyn))
    {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYSYMBOL_YYerror
            && !yytable_value_is_error (yytable[yyx + yyn]))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = YY_CAST (yysymbol_kind_t, yyx);
          }
    }
  if (yyarg && yycount == 0 && 0 < yyargn)
    yyarg[0] = YYSYMBOL_YYEMPTY;
  return yycount;
}




#ifndef yystrlen
# if defined __GLIBC__ && defined _STRING_H
#  define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
# else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
# endif
#endif

#ifndef yystpcpy
# if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#  define yystpcpy stpcpy
# else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
# endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;
      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
#endif


static int
yy_syntax_error_arguments (const yypcontext_t *yyctx,
                           yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yyctx->yytoken != YYSYMBOL_YYEMPTY)
    {
      int yyn;
      if (yyarg)
        yyarg[yycount] = yyctx->yytoken;
      ++yycount;
      yyn = yypcontext_expected_tokens (yyctx,
                                        yyarg ? yyarg + 1 : yyarg, yyargn - 1);
      if (yyn == YYENOMEM)
        return YYENOMEM;
      else
        yycount += yyn;
    }
  return yycount;
}

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return -1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return YYENOMEM if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                const yypcontext_t *yyctx)
{
  enum { YYARGS_MAX = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  yysymbol_kind_t yyarg[YYARGS_MAX];
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* Actual size of YYARG. */
  int yycount = yy_syntax_error_arguments (yyctx, yyarg, YYARGS_MAX);
  if (yycount == YYENOMEM)
    return YYENOMEM;

  switch (yycount)
    {
#define YYCASE_(N, S)                       \
      case N:                               \
        yyformat = S;                       \
        break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
    }

  /* Compute error message size.  Don't count the "%s"s, but reserve
     room for the terminator.  */
  yysize = yystrlen (yyformat) - 2 * yycount + 1;
  {
    int yyi;
    for (yyi = 0; yyi < yycount; ++yyi)
      {
        YYPTRDIFF_T yysize1
          = yysize + yytnamerr (YY_NULLPTR, yytname[yyarg[yyi]]);
        if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
          yysize = yysize1;
        else
          return YYENOMEM;
      }
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return -1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yytname[yyarg[yyi++]]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= T_END)
    {
      yychar = T_END;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* optional_prune_variable: expression  */
#line 587 "grammar.y"
               {
      AstNode* node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeNop());
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 2796 "grammar.cpp"
    break;

  case 3: /* optional_prune_variable: variable_name "assignment" expression  */
#line 593 "grammar.y"
                                      {
      AstNode* node = parser->ast()->createNodeArray();
      AstNode* variableNode = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      node->addMember(variableNode);
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;    
  }
#line 2808 "grammar.cpp"
    break;

  case 4: /* with_collection: "identifier"  */
#line 603 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2816 "grammar.cpp"
    break;

  case 5: /* with_collection: bind_parameter_datasource_expected  */
#line 606 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 2824 "grammar.cpp"
    break;

  case 6: /* with_collection_list: with_collection  */
#line 612 "grammar.y"
                     {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2833 "grammar.cpp"
    break;

  case 7: /* with_collection_list: with_collection_list "," with_collection  */
#line 616 "grammar.y"
                                                  {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2842 "grammar.cpp"
    break;

  case 8: /* with_collection_list: with_collection_list with_collection  */
#line 620 "grammar.y"
                                          {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2851 "grammar.cpp"
    break;

  case 9: /* optional_with: %empty  */
#line 627 "grammar.y"
                 {
     }
#line 2858 "grammar.cpp"
    break;

  case 10: /* $@1: %empty  */
#line 629 "grammar.y"
            {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
     }
#line 2867 "grammar.cpp"
    break;

  case 11: /* optional_with: "WITH keyword" $@1 with_collection_list  */
#line 632 "grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 2878 "grammar.cpp"
    break;

  case 12: /* queryStart: optional_with query  */
#line 641 "grammar.y"
                        {
    }
#line 2885 "grammar.cpp"
    break;

  case 13: /* queryStart: sql_statements  */
#line 643 "grammar.y"
                   {
    }
#line 2892 "grammar.cpp"
    break;

  case 14: /* query: optional_statement_block_statements final_statement  */
#line 648 "grammar.y"
                                                        {
    }
#line 2899 "grammar.cpp"
    break;

  case 15: /* final_statement: return_statement  */
#line 653 "grammar.y"
                     {
    }
#line 2906 "grammar.cpp"
    break;

  case 16: /* final_statement: remove_statement  */
#line 655 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2914 "grammar.cpp"
    break;

  case 17: /* final_statement: insert_statement  */
#line 658 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2922 "grammar.cpp"
    break;

  case 18: /* final_statement: update_statement  */
#line 661 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2930 "grammar.cpp"
    break;

  case 19: /* final_statement: replace_statement  */
#line 664 "grammar.y"
                      {
      parser->ast()->scopes()->endNested();
    }
#line 2938 "grammar.cpp"
    break;

  case 20: /* final_statement: upsert_statement  */
#line 667 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 2946 "grammar.cpp"
    break;

  case 21: /* optional_statement_block_statements: %empty  */
#line 673 "grammar.y"
                {
    }
#line 2953 "grammar.cpp"
    break;

  case 22: /* optional_statement_block_statements: optional_statement_block_statements statement_block_statement  */
#line 675 "grammar.y"
                                                                  {
    }
#line 2960 "grammar.cpp"
    break;

  case 23: /* statement_block_statement: for_statement  */
#line 680 "grammar.y"
                  {
    }
#line 2967 "grammar.cpp"
    break;

  case 24: /* statement_block_statement: let_statement  */
#line 682 "grammar.y"
                  {
    }
#line 2974 "grammar.cpp"
    break;

  case 25: /* statement_block_statement: filter_statement  */
#line 684 "grammar.y"
                     {
    }
#line 2981 "grammar.cpp"
    break;

  case 26: /* statement_block_statement: collect_statement  */
#line 686 "grammar.y"
                      {
    }
#line 2988 "grammar.cpp"
    break;

  case 27: /* statement_block_statement: sort_statement  */
#line 688 "grammar.y"
                   {
    }
#line 2995 "grammar.cpp"
    break;

  case 28: /* statement_block_statement: limit_statement  */
#line 690 "grammar.y"
                    {
    }
#line 3002 "grammar.cpp"
    break;

  case 29: /* statement_block_statement: window_statement  */
#line 692 "grammar.y"
                     {
    }
#line 3009 "grammar.cpp"
    break;

  case 30: /* statement_block_statement: remove_statement  */
#line 694 "grammar.y"
                     {
    }
#line 3016 "grammar.cpp"
    break;

  case 31: /* statement_block_statement: insert_statement  */
#line 696 "grammar.y"
                     {
    }
#line 3023 "grammar.cpp"
    break;

  case 32: /* statement_block_statement: update_statement  */
#line 698 "grammar.y"
                     {
    }
#line 3030 "grammar.cpp"
    break;

  case 33: /* statement_block_statement: replace_statement  */
#line 700 "grammar.y"
                      {
    }
#line 3037 "grammar.cpp"
    break;

  case 34: /* statement_block_statement: upsert_statement  */
#line 702 "grammar.y"
                     {
    }
#line 3044 "grammar.cpp"
    break;

  case 35: /* more_output_variables: variable_name  */
#line 707 "grammar.y"
                  {
      auto wrapperNode = parser->ast()->createNodeArray();
      parser->pushArray(wrapperNode);
      // This is guaranteed to be called on the first variable
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3056 "grammar.cpp"
    break;

  case 36: /* more_output_variables: more_output_variables "," variable_name  */
#line 714 "grammar.y"
                                                  {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3065 "grammar.cpp"
    break;

  case 37: /* for_output_variables: more_output_variables  */
#line 721 "grammar.y"
                          {
      (yyval.node) = parser->popArray();
    }
#line 3073 "grammar.cpp"
    break;

  case 38: /* prune_and_options: %empty  */
#line 727 "grammar.y"
                                                   {
      auto node = static_cast<AstNode*>(parser->peekStack());
      // Prune
      node->addMember(parser->ast()->createNodeNop());
      // Options
      node->addMember(parser->ast()->createNodeNop());
    }
#line 3085 "grammar.cpp"
    break;

  case 39: /* prune_and_options: "identifier" optional_prune_variable  */
#line 734 "grammar.y"
                                     {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);

      auto node = static_cast<AstNode*>(parser->peekStack());
      if (::caseInsensitiveEqual(operation, "PRUNE")) {
        /* Only Prune */
        TRI_ASSERT((yyvsp[0].node) != nullptr);
        // Prune
        node->addMember((yyvsp[0].node));
        // Options
        node->addMember(parser->ast()->createNodeNop());
      } else if (::caseInsensitiveEqual(operation, "OPTIONS")) {
        auto const* optionsArgument = (yyvsp[0].node)->getMember(1);
        /* Only Options */
        TRI_ASSERT(optionsArgument != nullptr);
        ::validateOptions(parser, optionsArgument, yylloc.first_line, yylloc.first_column);
        // Prune
        node->addMember(parser->ast()->createNodeNop());
        // Options
        node->addMember(optionsArgument);
      } else {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
    }
#line 3114 "grammar.cpp"
    break;

  case 40: /* prune_and_options: "identifier" optional_prune_variable "identifier" object  */
#line 758 "grammar.y"
                                                     {
      /* prune and options */
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (!::caseInsensitiveEqual(operation, "PRUNE")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      operation = {(yyvsp[-1].strval).value, (yyvsp[-1].strval).length};
      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      // Prune
      node->addMember((yyvsp[-2].node));
      // Options
      node->addMember((yyvsp[0].node));
    }
#line 3139 "grammar.cpp"
    break;

  case 41: /* traversal_graph_info: graph_direction_steps expression graph_subject  */
#line 781 "grammar.y"
                                                   {
      auto infoNode = parser->ast()->createNodeArray();
      // Direction
      infoNode->addMember((yyvsp[-2].node));
      // Source
      infoNode->addMember((yyvsp[-1].node));
      // Graph
      infoNode->addMember((yyvsp[0].node));
      (yyval.node) = infoNode;
    }
#line 3154 "grammar.cpp"
    break;

  case 42: /* shortest_path_graph_info: graph_direction "SHORTEST_PATH keyword" expression "identifier" expression graph_subject options  */
#line 794 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3162 "grammar.cpp"
    break;

  case 43: /* k_shortest_paths_graph_info: graph_direction "K_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 800 "grammar.y"
                                                                                            {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3170 "grammar.cpp"
    break;

  case 44: /* k_paths_graph_info: graph_direction_steps "K_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 806 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, (yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3178 "grammar.cpp"
    break;

  case 45: /* all_shortest_paths_graph_info: graph_direction "ALL_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 812 "grammar.y"
                                                                                              {
      auto nodeStart = parser->ast()->createNodeValueInt(0);
      auto nodeEnd = parser->ast()->createNodeValueInt(INT64_MAX-1);
      auto nodeRange = parser->ast()->createNodeRange(nodeStart, nodeEnd);
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), nodeRange), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3189 "grammar.cpp"
    break;

  case 46: /* $@2: %empty  */
#line 821 "grammar.y"
                                               {
      AstNode* variablesNode = static_cast<AstNode*>((yyvsp[-2].node));//这个是数组节点
      ::checkOutVariables(parser, variablesNode, 1, 1, "Collections and views FOR loops only allow a single return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      AstNode* variableNameNode = variablesNode->getMemberUnchecked(0);
      TRI_ASSERT(variableNameNode->isStringValue());
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);//现在创建了一个变量节点(同时也创建一个变量)
      parser->pushStack(variableNode);
    }
#line 3206 "grammar.cpp"
    break;

  case 47: /* for_statement: "FOR declaration" for_output_variables "IN keyword" expression $@2 for_options  */
#line 832 "grammar.y"
                  {
      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      Variable* variable = static_cast<Variable*>(variableNode->getData());

      AstNode* node = nullptr;
      AstNode* search = nullptr;
      AstNode* options = nullptr;

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);

        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW &&
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);//创建整个Node_type_for节点
      }

      parser->ast()->addOperation(node);//向整个ast的_root添加member
    }
#line 3251 "grammar.cpp"
    break;

  case 48: /* $@3: %empty  */
#line 872 "grammar.y"
                                                         {
      // Traversal
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 3, "Traversals only have one, two or three return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      parser->pushStack(variablesNode);
      parser->pushStack(graphInfoNode);
      // This stack push/pop magic is necessary to allow v, e, and p in the prune condition
    }
#line 3269 "grammar.cpp"
    break;

  case 49: /* for_statement: "FOR declaration" for_output_variables "IN keyword" traversal_graph_info $@3 prune_and_options  */
#line 884 "grammar.y"
                        {
      auto graphInfoNode = static_cast<AstNode*>(parser->popStack());
      auto variablesNode = static_cast<AstNode*>(parser->popStack());

      auto prune = graphInfoNode->getMember(3);
      TRI_ASSERT(prune != nullptr);
      if (prune->type == NODE_TYPE_ARRAY) {
        TRI_ASSERT(prune->numMembers() == 2);
        Ast::traverseReadOnly(prune->getMember(1), [&](AstNode const* node) {
          if (node->type == NODE_TYPE_REFERENCE && node->hasFlag(AstNodeFlagType::FLAG_SUBQUERY_REFERENCE)) {
            parser->registerParseError(TRI_ERROR_QUERY_PARSE, "PRUNE condition must not use a subquery", yylloc.first_line, yylloc.first_column);
          }
        });
        graphInfoNode->changeMember(3, prune->getMember(1));
      }
      auto node = parser->ast()->createNodeTraversal(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
      if(prune->type == NODE_TYPE_ARRAY && prune->getMember(0)->type != NODE_TYPE_NOP) {
        auto pruneLetVariableName = prune->getMember(0);
        parser->ast()->addOperation(pruneLetVariableName);
      }
    }
#line 3296 "grammar.cpp"
    break;

  case 50: /* for_statement: "FOR declaration" for_output_variables "IN keyword" shortest_path_graph_info  */
#line 906 "grammar.y"
                                                             {
      // Shortest Path
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 2, "SHORTEST_PATH must have one or two return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeShortestPath(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3313 "grammar.cpp"
    break;

  case 51: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_shortest_paths_graph_info  */
#line 918 "grammar.y"
                                                                {
      // K Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3330 "grammar.cpp"
    break;

  case 52: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_paths_graph_info  */
#line 930 "grammar.y"
                                                       {
      // K Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3347 "grammar.cpp"
    break;

  case 53: /* for_statement: "FOR declaration" for_output_variables "IN keyword" all_shortest_paths_graph_info  */
#line 942 "grammar.y"
                                                                  {
      // All Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "ALL_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::AllShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3364 "grammar.cpp"
    break;

  case 54: /* filter_statement: "FILTER declaration" expression  */
#line 957 "grammar.y"
                        {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3374 "grammar.cpp"
    break;

  case 55: /* let_statement: "LET declaration" let_list  */
#line 965 "grammar.y"
                   {
    }
#line 3381 "grammar.cpp"
    break;

  case 56: /* let_list: let_element  */
#line 970 "grammar.y"
                {
    }
#line 3388 "grammar.cpp"
    break;

  case 57: /* let_list: let_list "," let_element  */
#line 972 "grammar.y"
                                 {
    }
#line 3395 "grammar.cpp"
    break;

  case 58: /* let_element: variable_name "assignment" expression  */
#line 977 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 3404 "grammar.cpp"
    break;

  case 59: /* count_into: "WITH keyword" "identifier" "INTO keyword" variable_name  */
#line 984 "grammar.y"
                                         {
      std::string_view operation((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if (!::caseInsensitiveEqual(operation, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", operation, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3417 "grammar.cpp"
    break;

  case 60: /* $@4: %empty  */
#line 995 "grammar.y"
              {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3426 "grammar.cpp"
    break;

  case 61: /* collect_variable_list: "COLLECT declaration" $@4 collect_list  */
#line 998 "grammar.y"
                   {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 3436 "grammar.cpp"
    break;

  case 62: /* collect_statement: "COLLECT declaration" count_into options  */
#line 1006 "grammar.y"
                                 {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      ::startCollectScope(scopes);

      // in the AST this is transformed to COLLECT AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3451 "grammar.cpp"
    break;

  case 63: /* collect_statement: collect_variable_list count_into options  */
#line 1016 "grammar.y"
                                             {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        VarSet variables{};
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      // in the AST this is transformed to COLLECT var = expr AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3469 "grammar.cpp"
    break;

  case 64: /* collect_statement: "COLLECT declaration" aggregate collect_optional_into options  */
#line 1029 "grammar.y"
                                                      {
      /* AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3498 "grammar.cpp"
    break;

  case 65: /* collect_statement: collect_variable_list aggregate collect_optional_into options  */
#line 1053 "grammar.y"
                                                                  {//这个
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {//开始一个新的CollectScope,要重新注册(实际上collect_variable_list和aggregate中已经注册在上一层的scopes了)
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }
        //检查聚集函数的有效性(用的是聚集函数而不是普通函数)
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      VarSet groupVars{};
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }
      // 组变量不能在聚集涉及到的变量中出现
      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          VarSet variablesUsed{};
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.contains(it)) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name, yylloc.first_line, yylloc.first_column);
            }
          }
        }
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3558 "grammar.cpp"
    break;

  case 66: /* collect_statement: collect_variable_list collect_optional_into options  */
#line 1108 "grammar.y"
                                                        {
      /* COLLECT var = expr INTO var OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3582 "grammar.cpp"
    break;

  case 67: /* collect_statement: collect_variable_list collect_optional_into keep options  */
#line 1127 "grammar.y"
                                                             {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }
        
      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "KEEP", (yyvsp[-1].node), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3615 "grammar.cpp"
    break;

  case 68: /* collect_list: collect_element  */
#line 1158 "grammar.y"
                    {
    }
#line 3622 "grammar.cpp"
    break;

  case 69: /* collect_list: collect_list "," collect_element  */
#line 1160 "grammar.y"
                                         {
    }
#line 3629 "grammar.cpp"
    break;

  case 70: /* collect_element: variable_name "assignment" expression  */
#line 1165 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3638 "grammar.cpp"
    break;

  case 71: /* collect_optional_into: %empty  */
#line 1172 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 3646 "grammar.cpp"
    break;

  case 72: /* collect_optional_into: "INTO keyword" variable_name  */
#line 1175 "grammar.y"
                         {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3654 "grammar.cpp"
    break;

  case 73: /* collect_optional_into: "INTO keyword" variable_name "assignment" expression  */
#line 1178 "grammar.y"
                                             {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3665 "grammar.cpp"
    break;

  case 74: /* variable_list: variable_name  */
#line 1187 "grammar.y"
                  {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3683 "grammar.cpp"
    break;

  case 75: /* variable_list: variable_list "," variable_name  */
#line 1200 "grammar.y"
                                        {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3701 "grammar.cpp"
    break;

  case 76: /* $@5: %empty  */
#line 1216 "grammar.y"
             {
      std::string_view operation((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!::caseInsensitiveEqual(operation, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", operation, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3715 "grammar.cpp"
    break;

  case 77: /* keep: "identifier" $@5 variable_list  */
#line 1224 "grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3724 "grammar.cpp"
    break;

  case 78: /* $@6: %empty  */
#line 1231 "grammar.y"
                {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3733 "grammar.cpp"
    break;

  case 79: /* aggregate: "AGGREGATE keyword" $@6 aggregate_list  */
#line 1234 "grammar.y"
                     {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3742 "grammar.cpp"
    break;

  case 80: /* aggregate_list: aggregate_element  */
#line 1241 "grammar.y"
                      {
    }
#line 3749 "grammar.cpp"
    break;

  case 81: /* aggregate_list: aggregate_list "," aggregate_element  */
#line 1243 "grammar.y"
                                             {
    }
#line 3756 "grammar.cpp"
    break;

  case 82: /* aggregate_element: variable_name "assignment" aggregate_function_call  */
#line 1248 "grammar.y"
                                                   {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3765 "grammar.cpp"
    break;

  case 83: /* $@7: %empty  */
#line 1255 "grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3775 "grammar.cpp"
    break;

  case 84: /* aggregate_function_call: function_name "(" $@7 optional_function_call_arguments ")"  */
#line 1259 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      // this works because the function name here is always NUL-terminated
      (yyval.node) = parser->ast()->createNodeAggregateFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 3785 "grammar.cpp"
    break;

  case 85: /* $@8: %empty  */
#line 1267 "grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3794 "grammar.cpp"
    break;

  case 86: /* sort_statement: "SORT declaration" $@8 sort_list  */
#line 1270 "grammar.y"
                {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 3804 "grammar.cpp"
    break;

  case 87: /* sort_list: sort_element  */
#line 1278 "grammar.y"
                 {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3812 "grammar.cpp"
    break;

  case 88: /* sort_list: sort_list "," sort_element  */
#line 1281 "grammar.y"
                                   {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3820 "grammar.cpp"
    break;

  case 89: /* sort_element: expression sort_direction  */
#line 1287 "grammar.y"
                              {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 3828 "grammar.cpp"
    break;

  case 90: /* sort_direction: %empty  */
#line 1293 "grammar.y"
                {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3836 "grammar.cpp"
    break;

  case 91: /* sort_direction: "ASC keyword"  */
#line 1296 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3844 "grammar.cpp"
    break;

  case 92: /* sort_direction: "DESC keyword"  */
#line 1299 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 3852 "grammar.cpp"
    break;

  case 93: /* sort_direction: simple_value  */
#line 1302 "grammar.y"
                 {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3860 "grammar.cpp"
    break;

  case 94: /* limit_statement: "LIMIT declaration" expression  */
#line 1308 "grammar.y"
                       {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3870 "grammar.cpp"
    break;

  case 95: /* limit_statement: "LIMIT declaration" expression "," expression  */
#line 1313 "grammar.y"
                                          {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3879 "grammar.cpp"
    break;

  case 96: /* window_statement: "WINDOW declaration" object aggregate  */
#line 1320 "grammar.y"
                              {
      /* WINDOW {preceding:2, following:2} AGGREGATE x = AVG(x) */
      
      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/nullptr, /*aggrs*/(yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3899 "grammar.cpp"
    break;

  case 97: /* window_statement: "WINDOW declaration" expression "WITH keyword" object aggregate  */
#line 1335 "grammar.y"
                                                {
    /* WINDOW rangeVar WITH {preceding:"1d", following:"1d"} AGGREGATE x = AVG(x) */
    
    // validate aggregates
    if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/(yyvsp[-3].node), /*aggrs*/(yyvsp[0].node));
    parser->ast()->addOperation(node);
  }
#line 3919 "grammar.cpp"
    break;

  case 98: /* return_statement: "RETURN declaration" distinct_expression  */
#line 1353 "grammar.y"
                                 {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 3929 "grammar.cpp"
    break;

  case 99: /* in_or_into_collection: "IN keyword" in_or_into_collection_name  */
#line 1361 "grammar.y"
                                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3937 "grammar.cpp"
    break;

  case 100: /* in_or_into_collection: "INTO keyword" in_or_into_collection_name  */
#line 1364 "grammar.y"
                                      {
       (yyval.node) = (yyvsp[0].node);
     }
#line 3945 "grammar.cpp"
    break;

  case 101: /* remove_statement: "REMOVE command" expression in_or_into_collection options  */
#line 1370 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3957 "grammar.cpp"
    break;

  case 102: /* insert_statement: "INSERT command" expression in_or_into_collection options  */
#line 1380 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3969 "grammar.cpp"
    break;

  case 103: /* update_parameters: expression in_or_into_collection options  */
#line 1390 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3982 "grammar.cpp"
    break;

  case 104: /* update_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1398 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3995 "grammar.cpp"
    break;

  case 105: /* update_statement: "UPDATE command" update_parameters  */
#line 1409 "grammar.y"
                               {
    }
#line 4002 "grammar.cpp"
    break;

  case 106: /* replace_parameters: expression in_or_into_collection options  */
#line 1414 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4015 "grammar.cpp"
    break;

  case 107: /* replace_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1422 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4028 "grammar.cpp"
    break;

  case 108: /* replace_statement: "REPLACE command" replace_parameters  */
#line 1433 "grammar.y"
                                 {
    }
#line 4035 "grammar.cpp"
    break;

  case 109: /* update_or_replace: "UPDATE command"  */
#line 1438 "grammar.y"
             {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 4043 "grammar.cpp"
    break;

  case 110: /* update_or_replace: "REPLACE command"  */
#line 1441 "grammar.y"
              {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 4051 "grammar.cpp"
    break;

  case 111: /* upsert_input: object  */
#line 1447 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4059 "grammar.cpp"
    break;

  case 112: /* upsert_input: bind_parameter  */
#line 1450 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4067 "grammar.cpp"
    break;

  case 113: /* $@9: %empty  */
#line 1456 "grammar.y"
                      {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);
      parser->pushStack(variableNode);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      auto forNode = parser->ast()->createNodeForUpsert(Variable::NAME_CURRENT.data(), Variable::NAME_CURRENT.size(), parser->ast()->createNodeArray(), false);
      scopes->stackCurrentVariable(scopes->getVariable(Variable::NAME_CURRENT));
      parser->ast()->addOperation(forNode);
      parser->pushStack(forNode);
    }
#line 4089 "grammar.cpp"
    break;

  case 114: /* $@10: %empty  */
#line 1472 "grammar.y"
                 {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());
      auto filterNode = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(filterNode);
      
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(static_cast<Variable const*>(forNode->getMember(0)->getData()));
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.data(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4126 "grammar.cpp"
    break;

  case 115: /* upsert_statement: "UPSERT command" "FILTER declaration" $@9 expression $@10 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1503 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4147 "grammar.cpp"
    break;

  case 116: /* $@11: %empty  */
#line 1519 "grammar.y"
                          {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeForUpsert(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4193 "grammar.cpp"
    break;

  case 117: /* upsert_statement: "UPSERT command" upsert_input $@11 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1559 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4214 "grammar.cpp"
    break;

  case 118: /* quantifier: "all modifier"  */
#line 1578 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAll);
    }
#line 4222 "grammar.cpp"
    break;

  case 119: /* quantifier: "any modifier"  */
#line 1581 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAny);
    }
#line 4230 "grammar.cpp"
    break;

  case 120: /* quantifier: "none modifier"  */
#line 1584 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kNone);
    }
#line 4238 "grammar.cpp"
    break;

  case 121: /* $@12: %empty  */
#line 1590 "grammar.y"
               {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 4251 "grammar.cpp"
    break;

  case 122: /* distinct_expression: "DISTINCT modifier" $@12 expression  */
#line 1597 "grammar.y"
                 {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 4259 "grammar.cpp"
    break;

  case 123: /* distinct_expression: expression  */
#line 1600 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4267 "grammar.cpp"
    break;

  case 124: /* expression: operator_unary  */
#line 1606 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4275 "grammar.cpp"
    break;

  case 125: /* expression: operator_binary  */
#line 1609 "grammar.y"
                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4283 "grammar.cpp"
    break;

  case 126: /* expression: operator_ternary  */
#line 1612 "grammar.y"
                     {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4291 "grammar.cpp"
    break;

  case 127: /* expression: value_literal  */
#line 1615 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4299 "grammar.cpp"
    break;

  case 128: /* expression: reference  */
#line 1618 "grammar.y"
              {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4307 "grammar.cpp"
    break;

  case 129: /* expression: expression ".." expression  */
#line 1621 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4315 "grammar.cpp"
    break;

  case 130: /* function_name: "identifier"  */
#line 1627 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4323 "grammar.cpp"
    break;

  case 131: /* function_name: function_name "::" "identifier"  */
#line 1630 "grammar.y"
                                   {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->ast()->resources().registerString(temp);
      TRI_ASSERT(p != nullptr);

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 4338 "grammar.cpp"
    break;

  case 132: /* $@13: %empty  */
#line 1643 "grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4349 "grammar.cpp"
    break;

  case 133: /* function_call: function_name "(" $@13 optional_function_call_arguments ")"  */
#line 1648 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(static_cast<char const*>(parser->popStack()), list, false);
    }
#line 4358 "grammar.cpp"
    break;

  case 134: /* $@14: %empty  */
#line 1652 "grammar.y"
                  {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4367 "grammar.cpp"
    break;

  case 135: /* function_call: "like operator" "(" $@14 optional_function_call_arguments ")"  */
#line 1655 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", list, false);
    }
#line 4376 "grammar.cpp"
    break;

  case 136: /* operator_unary: "+ operator" expression  */
#line 1662 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node)));
    }
#line 4384 "grammar.cpp"
    break;

  case 137: /* operator_unary: "- operator" expression  */
#line 1665 "grammar.y"
                                    {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node)));
    }
#line 4392 "grammar.cpp"
    break;

  case 138: /* operator_unary: "not operator" expression  */
#line 1668 "grammar.y"
                                     {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 4400 "grammar.cpp"
    break;

  case 139: /* operator_binary: expression "or operator" expression  */
#line 1674 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4408 "grammar.cpp"
    break;

  case 140: /* operator_binary: expression "and operator" expression  */
#line 1677 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4416 "grammar.cpp"
    break;

  case 141: /* operator_binary: expression "+ operator" expression  */
#line 1680 "grammar.y"
                                 {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4424 "grammar.cpp"
    break;

  case 142: /* operator_binary: expression "- operator" expression  */
#line 1683 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4432 "grammar.cpp"
    break;

  case 143: /* operator_binary: expression "* operator" expression  */
#line 1686 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4440 "grammar.cpp"
    break;

  case 144: /* operator_binary: expression "/ operator" expression  */
#line 1689 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4448 "grammar.cpp"
    break;

  case 145: /* operator_binary: expression "% operator" expression  */
#line 1692 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4456 "grammar.cpp"
    break;

  case 146: /* operator_binary: expression "== operator" expression  */
#line 1695 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4464 "grammar.cpp"
    break;

  case 147: /* operator_binary: expression "!= operator" expression  */
#line 1698 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4472 "grammar.cpp"
    break;

  case 148: /* operator_binary: expression "< operator" expression  */
#line 1701 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4480 "grammar.cpp"
    break;

  case 149: /* operator_binary: expression "> operator" expression  */
#line 1704 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4488 "grammar.cpp"
    break;

  case 150: /* operator_binary: expression "<= operator" expression  */
#line 1707 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4496 "grammar.cpp"
    break;

  case 151: /* operator_binary: expression ">= operator" expression  */
#line 1710 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4504 "grammar.cpp"
    break;

  case 152: /* operator_binary: expression "IN keyword" expression  */
#line 1713 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4512 "grammar.cpp"
    break;

  case 153: /* operator_binary: expression "not in operator" expression  */
#line 1716 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4520 "grammar.cpp"
    break;

  case 154: /* operator_binary: expression "not operator" "like operator" expression  */
#line 1719 "grammar.y"
                                       {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4532 "grammar.cpp"
    break;

  case 155: /* operator_binary: expression "not operator" "~= operator" expression  */
#line 1726 "grammar.y"
                                              {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4544 "grammar.cpp"
    break;

  case 156: /* operator_binary: expression "not operator" "~! operator" expression  */
#line 1733 "grammar.y"
                                                  {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4555 "grammar.cpp"
    break;

  case 157: /* operator_binary: expression "like operator" expression  */
#line 1739 "grammar.y"
                                 {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
    }
#line 4566 "grammar.cpp"
    break;

  case 158: /* operator_binary: expression "~= operator" expression  */
#line 1745 "grammar.y"
                                        {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4577 "grammar.cpp"
    break;

  case 159: /* operator_binary: expression "~! operator" expression  */
#line 1751 "grammar.y"
                                            {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 4589 "grammar.cpp"
    break;

  case 160: /* operator_binary: expression quantifier "== operator" expression  */
#line 1758 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4597 "grammar.cpp"
    break;

  case 161: /* operator_binary: expression quantifier "!= operator" expression  */
#line 1761 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4605 "grammar.cpp"
    break;

  case 162: /* operator_binary: expression quantifier "< operator" expression  */
#line 1764 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4613 "grammar.cpp"
    break;

  case 163: /* operator_binary: expression quantifier "> operator" expression  */
#line 1767 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4621 "grammar.cpp"
    break;

  case 164: /* operator_binary: expression quantifier "<= operator" expression  */
#line 1770 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4629 "grammar.cpp"
    break;

  case 165: /* operator_binary: expression quantifier ">= operator" expression  */
#line 1773 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4637 "grammar.cpp"
    break;

  case 166: /* operator_binary: expression quantifier "IN keyword" expression  */
#line 1776 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4645 "grammar.cpp"
    break;

  case 167: /* operator_binary: expression quantifier "not in operator" expression  */
#line 1779 "grammar.y"
                                              {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4653 "grammar.cpp"
    break;

  case 168: /* operator_binary: expression "at least modifier" "(" expression ")" "== operator" expression  */
#line 1782 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4662 "grammar.cpp"
    break;

  case 169: /* operator_binary: expression "at least modifier" "(" expression ")" "!= operator" expression  */
#line 1786 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4671 "grammar.cpp"
    break;

  case 170: /* operator_binary: expression "at least modifier" "(" expression ")" "< operator" expression  */
#line 1790 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4680 "grammar.cpp"
    break;

  case 171: /* operator_binary: expression "at least modifier" "(" expression ")" "> operator" expression  */
#line 1794 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4689 "grammar.cpp"
    break;

  case 172: /* operator_binary: expression "at least modifier" "(" expression ")" "<= operator" expression  */
#line 1798 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4698 "grammar.cpp"
    break;

  case 173: /* operator_binary: expression "at least modifier" "(" expression ")" ">= operator" expression  */
#line 1802 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4707 "grammar.cpp"
    break;

  case 174: /* operator_binary: expression "at least modifier" "(" expression ")" "IN keyword" expression  */
#line 1806 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4716 "grammar.cpp"
    break;

  case 175: /* operator_binary: expression "at least modifier" "(" expression ")" "not in operator" expression  */
#line 1810 "grammar.y"
                                                                        {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4725 "grammar.cpp"
    break;

  case 176: /* operator_ternary: expression "?" expression ":" expression  */
#line 1817 "grammar.y"
                                                        {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4733 "grammar.cpp"
    break;

  case 177: /* operator_ternary: expression "?" ":" expression  */
#line 1820 "grammar.y"
                                             {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4741 "grammar.cpp"
    break;

  case 178: /* optional_function_call_arguments: %empty  */
#line 1826 "grammar.y"
                {
    }
#line 4748 "grammar.cpp"
    break;

  case 179: /* optional_function_call_arguments: function_arguments_list  */
#line 1828 "grammar.y"
                            {
    }
#line 4755 "grammar.cpp"
    break;

  case 180: /* expression_or_query: expression  */
#line 1833 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4763 "grammar.cpp"
    break;

  case 181: /* $@15: %empty  */
#line 1836 "grammar.y"
    {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 4772 "grammar.cpp"
    break;

  case 182: /* expression_or_query: $@15 query  */
#line 1839 "grammar.y"
            {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName, node);
    }
#line 4787 "grammar.cpp"
    break;

  case 183: /* function_arguments_list: expression_or_query  */
#line 1852 "grammar.y"
                        {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4795 "grammar.cpp"
    break;

  case 184: /* function_arguments_list: function_arguments_list "," expression_or_query  */
#line 1855 "grammar.y"
                                                        {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4803 "grammar.cpp"
    break;

  case 185: /* compound_value: array  */
#line 1861 "grammar.y"
          {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4811 "grammar.cpp"
    break;

  case 186: /* compound_value: object  */
#line 1864 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4819 "grammar.cpp"
    break;

  case 187: /* $@16: %empty  */
#line 1870 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 4828 "grammar.cpp"
    break;

  case 188: /* array: "[" $@16 optional_array_elements "]"  */
#line 1873 "grammar.y"
                                            {
      (yyval.node) = parser->popArray();
    }
#line 4836 "grammar.cpp"
    break;

  case 189: /* optional_array_elements: %empty  */
#line 1879 "grammar.y"
                {
    }
#line 4843 "grammar.cpp"
    break;

  case 190: /* optional_array_elements: array_elements_list  */
#line 1881 "grammar.y"
                        {
    }
#line 4850 "grammar.cpp"
    break;

  case 191: /* optional_array_elements: array_elements_list ","  */
#line 1883 "grammar.y"
                                {
    }
#line 4857 "grammar.cpp"
    break;

  case 192: /* array_elements_list: array_element  */
#line 1888 "grammar.y"
                  {
    }
#line 4864 "grammar.cpp"
    break;

  case 193: /* array_elements_list: array_elements_list "," array_element  */
#line 1890 "grammar.y"
                                              {
    }
#line 4871 "grammar.cpp"
    break;

  case 194: /* array_element: expression  */
#line 1895 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4879 "grammar.cpp"
    break;

  case 195: /* for_options: %empty  */
#line 1901 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4887 "grammar.cpp"
    break;

  case 196: /* for_options: "identifier" expression  */
#line 1904 "grammar.y"
                        {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      auto node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (::caseInsensitiveEqual(operation, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else {
        // everything else must be OPTIONS
        if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
        }
        ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 4917 "grammar.cpp"
    break;

  case 197: /* for_options: "identifier" expression "identifier" expression  */
#line 1929 "grammar.y"
                                            {
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!::caseInsensitiveEqual(operation, "SEARCH") ||
          !::caseInsensitiveEqual({(yyvsp[-1].strval).value, (yyvsp[-1].strval).length}, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 4939 "grammar.cpp"
    break;

  case 198: /* options: %empty  */
#line 1949 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4947 "grammar.cpp"
    break;

  case 199: /* options: "identifier" object  */
#line 1952 "grammar.y"
                    {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);

      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      (yyval.node) = (yyvsp[0].node);
    }
#line 4964 "grammar.cpp"
    break;

  case 200: /* $@17: %empty  */
#line 1967 "grammar.y"
                  {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 4973 "grammar.cpp"
    break;

  case 201: /* object: "{" $@17 optional_object_elements "}"  */
#line 1970 "grammar.y"
                                              {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 4981 "grammar.cpp"
    break;

  case 202: /* optional_object_elements: %empty  */
#line 1976 "grammar.y"
                {
    }
#line 4988 "grammar.cpp"
    break;

  case 203: /* optional_object_elements: object_elements_list  */
#line 1978 "grammar.y"
                         {
    }
#line 4995 "grammar.cpp"
    break;

  case 204: /* optional_object_elements: object_elements_list ","  */
#line 1980 "grammar.y"
                                 {
    }
#line 5002 "grammar.cpp"
    break;

  case 205: /* object_elements_list: object_element  */
#line 1985 "grammar.y"
                   {
    }
#line 5009 "grammar.cpp"
    break;

  case 206: /* object_elements_list: object_elements_list "," object_element  */
#line 1987 "grammar.y"
                                                {
    }
#line 5016 "grammar.cpp"
    break;

  case 207: /* object_element: "identifier"  */
#line 1992 "grammar.y"
             {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);

      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable(name, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", name, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 5037 "grammar.cpp"
    break;

  case 208: /* object_element: object_element_name ":" expression  */
#line 2008 "grammar.y"
                                           {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5046 "grammar.cpp"
    break;

  case 209: /* object_element: "bind parameter" ":" expression  */
#line 2012 "grammar.y"
                                   {
      // bind-parameter : attribute-value
      std::string_view name((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter(name);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 5061 "grammar.cpp"
    break;

  case 210: /* object_element: "[" expression "]" ":" expression  */
#line 2022 "grammar.y"
                                                             {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 5070 "grammar.cpp"
    break;

  case 211: /* array_filter_operator: "?"  */
#line 2029 "grammar.y"
               {
      (yyval.intval) = 1;
    }
#line 5078 "grammar.cpp"
    break;

  case 212: /* array_filter_operator: array_filter_operator "?"  */
#line 2032 "grammar.y"
                                     {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5086 "grammar.cpp"
    break;

  case 213: /* array_map_operator: "* operator"  */
#line 2038 "grammar.y"
            {
      (yyval.intval) = 1;
    }
#line 5094 "grammar.cpp"
    break;

  case 214: /* array_map_operator: array_map_operator "* operator"  */
#line 2041 "grammar.y"
                               {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5102 "grammar.cpp"
    break;

  case 215: /* optional_array_filter: %empty  */
#line 2047 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5110 "grammar.cpp"
    break;

  case 216: /* optional_array_filter: "FILTER declaration" expression  */
#line 2050 "grammar.y"
                        {
      // FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter(nullptr, (yyvsp[0].node));
    }
#line 5119 "grammar.cpp"
    break;

  case 217: /* optional_array_filter: quantifier "FILTER declaration" expression  */
#line 2054 "grammar.y"
                                   {
      // ALL|ANY|NONE|AT LEAST FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5128 "grammar.cpp"
    break;

  case 218: /* optional_array_filter: "at least modifier" "(" expression ")" "FILTER declaration" expression  */
#line 2058 "grammar.y"
                                                             {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeArrayFilter(quantifier, (yyvsp[0].node));
    }
#line 5137 "grammar.cpp"
    break;

  case 219: /* optional_array_filter: expression "FILTER declaration" expression  */
#line 2062 "grammar.y"
                                   {
      // 1    FILTER filter-condition
      // 2..5 FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5147 "grammar.cpp"
    break;

  case 220: /* optional_array_limit: %empty  */
#line 2070 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5155 "grammar.cpp"
    break;

  case 221: /* optional_array_limit: "LIMIT declaration" expression  */
#line 2073 "grammar.y"
                       {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 5163 "grammar.cpp"
    break;

  case 222: /* optional_array_limit: "LIMIT declaration" expression "," expression  */
#line 2076 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5171 "grammar.cpp"
    break;

  case 223: /* optional_array_return: %empty  */
#line 2082 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5179 "grammar.cpp"
    break;

  case 224: /* optional_array_return: "RETURN declaration" expression  */
#line 2085 "grammar.y"
                        {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5187 "grammar.cpp"
    break;

  case 225: /* graph_collection: "identifier"  */
#line 2091 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5195 "grammar.cpp"
    break;

  case 226: /* graph_collection: bind_parameter_datasource_expected  */
#line 2094 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5203 "grammar.cpp"
    break;

  case 227: /* graph_collection: graph_direction "identifier"  */
#line 2097 "grammar.y"
                             {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 5212 "grammar.cpp"
    break;

  case 228: /* graph_collection: graph_direction bind_parameter  */
#line 2101 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 5220 "grammar.cpp"
    break;

  case 229: /* graph_collection_list: graph_collection  */
#line 2107 "grammar.y"
                      {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5229 "grammar.cpp"
    break;

  case 230: /* graph_collection_list: graph_collection_list "," graph_collection  */
#line 2111 "grammar.y"
                                                    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5238 "grammar.cpp"
    break;

  case 231: /* graph_subject: graph_collection  */
#line 2118 "grammar.y"
                     {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5249 "grammar.cpp"
    break;

  case 232: /* $@18: %empty  */
#line 2124 "grammar.y"
                             {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 5259 "grammar.cpp"
    break;

  case 233: /* graph_subject: graph_collection "," $@18 graph_collection_list  */
#line 2128 "grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5269 "grammar.cpp"
    break;

  case 234: /* graph_subject: "GRAPH keyword" bind_parameter  */
#line 2133 "grammar.y"
                           {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 5278 "grammar.cpp"
    break;

  case 235: /* graph_subject: "GRAPH keyword" "quoted string"  */
#line 2137 "grammar.y"
                            {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5287 "grammar.cpp"
    break;

  case 236: /* graph_subject: "GRAPH keyword" "identifier"  */
#line 2141 "grammar.y"
                     {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5296 "grammar.cpp"
    break;

  case 237: /* graph_direction: "outbound modifier"  */
#line 2150 "grammar.y"
               {
      (yyval.intval) = 2;
    }
#line 5304 "grammar.cpp"
    break;

  case 238: /* graph_direction: "inbound modifier"  */
#line 2153 "grammar.y"
              {
      (yyval.intval) = 1;
    }
#line 5312 "grammar.cpp"
    break;

  case 239: /* graph_direction: "any modifier"  */
#line 2156 "grammar.y"
          {
      (yyval.intval) = 0;
    }
#line 5320 "grammar.cpp"
    break;

  case 240: /* graph_direction_steps: graph_direction  */
#line 2162 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 5328 "grammar.cpp"
    break;

  case 241: /* graph_direction_steps: expression graph_direction  */
#line 2165 "grammar.y"
                                                {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 5336 "grammar.cpp"
    break;

  case 242: /* reference: "identifier"  */
#line 2171 "grammar.y"
             {
      AstNode* node = nullptr;

      auto ast = parser->ast();
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto variable = ast->scopes()->getVariable(variableName, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (ast->scopes()->canUseCurrentVariable() && 
            (variableName == Variable::NAME_CURRENT || variableName == Variable::NAME_CURRENT.substr(1))) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {//为collection时
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query().resolver();
        node = ast->createNodeDataSource(resolver, variableName, arangodb::AccessMode::Type::READ, true, false,parser->isSelect()||parser->isHaving());
      }
      TRI_ASSERT(node != nullptr);

      if(parser->isSelect()){
        parser->pushSelectPending(node,std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      }
      if(parser->isHaving()){
        parser->pushHavingPending(node,std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      }
      
      (yyval.node) = node;
    }
#line 5378 "grammar.cpp"
    break;

  case 243: /* reference: compound_value  */
#line 2208 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5386 "grammar.cpp"
    break;

  case 244: /* reference: bind_parameter  */
#line 2211 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5394 "grammar.cpp"
    break;

  case 245: /* reference: function_call  */
#line 2214 "grammar.y"
                  {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5403 "grammar.cpp"
    break;

  case 246: /* reference: "(" expression ")"  */
#line 2218 "grammar.y"
                              {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      } else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 5417 "grammar.cpp"
    break;

  case 247: /* $@19: %empty  */
#line 2227 "grammar.y"
           {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 5426 "grammar.cpp"
    break;

  case 248: /* reference: "(" $@19 query ")"  */
#line 2230 "grammar.y"
                    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      parser->ast()->addOperation(subQuery);

      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName, node);
    }
#line 5441 "grammar.cpp"
    break;

  case 249: /* reference: reference '.' "identifier"  */
#line 2240 "grammar.y"
                                           {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), name));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), name);
      }
    }
#line 5461 "grammar.cpp"
    break;

  case 250: /* reference: reference '.' bind_parameter  */
#line 2255 "grammar.y"
                                                 {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 5479 "grammar.cpp"
    break;

  case 251: /* reference: reference "[" expression "]"  */
#line 2268 "grammar.y"
                                                                  {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-3].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-3].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1), (yyvsp[-1].node)));
        (yyval.node) = (yyvsp[-3].node);
      } else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-3].node), (yyvsp[-1].node));
      }
    }
#line 5497 "grammar.cpp"
    break;

  case 252: /* $@20: %empty  */
#line 2281 "grammar.y"
                                                 {
      // variable expansion, e.g. variable[?], with optional FILTER clause
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5524 "grammar.cpp"
    break;

  case 253: /* reference: reference "[" array_filter_operator $@20 optional_array_filter "]"  */
#line 2302 "grammar.y"
                                                          {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-5].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
        (yyvsp[-5].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-5].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
      }
    }
#line 5546 "grammar.cpp"
    break;

  case 254: /* $@21: %empty  */
#line 2319 "grammar.y"
                                              {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5573 "grammar.cpp"
    break;

  case 255: /* reference: reference "[" array_map_operator $@21 optional_array_filter optional_array_limit optional_array_return "]"  */
#line 2340 "grammar.y"
                                                                                                     {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-3].node) != nullptr) {
        // array filter members are [quantifier, filter]
        // quantifier is optional.
        TRI_ASSERT((yyvsp[-3].node)->type == NODE_TYPE_ARRAY_FILTER);
        TRI_ASSERT((yyvsp[-3].node)->numMembers() == 2);
        if ((yyvsp[-3].node)->getMember(0) != nullptr && (yyvsp[-3].node)->getMember(0)->type != NODE_TYPE_NOP) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected quantifier value found for array expansion operation.", yylloc.first_line, yylloc.first_column);
        }
      }

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      } else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 5605 "grammar.cpp"
    break;

  case 256: /* simple_value: value_literal  */
#line 2370 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5613 "grammar.cpp"
    break;

  case 257: /* simple_value: bind_parameter  */
#line 2373 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5621 "grammar.cpp"
    break;

  case 258: /* numeric_value: "integer number"  */
#line 2379 "grammar.y"
              {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5630 "grammar.cpp"
    break;

  case 259: /* numeric_value: "number"  */
#line 2383 "grammar.y"
             {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5639 "grammar.cpp"
    break;

  case 260: /* value_literal: "quoted string"  */
#line 2390 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5647 "grammar.cpp"
    break;

  case 261: /* value_literal: numeric_value  */
#line 2393 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5655 "grammar.cpp"
    break;

  case 262: /* value_literal: "null"  */
#line 2396 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 5663 "grammar.cpp"
    break;

  case 263: /* value_literal: "true"  */
#line 2399 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 5671 "grammar.cpp"
    break;

  case 264: /* value_literal: "false"  */
#line 2402 "grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 5679 "grammar.cpp"
    break;

  case 265: /* in_or_into_collection_name: "identifier"  */
#line 2408 "grammar.y"
             {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5689 "grammar.cpp"
    break;

  case 266: /* in_or_into_collection_name: "quoted string"  */
#line 2413 "grammar.y"
                    {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5699 "grammar.cpp"
    break;

  case 267: /* in_or_into_collection_name: "bind data source parameter"  */
#line 2418 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5712 "grammar.cpp"
    break;

  case 268: /* bind_parameter: "bind data source parameter"  */
#line 2429 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5725 "grammar.cpp"
    break;

  case 269: /* bind_parameter: "bind parameter"  */
#line 2437 "grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameter(name);
    }
#line 5734 "grammar.cpp"
    break;

  case 270: /* bind_parameter_datasource_expected: "bind data source parameter"  */
#line 2444 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5747 "grammar.cpp"
    break;

  case 271: /* bind_parameter_datasource_expected: "bind parameter"  */
#line 2452 "grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5756 "grammar.cpp"
    break;

  case 272: /* object_element_name: "identifier"  */
#line 2459 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5764 "grammar.cpp"
    break;

  case 273: /* object_element_name: "quoted string"  */
#line 2462 "grammar.y"
                    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5772 "grammar.cpp"
    break;

  case 274: /* variable_name: "identifier"  */
#line 2467 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5780 "grammar.cpp"
    break;

  case 275: /* $@22: %empty  */
#line 2478 "grammar.y"
             {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
      parser->beginSelect();
    }
#line 5790 "grammar.cpp"
    break;

  case 276: /* $@23: %empty  */
#line 2482 "grammar.y"
                                 {parser->endSelect(); }
#line 5796 "grammar.cpp"
    break;

  case 277: /* $@24: %empty  */
#line 2482 "grammar.y"
                                                                                     {
      //设置let节点
      parser->executeSelectPendWithoutPop();
      parser->produceAlias();
    }
#line 5806 "grammar.cpp"
    break;

  case 278: /* sql_statements: "select" $@22 distinct_label select_list $@23 "from" collection_pair_list $@24 where_statements group_by_statements order_by_statements limit_statements  */
#line 2486 "grammar.y"
                                                                               {
      
      //设置return节点,
      parser->executeSelectPend();

      auto node =static_cast<AstNode*>(parser->popStack());
      AstNode* retNode = nullptr;

      if((yyvsp[-9].boolval)==true){//存在distinct
        auto const scopeType = parser->ast()->scopes()->type();

        if (scopeType == AQL_SCOPE_MAIN ||
            scopeType == AQL_SCOPE_SUBQUERY) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
        }
        AstNode* disNode = parser->ast()->createNodeDistinct(node);
        retNode = parser->ast()->createNodeReturn(disNode);

      }else{
        retNode = parser->ast()->createNodeReturn(node);
      }
      
      parser->ast()->addOperation(retNode); 
      parser->ast()->scopes()->endNested();
    }
#line 5836 "grammar.cpp"
    break;

  case 279: /* collection_pair_list: collection_pair  */
#line 2513 "grammar.y"
                    {

    }
#line 5844 "grammar.cpp"
    break;

  case 280: /* collection_pair_list: collection_pair_list "," collection_pair  */
#line 2517 "grammar.y"
                                                 {

    }
#line 5852 "grammar.cpp"
    break;

  case 281: /* collection_pair: expression "as" variable_name  */
#line 2522 "grammar.y"
                                  {
      //得到变量名
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      AstNode* variableNameNode = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      //现在创建了一个变量节点(同时也创建一个变量)
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      Variable* variable = static_cast<Variable*>(variableNode->getData());
      //创建整个Node_type_for节点
      AstNode* options = nullptr;
      AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      //向整个ast的_root添加member
      parser->ast()->addOperation(node);
    }
#line 5870 "grammar.cpp"
    break;

  case 282: /* collection_pair: expression  */
#line 2535 "grammar.y"
               {
      if((yyvsp[0].node)->isValueType(arangodb::aql::AstNodeValueType::VALUE_TYPE_STRING)){
        //现在创建了一个变量节点(同时也创建一个变量)
        parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
        AstNode* variableNode = parser->ast()->createNodeVariable((yyvsp[0].node)->getStringView(), true);
        Variable* variable = static_cast<Variable*>(variableNode->getData());
        //创建整个Node_type_for节点
        AstNode* options = nullptr;
        AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[0].node), options);
        //向整个ast的_root添加member
        parser->ast()->addOperation(node);
      }else{
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "you need an alia", yylloc.first_line, yylloc.first_column);
      }
    }
#line 5890 "grammar.cpp"
    break;

  case 283: /* distinct_label: %empty  */
#line 2553 "grammar.y"
             {
      (yyval.boolval)=false;
    }
#line 5898 "grammar.cpp"
    break;

  case 284: /* distinct_label: "DISTINCT modifier"  */
#line 2556 "grammar.y"
               {
      (yyval.boolval)=true;
    }
#line 5906 "grammar.cpp"
    break;

  case 285: /* select_list: select_element  */
#line 2562 "grammar.y"
                  {

    }
#line 5914 "grammar.cpp"
    break;

  case 286: /* select_list: select_list "," select_element  */
#line 2565 "grammar.y"
                                      {

    }
#line 5922 "grammar.cpp"
    break;

  case 287: /* select_element: expression "as" variable_name  */
#line 2570 "grammar.y"
                                  {
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, (yyvsp[-2].node));
      parser->pushAliasQueue((yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});

    }
#line 5932 "grammar.cpp"
    break;

  case 288: /* select_element: expression  */
#line 2575 "grammar.y"
               {
      if((yyvsp[0].node)->type == NODE_TYPE_ATTRIBUTE_ACCESS){
        //TODO : 名称冲突换成临时名
        parser->pushObjectElement((yyvsp[0].node)->getStringValue(), (yyvsp[0].node)->getStringLength(), (yyvsp[0].node));
        parser->pushAliasQueue((yyvsp[0].node),std::string_view{(yyvsp[0].node)->getStringValue(),(yyvsp[0].node)->getStringLength()});

      }else{
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "you need an alia", yylloc.first_line, yylloc.first_column);

      }
    }
#line 5948 "grammar.cpp"
    break;

  case 289: /* where_statements: %empty  */
#line 2588 "grammar.y"
                {
    }
#line 5955 "grammar.cpp"
    break;

  case 290: /* where_statements: "where" expression  */
#line 2590 "grammar.y"
                       {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 5965 "grammar.cpp"
    break;

  case 291: /* group_by_statements: %empty  */
#line 2598 "grammar.y"
                {
      //检查是否有聚集
      AstNode* aggNode=parser->produceAggregate();
      if(aggNode->numMembers()!=0){ //有聚集函数,创建聚集
        VarSet variablesIntroduced{};
        auto scopes = parser->ast()->scopes();

        if (::startCollectScope(scopes)) {
          ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, aggNode);
        }
        AstNode const* into = ::getIntoVariable(parser, nullptr);
        AstNode const* intoExpression = ::getIntoExpression(nullptr);

        auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), aggNode, into, intoExpression, nullptr, nullptr);
        parser->ast()->addOperation(node);
      }

    }
#line 5988 "grammar.cpp"
    break;

  case 292: /* $@25: %empty  */
#line 2616 "grammar.y"
                           { parser->beginHaving(); }
#line 5994 "grammar.cpp"
    break;

  case 293: /* group_by_statements: group_by_variable_list $@25 having_statements  */
#line 2616 "grammar.y"
                                                                       {

      parser->endHaving((yyvsp[0].node));
      AstNode* aggNode=parser->produceAggregate();

      auto scopes = parser->ast()->scopes();
      VarSet variablesIntroduced{};
      if (::startCollectScope(scopes)) {//开始一个新的CollectScope,要重新注册(实际上collect_variable_list和aggregate中已经注册在上一层的scopes了)
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, aggNode);
      }

      AstNode const* into = ::getIntoVariable(parser, nullptr);
      AstNode const* intoExpression = ::getIntoExpression(nullptr);

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node),aggNode,into, intoExpression, nullptr, nullptr);
      parser->ast()->addOperation(node);

      //处理having
      if((yyvsp[0].node)!=nullptr){
        parser->executeHavingPend();
        auto filterNode = parser->ast()->createNodeFilter((yyvsp[0].node));
        parser->ast()->addOperation(filterNode);
      }
    }
#line 6024 "grammar.cpp"
    break;

  case 294: /* $@26: %empty  */
#line 2643 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 6033 "grammar.cpp"
    break;

  case 295: /* group_by_variable_list: "group" "by" $@26 group_by_list  */
#line 2646 "grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 6043 "grammar.cpp"
    break;

  case 296: /* group_by_list: group_by_element  */
#line 2653 "grammar.y"
                    {

    }
#line 6051 "grammar.cpp"
    break;

  case 297: /* group_by_list: group_by_list "," group_by_element  */
#line 2657 "grammar.y"
                                          {

    }
#line 6059 "grammar.cpp"
    break;

  case 298: /* group_by_element: expression  */
#line 2662 "grammar.y"
              {
      std::string vName = parser->ast()->variables()->nextName();
      auto node = parser->ast()->createNodeAssign(vName.c_str(), vName.size(), (yyvsp[0].node),false);
      parser->updateWillReturnNode(node);
      parser->pushArrayElement(node);
    }
#line 6070 "grammar.cpp"
    break;

  case 299: /* having_statements: %empty  */
#line 2670 "grammar.y"
             {
      (yyval.node)=nullptr;
    }
#line 6078 "grammar.cpp"
    break;

  case 300: /* having_statements: "having" expression  */
#line 2673 "grammar.y"
                        {
      (yyval.node)=(yyvsp[0].node);
    }
#line 6086 "grammar.cpp"
    break;

  case 301: /* order_by_statements: %empty  */
#line 2678 "grammar.y"
                 {
    }
#line 6093 "grammar.cpp"
    break;

  case 302: /* $@27: %empty  */
#line 2680 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 6102 "grammar.cpp"
    break;

  case 303: /* order_by_statements: "order" "by" $@27 sort_list  */
#line 2683 "grammar.y"
                {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 6112 "grammar.cpp"
    break;

  case 304: /* limit_statements: %empty  */
#line 2690 "grammar.y"
                   {
    }
#line 6119 "grammar.cpp"
    break;

  case 305: /* limit_statements: limit_statement  */
#line 2692 "grammar.y"
                   {

  }
#line 6127 "grammar.cpp"
    break;


#line 6131 "grammar.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      {
        yypcontext_t yyctx
          = {yyssp, yytoken, &yylloc};
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == -1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *,
                             YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (yymsg)
              {
                yysyntax_error_status
                  = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
                yymsgp = yymsg;
              }
            else
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = YYENOMEM;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == YYENOMEM)
          YYNOMEM;
      }
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= T_END)
        {
          /* Return failure if at end of input.  */
          if (yychar == T_END)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
  return yyresult;
}

