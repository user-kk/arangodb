#line 16 "tokens.ll"
/* clang-format off */

#include <algorithm>
#include <cstdint>




#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */










#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif














#ifdef yy_create_buffer
#define Aql_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer Aql_create_buffer
#endif

    
#ifdef yy_delete_buffer
#define Aql_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer Aql_delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define Aql_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer Aql_scan_buffer
#endif

    
#ifdef yy_scan_string
#define Aql_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string Aql_scan_string
#endif

    
#ifdef yy_scan_bytes
#define Aql_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes Aql_scan_bytes
#endif

    
#ifdef yy_init_buffer
#define Aql_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer Aql_init_buffer
#endif

    
#ifdef yy_flush_buffer
#define Aql_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer Aql_flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define Aql_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state Aql_load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define Aql_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer Aql_switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define Aqlpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state Aqlpush_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define Aqlpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state Aqlpop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define Aqlensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack Aqlensure_buffer_stack
#endif

    
#ifdef yylex
#define Aqllex_ALREADY_DEFINED
#else
#define yylex Aqllex
#endif

    
#ifdef yyrestart
#define Aqlrestart_ALREADY_DEFINED
#else
#define yyrestart Aqlrestart
#endif

    
#ifdef yylex_init
#define Aqllex_init_ALREADY_DEFINED
#else
#define yylex_init Aqllex_init
#endif

    
#ifdef yylex_init_extra
#define Aqllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra Aqllex_init_extra
#endif

    
#ifdef yylex_destroy
#define Aqllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy Aqllex_destroy
#endif

    
#ifdef yyget_debug
#define Aqlget_debug_ALREADY_DEFINED
#else
#define yyget_debug Aqlget_debug
#endif

    
#ifdef yyset_debug
#define Aqlset_debug_ALREADY_DEFINED
#else
#define yyset_debug Aqlset_debug
#endif

    
#ifdef yyget_extra
#define Aqlget_extra_ALREADY_DEFINED
#else
#define yyget_extra Aqlget_extra
#endif

    
#ifdef yyset_extra
#define Aqlset_extra_ALREADY_DEFINED
#else
#define yyset_extra Aqlset_extra
#endif

    
#ifdef yyget_in
#define Aqlget_in_ALREADY_DEFINED
#else
#define yyget_in Aqlget_in
#endif

    
#ifdef yyset_in
#define Aqlset_in_ALREADY_DEFINED
#else
#define yyset_in Aqlset_in
#endif

    
#ifdef yyget_out
#define Aqlget_out_ALREADY_DEFINED
#else
#define yyget_out Aqlget_out
#endif

    
#ifdef yyset_out
#define Aqlset_out_ALREADY_DEFINED
#else
#define yyset_out Aqlset_out
#endif

    
#ifdef yyget_leng
#define Aqlget_leng_ALREADY_DEFINED
#else
#define yyget_leng Aqlget_leng
#endif

    
#ifdef yyget_text
#define Aqlget_text_ALREADY_DEFINED
#else
#define yyget_text Aqlget_text
#endif

    
#ifdef yyget_lineno
#define Aqlget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno Aqlget_lineno
#endif

    
#ifdef yyset_lineno
#define Aqlset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno Aqlset_lineno
#endif

    
        
#ifdef yyget_column
#define Aqlget_column_ALREADY_DEFINED
#else
#define yyget_column Aqlget_column
#endif

        
#ifdef yyset_column
#define Aqlset_column_ALREADY_DEFINED
#else
#define yyset_column Aqlset_column
#endif

    
    
#ifdef yywrap
#define Aqlwrap_ALREADY_DEFINED
#else
#define yywrap Aqlwrap
#endif




    
#ifdef yyget_lval
#define Aqlget_lval_ALREADY_DEFINED
#else
#define yyget_lval Aqlget_lval
#endif

    
#ifdef yyset_lval
#define Aqlset_lval_ALREADY_DEFINED
#else
#define yyset_lval Aqlset_lval
#endif




    
#ifdef yyget_lloc
#define Aqlget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc Aqlget_lloc
#endif

    
#ifdef yyset_lloc
#define Aqlset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc Aqlset_lloc
#endif




#ifdef yyalloc
#define Aqlalloc_ALREADY_DEFINED
#else
#define yyalloc Aqlalloc
#endif

    
#ifdef yyrealloc
#define Aqlrealloc_ALREADY_DEFINED
#else
#define yyrealloc Aqlrealloc
#endif

    
#ifdef yyfree
#define Aqlfree_ALREADY_DEFINED
#else
#define yyfree Aqlfree
#endif









/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))





/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r













/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif




#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */




/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]





void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );


void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define Aqlwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r






static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 129
#define YY_END_OF_BUFFER 130
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[400] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  130,  128,  118,  119,   70,  102,
       90,   77,  128,  107,   83,   84,   75,   73,   82,   74,
      128,   76,  112,  112,   80,   89,   67,   68,   65,   78,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   87,   88,  128,   92,   85,  128,   86,  128,
       96,   95,   96,   93,  101,  100,  101,  101,  111,  110,
      108,  111,  106,  105,  103,  106,  122,  121,  125,  127,
      126,  118,    0,   63,    0,   61,   91,   71,   81,  115,

      123,  120,    0,    0,    0,    0,  112,   79,   66,   62,
       60,   64,  116,    0,    0,   91,   91,   91,   91,   91,
       91,   39,   91,   43,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   17,   91,   91,   91,   91,   91,
       91,   91,   47,   16,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,    0,   72,   97,   94,
       99,   98,  109,  104,  122,  125,  124,    0,  115,  113,
        0,  115,  114,  116,  117,    0,  116,   91,   91,   33,
       15,   32,   11,    0,   91,   91,   91,   91,   91,   91,
       91,    1,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,    2,   91,   91,   91,   91,   14,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   69,  117,  117,
      116,  116,   91,   91,   91,   91,    0,   91,   56,   12,
       91,   91,   91,   91,   38,   91,   91,   91,   91,   91,
       18,   46,   91,   91,   36,   91,   91,   34,    0,   57,
       91,   91,   91,   91,   91,   91,   91,   91,    6,   91,
       91,   58,   91,   91,   91,   91,   91,   19,  117,  117,
       91,   91,   91,   91,    0,   91,   91,   91,   59,   91,
       25,   41,   91,   91,   91,   91,   91,    7,   49,    0,

       42,   91,   91,   91,   91,   91,   91,   91,   91,   52,
       91,   91,   91,   40,   91,   91,   91,   91,   91,    0,
       91,   91,   51,    3,   44,   91,   21,   91,   91,    0,
       91,   20,   91,    4,   37,   91,   54,   91,   45,   22,
       24,    8,   53,   91,   91,   91,    0,    5,   91,   31,
       29,   91,   13,   91,   23,   91,   91,   91,   91,   91,
       91,   35,    9,   91,   30,   91,   50,   91,   10,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   48,   91,
       91,   91,   91,   91,   55,   91,   91,   91,   91,   26,
       91,   91,   91,   91,   91,   27,   91,   28,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   44,
       53,   54,   55,    1,   56,   57,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   44,   74,   75,   76,   77,   78,   79,   51,
       80,   44,   81,   82,   83,   84,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   85,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   86,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[87] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    1,    4,    4,    4,
        1,    1,    1,    1,    1,    1,    5,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1,    1,    1,    8,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[428] =
    {   0,
        0,    0,   84,   85,   86,   89,   90,   91,   92,   93,
      348,  332,   98,   99,  327, 2064,  299, 2064,  101, 2064,
        0, 2064,  281, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
       89,  100,   97,  100,  263, 2064,  256,   66,  244, 2064,
       79,  168,  145,  134,  160,  163,  175,  232,  235,  238,
      241,  104,  246,  267,  280,  285,  251,  299,  345,  326,
      356,  348, 2064, 2064,  192, 2064, 2064,  154, 2064,  145,
     2064, 2064,    0, 2064, 2064, 2064,    0,  142, 2064, 2064,
     2064,    0, 2064, 2064, 2064,    0,    0, 2064,    0, 2064,
      206,  219,  125, 2064,   50, 2064,  254, 2064, 2064,  370,

     2064, 2064,  150,   96,  319,    0,  404, 2064, 2064, 2064,
     2064, 2064,    0,  156,  121,    0,  329,  415,  375,  422,
      425,  428,  450,  431,  444,  455,  478,  484,  490,  498,
      502,  507,  513,  524,  563,  532,  167,  571,  575,  581,
      585,  615,  588,  631,  646,  654,  640,  649,  658,  662,
      697,  713,  693,  719,  725,  748,  118, 2064, 2064, 2064,
     2064, 2064, 2064, 2064,    0,    0, 2064,    0,  740,  112,
      296,  474,    0,    0,    0,  117,  102,  758,  764,  670,
      773,  778,  781,  416,  787,  792,  797,  803,  813,  826,
      842,  822,  846,  856,  865,  872,  875,  887,  904,  907,

      108,  164,  914,  921,  932,  936,  939,  962,  954,  971,
      986,  966,  993, 1010, 1016, 1001, 1021, 1032, 1035, 1049,
     1041, 1063, 1082, 1094, 1098, 1102, 1109, 2064,    0,  101,
       95,    0, 1112, 1117,  109,  125,  173, 1127, 1142, 1151,
     1157,  180, 1168, 1172, 1176, 1183, 1190, 1196, 1201, 1223,
     1235, 1240,  142,  203, 1246, 1251, 1254, 1257,  423, 1262,
     1266, 1274, 1285, 1281, 1305, 1313, 1329, 1333, 1336, 1339,
     1348, 1362, 1378, 1381, 1388, 1393, 1403, 1411,   93,    0,
     1420, 1432,  211,  227,  253, 1450, 1423,  221, 1428, 1453,
     1463, 1472, 1481, 1484, 1494,  255,  276, 1498, 1502,  283,

     1511, 1515, 1524, 1529, 1542, 1546, 1555, 1558, 1576, 1581,
     1586, 1589, 1605, 1608, 1616, 1611, 1620,  298,  300,  283,
     1635, 1638,    0, 1665, 1668, 1681, 1684,  323,  332,    0,
     1687, 1690, 1695, 1698, 1711, 1714, 1729,  315, 1743, 1746,
     1753, 1756, 1759, 1763,  341,  383,  452, 1768, 1773, 1776,
        0,  398, 2064, 1785, 1788, 1803,  461,  454, 1808,  488,
      501, 2064, 1815,  511, 1818, 1833,    0,  527, 1836,  552,
      555,  564,  569,  577,  577,  578,   78,  597,    0,  623,
      628,  697,  653,   77,    0,  728,  738,  782,  659,    0,
      800,  812,  672,  677,  816,    0,  733,    0, 2064, 1892,

     1900, 1908, 1916, 1924, 1932, 1935, 1939, 1944, 1952, 1960,
     1968, 1976, 1984, 1992, 1997, 2000, 2005, 2010, 2015, 2023,
     2025, 2030, 2035, 2040, 2045, 2050, 2058
    } ;

static const flex_int16_t yy_def[428] =
    {   0,
      399,    1,  400,  400,  401,  401,  402,  402,  403,  403,
      404,  404,  405,  405,  399,  399,  399,  399,  399,  399,
      406,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      407,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  399,  399,  406,  399,  399,  399,  399,  399,
      399,  399,  409,  399,  399,  399,  410,  399,  399,  399,
      399,  411,  399,  399,  399,  412,  413,  399,  414,  399,
      399,  399,  399,  399,  399,  399,  408,  399,  399,  399,

      399,  399,  399,  399,  399,  415,  399,  399,  399,  399,
      399,  399,  416,  417,  418,  419,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  419,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  406,  399,  399,  399,
      399,  399,  399,  399,  413,  414,  399,  420,  399,  399,
      399,  399,  415,  416,  421,  422,  423,  408,  408,  408,
      408,  408,  408,  399,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      419,  419,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  399,  421,  424,
      423,  425,  408,  408,  419,  419,  399,  408,  408,  408,
      408,  419,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  419,  419,  408,  408,  408,  408,  399,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  424,  426,
      408,  408,  419,  419,  399,  408,  408,  419,  408,  408,
      408,  408,  408,  408,  408,  419,  419,  408,  408,  399,

      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  419,  419,  399,
      408,  408,  419,  408,  408,  408,  408,  419,  419,  427,
      408,  408,  408,  408,  408,  408,  408,  419,  408,  408,
      408,  408,  408,  408,  419,  419,  399,  408,  408,  408,
      419,  419,  399,  408,  408,  408,  419,  419,  408,  419,
      419,  399,  408,  419,  408,  408,  419,  419,  408,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,    0,  399,

      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399
    } ;

static const flex_int16_t yy_nxt[2151] =
    {   0,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   57,   58,   59,   60,   61,   57,   62,
       57,   57,   63,   16,   64,   65,   66,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   57,   62,   57,
       67,   68,   69,   16,   16,   70,   72,   72,   76,  110,
      168,   76,   80,   80,   84,   84,   85,   85,   81,   81,

       90,   90,   93,   93,   99,  114,  100,  100,  100,   91,
       91,  101,  103,  170,  170,  103,  102,  107,  107,  107,
      168,  116,  116,  116,   94,  104,   93,   93,  105,  170,
      170,  105,  388,  382,  115,  253,   95,   73,   73,   77,
       74,   74,   77,   82,   82,   86,   86,  106,  280,  111,
      232,  116,  116,  116,  283,  104,  280,  232,  105,  137,
       95,  105,  116,  116,  116,  253,   95,  169,  169,  169,
      284,   78,  176,  157,   78,  125,  115,  116,  116,  116,
      116,  116,  116,  283,   96,  116,  116,  116,  296,  116,
       95,  126,  116,  116,  116,  127,  124,  118,  254,  284,

      116,  119,  129,  128,  285,  125,  120,  288,  121,  201,
      130,  176,  202,  122,  123,  116,  131,  296,  116,  132,
       92,  126,  167,  116,  124,  127,  162,  118,  254,  159,
      116,  119,  129,  128,  285,  158,  120,  288,  121,  201,
      130,  202,  122,  123,  297,  318,  131,  157,  132,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  319,  134,  116,  116,  116,  323,  112,  116,  116,
      116,  116,  116,  116,  297,  318,  133,  138,  135,  109,
      320,  139,  136,  108,  116,  116,  116,  116,   98,  328,
      116,  319,  134,  116,  140,  323,  116,  116,  116,  116,

       92,  116,  116,  116,  116,  133,  116,  138,  135,  116,
      320,  139,  136,  172,  172,  172,  116,  116,  116,  328,
      329,  141,  116,  330,  140,  143,  399,  142,  347,  144,
      146,  171,  145,  171,   88,  116,  172,  172,  172,  345,
      116,  346,  357,  116,  116,  116,  116,  116,  116,  329,
       88,  141,  399,  330,  116,  143,  142,  347,  144,  399,
      146,  145,  116,  116,  116,  116,  116,  116,  351,  345,
      152,  346,  357,  116,  116,  116,  147,  399,  352,  148,
      149,  116,  155,  156,  116,  360,  150,  100,  100,  100,
      399,  151,  116,  116,  116,  399,  153,  351,  154,  152,

      116,  105,  399,  116,  399,  399,  147,  352,  179,  148,
      149,  116,  155,  156,  360,  399,  150,  184,  184,  103,
      151,  107,  107,  107,  259,  259,  153,  361,  154,  364,
      116,  105,  116,  116,  116,  105,  399,  399,  179,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  184,  184,  399,  237,  181,  361,  183,  300,  364,
      180,  116,  116,  116,  399,  105,  178,  116,  116,  116,
      116,  399,  116,  116,  116,  399,  182,  116,  399,  399,
      116,  368,  185,  116,  237,  181,  116,  183,  300,  186,
      180,  172,  172,  172,  178,  116,  116,  116,  362,  116,

      187,  116,  116,  116,  182,  116,  367,  116,  116,  116,
      116,  368,  185,  399,  189,  116,  116,  116,  186,  116,
      116,  116,  399,  188,  116,  116,  116,  362,  190,  187,
      116,  116,  116,  116,  370,  367,  191,  399,  399,  116,
      194,  116,  116,  116,  189,  116,  192,  371,  193,  116,
      116,  116,  188,  116,  195,  399,  372,  116,  190,  399,
      399,  399,  116,  370,  399,  374,  191,  200,  116,  399,
      194,  399,  196,  399,  399,  192,  371,  399,  193,  116,
      116,  116,  116,  375,  195,  372,  376,  116,  116,  116,
      116,  197,  116,  116,  116,  374,  399,  200,  116,  116,

      116,  196,  116,  116,  116,  116,  116,  116,  198,  199,
      377,  378,  204,  375,  205,  379,  376,  203,  116,  399,
      399,  197,  380,  381,  383,  207,  116,  206,  399,  399,
      116,  208,  116,  116,  116,  399,  116,  198,  199,  377,
      116,  378,  204,  116,  205,  379,  203,  399,  116,  116,
      116,  380,  381,  209,  383,  207,  206,  116,  116,  116,
      208,  210,  399,  116,  116,  116,  116,  116,  116,  384,
      116,  116,  116,  116,  385,  116,  116,  116,  215,  116,
      116,  116,  399,  209,  399,  399,  116,  116,  116,  116,
      216,  210,  211,  212,  399,  116,  213,  217,  384,  387,

      214,  116,  399,  385,  116,  392,  218,  399,  215,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  395,  399,
      216,  211,  396,  212,  219,  235,  213,  217,  387,  214,
      116,  116,  116,  222,  392,  218,  116,  116,  116,  386,
      220,  399,  116,  116,  116,  399,  399,  395,  116,  223,
      399,  396,  116,  399,  219,  389,  225,  169,  169,  169,
      221,  399,  399,  222,  224,  116,  116,  116,  116,  386,
      220,  105,  390,  399,  116,  116,  116,  116,  398,  223,
      116,  116,  116,  116,  399,  389,  225,  233,  226,  221,
      116,  116,  116,  224,  227,  116,  116,  116,  116,  116,

      116,  105,  390,  116,  116,  116,  116,  398,  234,  116,
      116,  116,  399,  116,  116,  116,  116,  233,  226,  116,
      116,  116,  116,  227,  391,  238,  240,  393,  116,  399,
      116,  116,  116,  236,  399,  399,  116,  234,  239,  116,
      116,  116,  116,  116,  116,  116,  394,  116,  399,  241,
      397,  399,  116,  399,  391,  238,  240,  393,  116,  116,
      116,  116,  399,  116,  116,  116,  399,  239,  242,  399,
      399,  243,  399,  116,  116,  116,  394,  116,  241,  399,
      397,  116,  116,  116,  116,  245,  399,  399,  244,  116,
      116,  116,  116,  116,  116,  399,  399,  116,  246,  399,

      243,  116,  399,  399,  116,  116,  116,  248,  399,  399,
      399,  116,  247,  399,  399,  245,  249,  244,  250,  399,
      116,  116,  116,  116,  116,  116,  116,  116,  246,  399,
      116,  116,  116,  116,  399,  399,  399,  248,  116,  116,
      116,  247,  116,  399,  399,  251,  249,  252,  250,  116,
      116,  116,  255,  116,  116,  116,  116,  116,  116,  116,
      399,  399,  116,  259,  259,  257,  399,  256,  399,  116,
      258,  116,  116,  116,  399,  251,  116,  252,  399,  116,
      116,  116,  255,  116,  116,  116,  399,  116,  116,  116,
      116,  116,  260,  399,  116,  257,  399,  256,  399,  399,

      258,  399,  261,  116,  116,  116,  399,  263,  399,  116,
      116,  116,  116,  399,  262,  399,  399,  116,  116,  116,
      116,  116,  260,  399,  399,  399,  116,  116,  116,  116,
      399,  264,  261,  116,  116,  116,  399,  263,  116,  116,
      116,  116,  399,  399,  262,  267,  399,  266,  116,  116,
      116,  116,  116,  116,  116,  399,  116,  265,  116,  116,
      116,  264,  399,  268,  399,  116,  116,  116,  116,  399,
      399,  116,  272,  399,  267,  399,  116,  266,  269,  270,
      116,  116,  116,  399,  271,  399,  265,  116,  399,  399,
      116,  399,  399,  268,  273,  399,  116,  399,  399,  116,

      116,  116,  272,  399,  116,  399,  399,  269,  270,  274,
      399,  116,  116,  116,  271,  116,  116,  116,  116,  116,
      116,  116,  399,  399,  273,  275,  116,  116,  116,  116,
      116,  116,  277,  399,  116,  116,  116,  116,  399,  274,
      399,  399,  276,  278,  116,  116,  116,  399,  282,  116,
      281,  399,  399,  116,  399,  275,  399,  116,  286,  116,
      116,  116,  277,  399,  116,  399,  399,  116,  116,  116,
      116,  276,  116,  278,  116,  116,  116,  399,  282,  399,
      281,  399,  116,  399,  399,  116,  116,  116,  286,  116,
      116,  116,  287,  116,  116,  116,  399,  116,  399,  289,

      116,  116,  116,  290,  399,  399,  116,  116,  116,  116,
      399,  399,  116,  116,  116,  116,  399,  291,  116,  116,
      116,  399,  287,  116,  399,  399,  399,  116,  399,  289,
      399,  116,  292,  290,  399,  399,  293,  399,  116,  399,
      116,  116,  116,  399,  399,  116,  399,  291,  294,  399,
      399,  116,  116,  116,  116,  399,  116,  116,  116,  116,
      399,  399,  292,  116,  116,  116,  293,  295,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  294,  116,  116,
      116,  116,  399,  116,  116,  116,  399,  399,  299,  399,
      116,  116,  116,  116,  399,  116,  295,  298,  116,  116,

      116,  116,  116,  116,  116,  399,  116,  399,  304,  116,
      301,  399,  116,  399,  399,  302,  399,  116,  299,  399,
      399,  116,  116,  116,  116,  399,  298,  399,  399,  116,
      116,  116,  116,  303,  399,  399,  116,  399,  304,  301,
      116,  399,  306,  399,  399,  302,  116,  116,  116,  305,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  399,
      116,  399,  303,  399,  399,  116,  116,  116,  116,  399,
      399,  308,  306,  399,  399,  307,  399,  399,  305,  116,
      116,  116,  399,  399,  116,  309,  310,  399,  116,  399,
      399,  116,  399,  399,  116,  116,  116,  116,  116,  116,

      116,  308,  399,  116,  307,  116,  116,  116,  399,  399,
      116,  116,  116,  399,  309,  399,  310,  116,  399,  399,
      116,  116,  116,  311,  314,  399,  399,  312,  116,  116,
      116,  399,  313,  116,  399,  399,  116,  116,  116,  116,
      116,  116,  116,  116,  315,  116,  116,  116,  116,  116,
      116,  116,  311,  399,  314,  316,  312,  399,  116,  399,
      399,  313,  399,  322,  399,  317,  116,  116,  116,  116,
      116,  116,  116,  399,  315,  116,  399,  399,  116,  321,
      116,  116,  116,  116,  399,  316,  399,  116,  399,  116,
      116,  116,  399,  322,  399,  317,  399,  324,  116,  116,

      116,  116,  116,  116,  399,  116,  399,  399,  116,  321,
      399,  116,  116,  116,  325,  116,  116,  116,  116,  116,
      116,  116,  399,  399,  326,  399,  324,  116,  116,  116,
      116,  399,  116,  116,  116,  399,  116,  399,  399,  116,
      327,  116,  116,  116,  325,  399,  116,  116,  116,  116,
      399,  399,  399,  116,  326,  332,  399,  116,  333,  116,
      116,  116,  331,  116,  116,  116,  116,  399,  399,  327,
      116,  399,  116,  116,  116,  116,  116,  116,  399,  116,
      399,  399,  334,  399,  116,  332,  336,  399,  333,  337,
      399,  331,  335,  116,  116,  116,  399,  116,  116,  116,

      116,  116,  399,  116,  116,  116,  116,  116,  116,  399,
      116,  399,  334,  116,  399,  399,  336,  399,  399,  337,
      340,  335,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  338,  339,  116,  116,  116,  116,  116,  116,  116,
      343,  116,  399,  399,  116,  399,  399,  344,  399,  399,
      340,  341,  116,  116,  116,  116,  116,  116,  399,  399,
      116,  339,  399,  116,  399,  342,  116,  349,  399,  399,
      343,  116,  399,  399,  399,  116,  399,  344,  399,  399,
      341,  348,  116,  116,  116,  116,  116,  116,  399,  399,
      116,  399,  399,  116,  342,  399,  399,  349,  116,  116,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      348,  350,  116,  116,  116,  116,  116,  116,  399,  399,
      116,  399,  399,  116,  399,  399,  355,  354,  116,  116,
      116,  116,  116,  116,  399,  399,  116,  399,  399,  116,
      399,  350,  116,  399,  399,  116,  116,  116,  116,  399,
      116,  399,  399,  116,  399,  399,  355,  354,  399,  356,
      116,  116,  116,  116,  116,  116,  116,  399,  399,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  399,
      116,  116,  116,  399,  116,  116,  116,  116,  356,  399,
      116,  116,  116,  116,  116,  116,  399,  399,  358,  399,

      399,  116,  116,  116,  116,  116,  116,  116,  116,  359,
      399,  116,  399,  399,  116,  365,  399,  399,  116,  363,
      116,  116,  116,  116,  399,  116,  116,  116,  116,  399,
      399,  116,  116,  116,  116,  116,  116,  116,  359,  369,
      116,  399,  399,  116,  399,  365,  399,  399,  363,  366,
      116,  116,  116,  116,  116,  116,  399,  399,  116,  399,
      399,  399,  399,  116,  399,  399,  399,  399,  399,  369,
      116,  399,  399,  116,  399,  399,  399,  399,  366,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  373,  399,
      399,  116,   71,   71,   71,   71,   71,   71,   71,   71,

       75,   75,   75,   75,   75,   75,   75,   75,   79,   79,
       79,   79,   79,   79,   79,   79,   83,   83,   83,   83,
       83,   83,   83,   83,   87,   87,   87,   87,   87,   87,
       87,   87,   89,   89,   89,   89,   89,   89,   89,   89,
       97,   97,  113,  113,  113,  113,  113,  117,  399,  117,
      117,  117,  160,  399,  160,  160,  160,  160,  160,  160,
      161,  399,  161,  161,  161,  161,  161,  161,  163,  399,
      163,  163,  163,  163,  163,  163,  164,  399,  164,  164,
      164,  164,  164,  164,  165,  399,  165,  165,  165,  165,
      165,  165,  166,  399,  399,  166,  166,  166,  166,  166,

      173,  399,  173,  174,  399,  174,  174,  174,  175,  399,
      175,  175,  175,  177,  399,  177,  177,  177,  116,  399,
      116,  116,  116,  228,  228,  228,  399,  228,  229,  399,
      229,  229,  229,  230,  399,  230,  230,  230,  231,  399,
      231,  231,  231,  279,  399,  279,  279,  279,  232,  399,
      232,  232,  232,  280,  399,  280,  280,  280,  353,  353,
      353,  399,  353,   15,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399
    } ;

static const flex_int16_t yy_chk[2151] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    5,   38,
       95,    6,    7,    8,    9,   10,    9,   10,    7,    8,

       13,   14,   19,   19,   31,   41,   31,   31,   31,   13,
       14,   32,   33,  104,  104,   34,   32,   34,   34,   34,
       95,   52,   52,   52,   19,   33,   93,   93,   33,  170,
      170,   34,  384,  377,   41,  201,   19,    3,    4,    5,
        3,    4,    6,    7,    8,    9,   10,   33,  279,   38,
      231,   44,   44,   44,  235,   33,  230,  177,   33,   52,
       93,   34,   43,   43,   43,  201,   19,  103,  103,  103,
      236,    5,  176,  157,    6,   44,  115,   45,   45,   45,
       46,   46,   46,  235,   19,   42,   42,   42,  253,   44,
       93,   45,   47,   47,   47,   45,   43,   42,  202,  236,

       43,   42,   47,   46,  237,   44,   42,  242,   42,  137,
       47,  114,  137,   42,   42,   45,   47,  253,   46,   47,
       92,   45,   91,   42,   43,   45,   78,   42,  202,   70,
       47,   42,   47,   46,  237,   68,   42,  242,   42,  137,
       47,  137,   42,   42,  254,  283,   47,   65,   47,   48,
       48,   48,   49,   49,   49,   50,   50,   50,   51,   51,
       51,  284,   49,   53,   53,   53,  288,   39,   57,   57,
       57,   97,   97,   97,  254,  283,   48,   53,   50,   37,
      285,   53,   51,   35,   54,   54,   54,   48,   23,  296,
       49,  284,   49,   50,   54,  288,   51,   55,   55,   55,

       17,   53,   56,   56,   56,   48,   57,   53,   50,   97,
      285,   53,   51,  171,  171,  171,   58,   58,   58,  296,
      297,   55,   54,  300,   54,   56,   15,   55,  320,   56,
       58,  105,   56,  105,   12,   55,  105,  105,  105,  318,
       56,  319,  338,   60,   60,   60,  117,  117,  117,  297,
       11,   55,    0,  300,   58,   56,   55,  320,   56,    0,
       58,   56,   59,   59,   59,   62,   62,   62,  328,  318,
       60,  319,  338,   61,   61,   61,   59,    0,  329,   59,
       59,   60,   62,   62,  117,  345,   59,  100,  100,  100,
        0,   59,  119,  119,  119,    0,   61,  328,   61,   60,

       59,  100,    0,   62,    0,    0,   59,  329,  119,   59,
       59,   61,   62,   62,  345,    0,   59,  184,  184,  107,
       59,  107,  107,  107,  259,  259,   61,  346,   61,  352,
      119,  100,  118,  118,  118,  107,    0,    0,  119,  120,
      120,  120,  121,  121,  121,  122,  122,  122,  124,  124,
      124,  123,  123,    0,  184,  121,  346,  122,  259,  352,
      120,  125,  125,  125,    0,  107,  118,  123,  123,  123,
      118,    0,  126,  126,  126,    0,  121,  120,    0,    0,
      121,  358,  125,  122,  184,  121,  124,  122,  259,  125,
      120,  172,  172,  172,  118,  127,  127,  127,  347,  125,

      126,  128,  128,  128,  121,  123,  357,  129,  129,  129,
      126,  358,  125,    0,  128,  130,  130,  130,  125,  131,
      131,  131,    0,  127,  132,  132,  132,  347,  129,  126,
      133,  133,  133,  127,  360,  357,  130,    0,    0,  128,
      133,  134,  134,  134,  128,  129,  131,  361,  132,  136,
      136,  136,  127,  130,  133,    0,  364,  131,  129,    0,
        0,    0,  132,  360,    0,  368,  130,  136,  133,    0,
      133,    0,  134,    0,    0,  131,  361,    0,  132,  134,
      135,  135,  135,  370,  133,  364,  371,  136,  138,  138,
      138,  135,  139,  139,  139,  368,    0,  136,  140,  140,

      140,  134,  141,  141,  141,  143,  143,  143,  135,  135,
      372,  373,  139,  370,  139,  374,  371,  138,  135,    0,
        0,  135,  375,  376,  378,  141,  138,  140,    0,    0,
      139,  141,  142,  142,  142,    0,  140,  135,  135,  372,
      141,  373,  139,  143,  139,  374,  138,    0,  144,  144,
      144,  375,  376,  142,  378,  141,  140,  147,  147,  147,
      141,  144,    0,  145,  145,  145,  148,  148,  148,  380,
      142,  146,  146,  146,  381,  149,  149,  149,  147,  150,
      150,  150,    0,  142,    0,    0,  144,  180,  180,  180,
      148,  144,  145,  146,    0,  147,  146,  149,  380,  383,

      146,  145,    0,  381,  148,  389,  150,    0,  147,  146,
      153,  153,  153,  149,  151,  151,  151,  150,  393,    0,
      148,  145,  394,  146,  151,  180,  146,  149,  383,  146,
      152,  152,  152,  153,  389,  150,  154,  154,  154,  382,
      152,    0,  155,  155,  155,    0,    0,  393,  153,  154,
        0,  394,  151,    0,  151,  386,  155,  169,  169,  169,
      152,    0,    0,  153,  154,  156,  156,  156,  152,  382,
      152,  169,  387,    0,  154,  178,  178,  178,  397,  154,
      155,  179,  179,  179,    0,  386,  155,  178,  156,  152,
      181,  181,  181,  154,  156,  182,  182,  182,  183,  183,

      183,  169,  387,  156,  185,  185,  185,  397,  179,  186,
      186,  186,    0,  178,  187,  187,  187,  178,  156,  179,
      188,  188,  188,  156,  388,  185,  187,  391,  181,    0,
      189,  189,  189,  182,    0,    0,  183,  179,  186,  192,
      192,  192,  185,  190,  190,  190,  392,  186,    0,  188,
      395,    0,  187,    0,  388,  185,  187,  391,  188,  191,
      191,  191,    0,  193,  193,  193,    0,  186,  189,    0,
        0,  190,    0,  194,  194,  194,  392,  192,  188,    0,
      395,  190,  195,  195,  195,  193,    0,    0,  191,  196,
      196,  196,  197,  197,  197,    0,    0,  191,  194,    0,

      190,  193,    0,    0,  198,  198,  198,  196,    0,    0,
        0,  194,  195,    0,    0,  193,  197,  191,  198,    0,
      195,  199,  199,  199,  200,  200,  200,  196,  194,    0,
      197,  203,  203,  203,    0,    0,    0,  196,  204,  204,
      204,  195,  198,    0,    0,  199,  197,  200,  198,  205,
      205,  205,  204,  206,  206,  206,  207,  207,  207,  199,
        0,    0,  200,  208,  208,  206,    0,  205,    0,  203,
      207,  209,  209,  209,    0,  199,  204,  200,    0,  208,
      208,  208,  204,  212,  212,  212,    0,  205,  210,  210,
      210,  206,  209,    0,  207,  206,    0,  205,    0,    0,

      207,    0,  210,  211,  211,  211,    0,  212,    0,  209,
      213,  213,  213,    0,  211,    0,    0,  208,  216,  216,
      216,  212,  209,    0,    0,    0,  210,  214,  214,  214,
        0,  213,  210,  215,  215,  215,    0,  212,  217,  217,
      217,  211,    0,    0,  211,  216,    0,  215,  213,  218,
      218,  218,  219,  219,  219,    0,  216,  214,  221,  221,
      221,  213,    0,  217,    0,  214,  220,  220,  220,    0,
        0,  215,  221,    0,  216,    0,  217,  215,  218,  219,
      222,  222,  222,    0,  220,    0,  214,  218,    0,    0,
      219,    0,    0,  217,  222,    0,  221,    0,    0,  223,

      223,  223,  221,    0,  220,    0,    0,  218,  219,  223,
        0,  224,  224,  224,  220,  225,  225,  225,  222,  226,
      226,  226,    0,    0,  222,  224,  227,  227,  227,  233,
      233,  233,  226,    0,  234,  234,  234,  223,    0,  223,
        0,    0,  225,  227,  238,  238,  238,    0,  234,  224,
      233,    0,    0,  225,    0,  224,    0,  226,  238,  239,
      239,  239,  226,    0,  227,    0,    0,  233,  240,  240,
      240,  225,  234,  227,  241,  241,  241,    0,  234,    0,
      233,    0,  238,    0,    0,  243,  243,  243,  238,  244,
      244,  244,  241,  245,  245,  245,    0,  239,    0,  243,

      246,  246,  246,  244,    0,    0,  240,  247,  247,  247,
        0,    0,  241,  248,  248,  248,    0,  246,  249,  249,
      249,    0,  241,  243,    0,    0,    0,  244,    0,  243,
        0,  245,  247,  244,    0,    0,  248,    0,  246,    0,
      250,  250,  250,    0,    0,  247,    0,  246,  249,    0,
        0,  248,  251,  251,  251,    0,  249,  252,  252,  252,
        0,    0,  247,  255,  255,  255,  248,  250,  256,  256,
      256,  257,  257,  257,  258,  258,  258,  249,  250,  260,
      260,  260,    0,  261,  261,  261,    0,    0,  257,    0,
      251,  262,  262,  262,    0,  252,  250,  256,  264,  264,

      264,  255,  263,  263,  263,    0,  256,    0,  264,  257,
      261,    0,  258,    0,    0,  262,    0,  260,  257,    0,
        0,  261,  265,  265,  265,    0,  256,    0,    0,  262,
      266,  266,  266,  263,    0,    0,  264,    0,  264,  261,
      263,    0,  266,    0,    0,  262,  267,  267,  267,  265,
      268,  268,  268,  269,  269,  269,  270,  270,  270,    0,
      265,    0,  263,    0,    0,  271,  271,  271,  266,    0,
        0,  268,  266,    0,    0,  267,    0,    0,  265,  272,
      272,  272,    0,    0,  267,  270,  271,    0,  268,    0,
        0,  269,    0,    0,  270,  273,  273,  273,  274,  274,

      274,  268,    0,  271,  267,  275,  275,  275,    0,    0,
      276,  276,  276,    0,  270,    0,  271,  272,    0,    0,
      277,  277,  277,  273,  276,    0,    0,  274,  278,  278,
      278,    0,  275,  273,    0,    0,  274,  281,  281,  281,
      287,  287,  287,  275,  277,  289,  289,  289,  276,  282,
      282,  282,  273,    0,  276,  281,  274,    0,  277,    0,
        0,  275,    0,  287,    0,  282,  278,  286,  286,  286,
      290,  290,  290,    0,  277,  281,    0,    0,  287,  286,
      291,  291,  291,  289,    0,  281,    0,  282,    0,  292,
      292,  292,    0,  287,    0,  282,    0,  290,  293,  293,

      293,  294,  294,  294,    0,  286,    0,    0,  290,  286,
        0,  295,  295,  295,  293,  298,  298,  298,  291,  299,
      299,  299,    0,    0,  294,    0,  290,  292,  301,  301,
      301,    0,  302,  302,  302,    0,  293,    0,    0,  294,
      295,  303,  303,  303,  293,    0,  304,  304,  304,  295,
        0,    0,    0,  298,  294,  303,    0,  299,  304,  305,
      305,  305,  302,  306,  306,  306,  301,    0,    0,  295,
      302,    0,  307,  307,  307,  308,  308,  308,    0,  303,
        0,    0,  305,    0,  304,  303,  307,    0,  304,  308,
        0,  302,  306,  309,  309,  309,    0,  305,  310,  310,

      310,  306,    0,  311,  311,  311,  312,  312,  312,    0,
      307,    0,  305,  308,    0,    0,  307,    0,    0,  308,
      312,  306,  313,  313,  313,  314,  314,  314,  316,  316,
      316,  309,  311,  315,  315,  315,  310,  317,  317,  317,
      316,  311,    0,    0,  312,    0,    0,  317,    0,    0,
      312,  313,  321,  321,  321,  322,  322,  322,    0,    0,
      313,  311,    0,  314,    0,  315,  316,  322,    0,    0,
      316,  315,    0,    0,    0,  317,    0,  317,    0,    0,
      313,  321,  324,  324,  324,  325,  325,  325,    0,    0,
      321,    0,    0,  322,  315,    0,    0,  322,  326,  326,

      326,  327,  327,  327,  331,  331,  331,  332,  332,  332,
      321,  326,  333,  333,  333,  334,  334,  334,    0,    0,
      324,    0,    0,  325,    0,    0,  333,  331,  335,  335,
      335,  336,  336,  336,    0,    0,  326,    0,    0,  327,
        0,  326,  331,    0,    0,  332,  337,  337,  337,    0,
      333,    0,    0,  334,    0,    0,  333,  331,    0,  336,
      339,  339,  339,  340,  340,  340,  335,    0,    0,  336,
      341,  341,  341,  342,  342,  342,  343,  343,  343,    0,
      344,  344,  344,    0,  337,  348,  348,  348,  336,    0,
      349,  349,  349,  350,  350,  350,    0,    0,  339,    0,

        0,  340,  354,  354,  354,  355,  355,  355,  341,  344,
        0,  342,    0,    0,  343,  354,    0,    0,  344,  349,
      356,  356,  356,  348,    0,  359,  359,  359,  349,    0,
        0,  350,  363,  363,  363,  365,  365,  365,  344,  359,
      354,    0,    0,  355,    0,  354,    0,    0,  349,  356,
      366,  366,  366,  369,  369,  369,    0,    0,  356,    0,
        0,    0,    0,  359,    0,    0,    0,    0,    0,  359,
      363,    0,    0,  365,    0,    0,    0,    0,  356,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  366,    0,
        0,  369,  400,  400,  400,  400,  400,  400,  400,  400,

      401,  401,  401,  401,  401,  401,  401,  401,  402,  402,
      402,  402,  402,  402,  402,  402,  403,  403,  403,  403,
      403,  403,  403,  403,  404,  404,  404,  404,  404,  404,
      404,  404,  405,  405,  405,  405,  405,  405,  405,  405,
      406,  406,  407,  407,  407,  407,  407,  408,    0,  408,
      408,  408,  409,    0,  409,  409,  409,  409,  409,  409,
      410,    0,  410,  410,  410,  410,  410,  410,  411,    0,
      411,  411,  411,  411,  411,  411,  412,    0,  412,  412,
      412,  412,  412,  412,  413,    0,  413,  413,  413,  413,
      413,  413,  414,    0,    0,  414,  414,  414,  414,  414,

      415,    0,  415,  416,    0,  416,  416,  416,  417,    0,
      417,  417,  417,  418,    0,  418,  418,  418,  419,    0,
      419,  419,  419,  420,  420,  420,    0,  420,  421,    0,
      421,  421,  421,  422,    0,  422,  422,  422,  423,    0,
      423,  423,  423,  424,    0,  424,  424,  424,  425,    0,
      425,  425,  425,  426,    0,  426,  426,  426,  427,  427,
      427,    0,  427,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399
    } ;


/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[130] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 1, 0, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET







#include "Basics/Common.h"
#include "Basics/NumberUtils.h"
#include "Basics/conversions.h"
#include "Basics/operating-system.h"

// introduce the namespace here, otherwise following references to
// the namespace in auto-generated headers might fail

namespace arangodb {
namespace aql {
class QueryContext;
class Parser;
}
}

#include "Aql/AstNode.h"
#include "Aql/grammar.hpp"
#include "Aql/Functions.h"
#include "Aql/Parser.h"
#include "Aql/QueryContext.h"

#define YY_EXTRA_TYPE arangodb::aql::Parser*

#define YY_USER_ACTION                                                   \
  yylloc->first_line = static_cast<int>(yylineno);                       \
  yylloc->first_column = static_cast<int>(yycolumn);                     \
  yylloc->last_column = static_cast<int>(yycolumn + yyleng - 1);         \
  yycolumn += static_cast<int>(yyleng);                                  \
  yyextra->increaseOffset(yyleng);

#define YY_NO_INPUT 1

#define YY_INPUT(resultBuffer, resultState, maxBytesToRead) {            \
  size_t length = std::min(yyextra->remainingLength(), static_cast<size_t>(maxBytesToRead));  \
  if (length > 0) {                                                      \
    yyextra->fillBuffer(resultBuffer, length);                           \
    resultState = length;                                                \
  } else {                                                               \
    resultState = YY_NULL;                                               \
  }                                                                      \
}



#define INITIAL 0
#define BACKTICK 1
#define FORWARDTICK 2
#define SINGLE_QUOTE 3
#define DOUBLE_QUOTE 4
#define COMMENT_SINGLE 5
#define COMMENT_MULTI 6




#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif





/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;




    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;



    YYSTYPE * yylval_r;



    YYLTYPE * yylloc_r;


    }; /* end struct yyguts_t */




static int yy_init_globals ( yyscan_t yyscanner );




    
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    

    
    #    define yylloc yyg->yylloc_r
    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);



/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );




YYSTYPE * yyget_lval ( yyscan_t yyscanner );


void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );


    
       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    

    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1






        
    
    



    
    
    


extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;




    yylval = yylval_param;



    yylloc = yylloc_param;


	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif



		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{


 /* ---------------------------------------------------------------------------
  * language keywords
  * --------------------------------------------------------------------------- */


	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 400 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 399 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
  return T_FOR;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  return T_LET;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
  return T_FILTER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
  return T_RETURN;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  return T_COLLECT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  return T_SORT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  return T_LIMIT;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  return T_WINDOW;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  return T_DISTINCT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
  return T_AGGREGATE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  return T_ASC;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  return T_DESC;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
  return T_NOT_IN;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  return T_NOT;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  return T_AND;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  return T_OR;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  return T_IN;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  return T_INTO;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  return T_WITH;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  return T_REMOVE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  return T_INSERT;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  return T_UPDATE;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  return T_REPLACE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return T_UPSERT;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return T_GRAPH;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return T_SHORTEST_PATH;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return T_K_SHORTEST_PATHS;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return T_ALL_SHORTEST_PATHS;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return T_K_PATHS;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return T_OUTBOUND;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return T_INBOUND;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return T_ANY;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return T_ALL;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return T_NONE;
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
  return T_AT_LEAST;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  return T_LIKE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * SQL language keywords
  * --------------------------------------------------------------------------- */
case 37:
YY_RULE_SETUP
{
  return T_SELECT;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return T_FROM;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return T_AS;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return T_WHERE;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return T_GROUP;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return T_ORDER;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return T_BY;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return T_HAVING;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return T_UNNEST;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return T_JOIN;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return T_ON;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return T_UNNEST_ALL;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return T_MATCH;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return T_START_AS;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return T_END_AS;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return T_TRAIL;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return T_ACYCLIC;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  return T_SIMPLE;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return T_ANY_SHORTEST;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return T_COST;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * predefined type literals
  * --------------------------------------------------------------------------- */
case 57:
YY_RULE_SETUP
{
  return T_NULL;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return T_TRUE;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return T_FALSE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * operators
  * --------------------------------------------------------------------------- */
case 60:
YY_RULE_SETUP
{
  return T_REGEX_MATCH;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return T_REGEX_NON_MATCH;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return T_EQ;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return T_NE;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return T_GE;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  return T_GT;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  return T_LE;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  return T_LT;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  return T_ASSIGN;
}
	YY_BREAK
case 69:
/* rule 69 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
  return T_NOT_IN;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  return T_NOT;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  return T_AND;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  return T_OR;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  return T_PLUS;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  return T_MINUS;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  return T_TIMES;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  return T_DIV;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  return T_MOD;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  return T_QUESTION;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  return T_SCOPE;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
  return T_COLON;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
  return T_RANGE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * punctuation
  * --------------------------------------------------------------------------- */
case 82:
YY_RULE_SETUP
{
  return T_COMMA;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
  return T_OPEN;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
  return T_CLOSE;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
  return T_OBJECT_OPEN;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
  return T_OBJECT_CLOSE;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
  return T_ARRAY_OPEN;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
  return T_ARRAY_CLOSE;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
  return T_SEMICOLON;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
  return T_DOLLAR;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * identifiers
  * --------------------------------------------------------------------------- */
case 91:
YY_RULE_SETUP
{
  /* unquoted string */
  yylval->strval.value = yyextra->ast()->resources().registerString(yytext, yyleng);
  yylval->strval.length = yyleng;
  return T_STRING;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
  /* string enclosed in backticks */
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(BACKTICK);
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
  /* end of backtick-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->ast()->resources().registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 1, outLength);
  yylval->strval.length = outLength;
  return T_STRING;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{
  /* newline character inside backtick */
}
	YY_BREAK
case YY_STATE_EOF(BACKTICK):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated identifier", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 96:
YY_RULE_SETUP
{
  /* any character (except newline) inside backtick */
}
	YY_BREAK
case 97:
YY_RULE_SETUP
{
  /* string enclosed in forwardticks */
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(FORWARDTICK);
}
	YY_BREAK
case 98:
YY_RULE_SETUP
{
  /* end of forwardtick-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->ast()->resources().registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 2, outLength);
  yylval->strval.length = outLength;
  return T_STRING;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
  /* newline character inside forwardtick */
}
	YY_BREAK
case YY_STATE_EOF(FORWARDTICK):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated identifier", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 101:
YY_RULE_SETUP
{
  /* any character (except newline) inside forwardtick */
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * strings
  * --------------------------------------------------------------------------- */
case 102:
YY_RULE_SETUP
{
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(DOUBLE_QUOTE);
}
	YY_BREAK
case 103:
YY_RULE_SETUP
{
  /* end of quote-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->ast()->resources().registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 1, outLength);
  yylval->strval.length = outLength;
  return T_QUOTED_STRING;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
  /* newline character inside quote */
}
	YY_BREAK
case YY_STATE_EOF(DOUBLE_QUOTE):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated string literal", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 106:
YY_RULE_SETUP
{
  /* any character (except newline) inside quote */
}
	YY_BREAK
case 107:
YY_RULE_SETUP
{
  yyextra->marker(yyextra->queryStringStart() + yyextra->offset());
  BEGIN(SINGLE_QUOTE);
}
	YY_BREAK
case 108:
YY_RULE_SETUP
{
  /* end of quote-enclosed string */
  BEGIN(INITIAL);
  size_t outLength;
  yylval->strval.value = yyextra->ast()->resources().registerEscapedString(yyextra->marker(), yyextra->offset() - (yyextra->marker() - yyextra->queryStringStart()) - 1, outLength);
  yylval->strval.length = outLength;
  return T_QUOTED_STRING;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
{
  /* character escaped by backslash */
}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{
  /* newline character inside quote */
}
	YY_BREAK
case YY_STATE_EOF(SINGLE_QUOTE):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated string literal", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 111:
YY_RULE_SETUP
{
  /* any character (except newline) inside quote */
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * number literals
  * --------------------------------------------------------------------------- */
case 112:
YY_RULE_SETUP
{
  /* a numeric integer value, base 10 (decimal) */
  arangodb::aql::AstNode* node = nullptr;
  auto parser = yyextra;

  bool valid;
  int64_t value1 = arangodb::NumberUtils::atoi<int64_t>(yytext, yytext + yyleng, valid);

  if (valid) {
    node = parser->ast()->createNodeValueInt(value1);
  } else {
    // TODO: use std::from_chars
    double value2 = TRI_DoubleString(yytext);

    if (TRI_errno() != TRI_ERROR_NO_ERROR) {
      parser->registerWarning(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE, TRI_errno_string(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE), yylloc->first_line, yylloc->first_column);
      node = parser->ast()->createNodeValueNull();
    } else {
      node = parser->ast()->createNodeValueDouble(value2);
    }
  }

  yylval->node = node;

  return T_INTEGER;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
{
  /* a numeric integer value, base 2 (binary) */
  /* note that we support an arbitrary run of leading zeroes for the actual number */

  /* cut off first 2 characters */
  char const* p = yytext + 2;
  char const* e = yytext + yyleng;

  auto parser = yyextra;
  if (static_cast<uint64_t>(e - p) > arangodb::aql::functions::bitFunctionsMaxSupportedBits) {
    /* we only support up to 32 bits for now */
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "binary number literal value exceeds the supported range", yylloc->first_line, yylloc->first_column);
  }
  
  uint64_t result = 0;

  while (p != e) {
    char c = *p;
    if (c == '1') {
      /* only the 1s are interesting for us */
      result += (static_cast<uint64_t>(1) << (e - p - 1));
    }
    ++p;
  }
  
  TRI_ASSERT(result <= UINT32_MAX);
  
  arangodb::aql::AstNode* node = parser->ast()->createNodeValueInt(static_cast<int64_t>(result));
  yylval->node = node;

  return T_INTEGER;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
{
  /* a numeric integer value, base 16 (hexadecimal) */
  /* note that we support an arbitrary run of leading zeroes for the actual number */

  /* cut off first 2 characters */
  char const* p = yytext + 2;
  char const* e = yytext + yyleng;

  auto parser = yyextra;
  /* each digit 0-9a-f carries 4 bits of information */
  if (static_cast<uint64_t>(e - p) > arangodb::aql::functions::bitFunctionsMaxSupportedBits / 4) {
    /* we only support up to 32 bits for now */
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "hex number literal value exceeds the supported range", yylloc->first_line, yylloc->first_column);
  }
  
  uint64_t result = 0;
  
  while (p != e) {
    uint8_t v;
    char c = *p;
    if (c >= 'A' && c <= 'F') {
      v = c - 'A' + 10;
    } else if (c >= 'a' && c <= 'f') {
      v = c - 'a' + 10;
    } else {
      v = c - '0';
    }
    result += (static_cast<uint64_t>(v) << (4 * (e - p - 1)));
    ++p;
  }

  TRI_ASSERT(result <= UINT32_MAX);

  arangodb::aql::AstNode* node = parser->ast()->createNodeValueInt(static_cast<int64_t>(result));
  yylval->node = node;

  return T_INTEGER;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
{
  /* a numeric double value, base 10 (decimal) */

  arangodb::aql::AstNode* node = nullptr;
  auto parser = yyextra;
  // TODO: use std::from_chars
  double value = TRI_DoubleString(yytext);

  if (TRI_errno() != TRI_ERROR_NO_ERROR) {
    parser->registerWarning(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE, TRI_errno_string(TRI_ERROR_QUERY_NUMBER_OUT_OF_RANGE), yylloc->first_line, yylloc->first_column);
    node = parser->ast()->createNodeValueNull();
  } else {
    node = parser->ast()->createNodeValueDouble(value);
  }

  yylval->node = node;

  return T_DOUBLE;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * bind parameters
  * --------------------------------------------------------------------------- */
case 116:
YY_RULE_SETUP
{
  /* bind parameters must start with a @
     if followed by another @, this is a collection name or a view name parameter */
  yylval->strval.value = yyextra->ast()->resources().registerString(yytext + 1, yyleng - 1);
  yylval->strval.length = yyleng - 1;
  return T_PARAMETER;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * bind data source parameters
  * --------------------------------------------------------------------------- */
case 117:
YY_RULE_SETUP
{
  /* bind parameters must start with a @
     if followed by another @, this is a collection name or a view name parameter */
  yylval->strval.value = yyextra->ast()->resources().registerString(yytext + 1, yyleng - 1);
  yylval->strval.length = yyleng - 1;
  return T_DATA_SOURCE_PARAMETER;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * whitespace etc.
  * --------------------------------------------------------------------------- */
case 118:
YY_RULE_SETUP
{
  /* whitespace is ignored */
}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{
  yycolumn = 0;
}
	YY_BREAK
/* ---------------------------------------------------------------------------
  * comments
  * --------------------------------------------------------------------------- */
case 120:
YY_RULE_SETUP
{
  BEGIN(COMMENT_SINGLE);
}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{
  /* line numbers are counted elsewhere already */
  yycolumn = 0;
  BEGIN(INITIAL);
}
	YY_BREAK
case 122:
YY_RULE_SETUP
{
  /* everything else */
}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
  BEGIN(COMMENT_MULTI);
}
	YY_BREAK
case 124:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
}
	YY_BREAK
case 125:
YY_RULE_SETUP
{
  // eat comment in chunks
}
	YY_BREAK
case 126:
YY_RULE_SETUP
{
  // eat the lone star
}
	YY_BREAK
case YY_STATE_EOF(COMMENT_MULTI):
{
  auto parser = yyextra;
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected unterminated multi-line comment", yylloc->first_line, yylloc->first_column);
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{
  /* line numbers are counted elsewhere already */
  yycolumn = 0;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
{
  /* anything else is returned as it is */
  return (int) yytext[0];
}
	YY_BREAK
case 129:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT_SINGLE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */





/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 400 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 400 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 399);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }


    
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}





/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}




/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}




/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}



/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}



/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}



/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}


/* Accessor methods for yylval and yylloc */


YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}



void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}



    
YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    

    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    




/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}


static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;






/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;




    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


#define YYTABLES_NAME "yytables"








