/* clang-format off */
/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs

/* First part of user prologue.  */
#line 9 "grammar.y"

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/QueryContext.h"
#include "Aql/types.h"
#include "Basics/StaticStrings.h"
#include "Basics/StringUtils.h"
#include "Containers/HashSet.h"
#include "Containers/SmallVector.h"
#include "Graph/PathType.h"
#include "VocBase/AccessMode.h"

#include <absl/strings/str_cat.h>

#include <algorithm>
#include <cstdint>
#include <string>
#include <string_view>


#line 113 "grammar.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "grammar.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of query string"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_T_FOR = 3,                      /* "FOR declaration"  */
  YYSYMBOL_T_LET = 4,                      /* "LET declaration"  */
  YYSYMBOL_T_FILTER = 5,                   /* "FILTER declaration"  */
  YYSYMBOL_T_RETURN = 6,                   /* "RETURN declaration"  */
  YYSYMBOL_T_COLLECT = 7,                  /* "COLLECT declaration"  */
  YYSYMBOL_T_SORT = 8,                     /* "SORT declaration"  */
  YYSYMBOL_T_LIMIT = 9,                    /* "LIMIT declaration"  */
  YYSYMBOL_T_WINDOW = 10,                  /* "WINDOW declaration"  */
  YYSYMBOL_T_ASC = 11,                     /* "ASC keyword"  */
  YYSYMBOL_T_DESC = 12,                    /* "DESC keyword"  */
  YYSYMBOL_T_IN = 13,                      /* "IN keyword"  */
  YYSYMBOL_T_WITH = 14,                    /* "WITH keyword"  */
  YYSYMBOL_T_INTO = 15,                    /* "INTO keyword"  */
  YYSYMBOL_T_AGGREGATE = 16,               /* "AGGREGATE keyword"  */
  YYSYMBOL_T_GRAPH = 17,                   /* "GRAPH keyword"  */
  YYSYMBOL_T_SHORTEST_PATH = 18,           /* "SHORTEST_PATH keyword"  */
  YYSYMBOL_T_K_SHORTEST_PATHS = 19,        /* "K_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_K_PATHS = 20,                 /* "K_PATHS keyword"  */
  YYSYMBOL_T_ALL_SHORTEST_PATHS = 21,      /* "ALL_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_DISTINCT = 22,                /* "DISTINCT modifier"  */
  YYSYMBOL_T_REMOVE = 23,                  /* "REMOVE command"  */
  YYSYMBOL_T_INSERT = 24,                  /* "INSERT command"  */
  YYSYMBOL_T_UPDATE = 25,                  /* "UPDATE command"  */
  YYSYMBOL_T_REPLACE = 26,                 /* "REPLACE command"  */
  YYSYMBOL_T_UPSERT = 27,                  /* "UPSERT command"  */
  YYSYMBOL_T_NULL = 28,                    /* "null"  */
  YYSYMBOL_T_TRUE = 29,                    /* "true"  */
  YYSYMBOL_T_FALSE = 30,                   /* "false"  */
  YYSYMBOL_T_STRING = 31,                  /* "identifier"  */
  YYSYMBOL_T_QUOTED_STRING = 32,           /* "quoted string"  */
  YYSYMBOL_T_INTEGER = 33,                 /* "integer number"  */
  YYSYMBOL_T_DOUBLE = 34,                  /* "number"  */
  YYSYMBOL_T_PARAMETER = 35,               /* "bind parameter"  */
  YYSYMBOL_T_DATA_SOURCE_PARAMETER = 36,   /* "bind data source parameter"  */
  YYSYMBOL_T_ASSIGN = 37,                  /* "assignment"  */
  YYSYMBOL_T_NOT = 38,                     /* "not operator"  */
  YYSYMBOL_T_AND = 39,                     /* "and operator"  */
  YYSYMBOL_T_OR = 40,                      /* "or operator"  */
  YYSYMBOL_T_NOT_IN = 41,                  /* "not in operator"  */
  YYSYMBOL_T_REGEX_MATCH = 42,             /* "~= operator"  */
  YYSYMBOL_T_REGEX_NON_MATCH = 43,         /* "~! operator"  */
  YYSYMBOL_T_EQ = 44,                      /* "== operator"  */
  YYSYMBOL_T_NE = 45,                      /* "!= operator"  */
  YYSYMBOL_T_LT = 46,                      /* "< operator"  */
  YYSYMBOL_T_GT = 47,                      /* "> operator"  */
  YYSYMBOL_T_LE = 48,                      /* "<= operator"  */
  YYSYMBOL_T_GE = 49,                      /* ">= operator"  */
  YYSYMBOL_T_LIKE = 50,                    /* "like operator"  */
  YYSYMBOL_T_PLUS = 51,                    /* "+ operator"  */
  YYSYMBOL_T_MINUS = 52,                   /* "- operator"  */
  YYSYMBOL_T_TIMES = 53,                   /* "* operator"  */
  YYSYMBOL_T_DIV = 54,                     /* "/ operator"  */
  YYSYMBOL_T_MOD = 55,                     /* "% operator"  */
  YYSYMBOL_T_QUESTION = 56,                /* "?"  */
  YYSYMBOL_T_COLON = 57,                   /* ":"  */
  YYSYMBOL_T_SCOPE = 58,                   /* "::"  */
  YYSYMBOL_T_RANGE = 59,                   /* ".."  */
  YYSYMBOL_T_COMMA = 60,                   /* ","  */
  YYSYMBOL_T_OPEN = 61,                    /* "("  */
  YYSYMBOL_T_CLOSE = 62,                   /* ")"  */
  YYSYMBOL_T_OBJECT_OPEN = 63,             /* "{"  */
  YYSYMBOL_T_OBJECT_CLOSE = 64,            /* "}"  */
  YYSYMBOL_T_ARRAY_OPEN = 65,              /* "["  */
  YYSYMBOL_T_ARRAY_CLOSE = 66,             /* "]"  */
  YYSYMBOL_T_SEMICOLON = 67,               /* ";"  */
  YYSYMBOL_T_OUTBOUND = 68,                /* "outbound modifier"  */
  YYSYMBOL_T_INBOUND = 69,                 /* "inbound modifier"  */
  YYSYMBOL_T_ANY = 70,                     /* "any modifier"  */
  YYSYMBOL_T_ALL = 71,                     /* "all modifier"  */
  YYSYMBOL_T_NONE = 72,                    /* "none modifier"  */
  YYSYMBOL_T_AT_LEAST = 73,                /* "at least modifier"  */
  YYSYMBOL_T_SELECT = 74,                  /* "select"  */
  YYSYMBOL_T_FROM = 75,                    /* "from"  */
  YYSYMBOL_T_AS = 76,                      /* "as"  */
  YYSYMBOL_T_WHERE = 77,                   /* "where"  */
  YYSYMBOL_T_GROUP = 78,                   /* "group"  */
  YYSYMBOL_T_ORDER = 79,                   /* "order"  */
  YYSYMBOL_T_BY = 80,                      /* "by"  */
  YYSYMBOL_T_HAVING = 81,                  /* "having"  */
  YYSYMBOL_T_UNNEST = 82,                  /* "unnest"  */
  YYSYMBOL_T_UNNEST_ALL = 83,              /* "unnest_all"  */
  YYSYMBOL_T_DOLLAR = 84,                  /* "$"  */
  YYSYMBOL_T_JOIN = 85,                    /* "join"  */
  YYSYMBOL_T_ON = 86,                      /* "on"  */
  YYSYMBOL_WITH_COLLECTION_LIST = 87,      /* WITH_COLLECTION_LIST  */
  YYSYMBOL_UMINUS = 88,                    /* UMINUS  */
  YYSYMBOL_UPLUS = 89,                     /* UPLUS  */
  YYSYMBOL_UNEGATION = 90,                 /* UNEGATION  */
  YYSYMBOL_FUNCCALL = 91,                  /* FUNCCALL  */
  YYSYMBOL_REFERENCE = 92,                 /* REFERENCE  */
  YYSYMBOL_INDEXED = 93,                   /* INDEXED  */
  YYSYMBOL_EXPANSION = 94,                 /* EXPANSION  */
  YYSYMBOL_95_ = 95,                       /* '.'  */
  YYSYMBOL_YYACCEPT = 96,                  /* $accept  */
  YYSYMBOL_optional_prune_variable = 97,   /* optional_prune_variable  */
  YYSYMBOL_with_collection = 98,           /* with_collection  */
  YYSYMBOL_with_collection_list = 99,      /* with_collection_list  */
  YYSYMBOL_optional_with = 100,            /* optional_with  */
  YYSYMBOL_with_key = 101,                 /* with_key  */
  YYSYMBOL_queryStart = 102,               /* queryStart  */
  YYSYMBOL_query = 103,                    /* query  */
  YYSYMBOL_aql_statements = 104,           /* aql_statements  */
  YYSYMBOL_final_statement = 105,          /* final_statement  */
  YYSYMBOL_optional_statement_block_statements = 106, /* optional_statement_block_statements  */
  YYSYMBOL_statement_block_statement = 107, /* statement_block_statement  */
  YYSYMBOL_more_output_variables = 108,    /* more_output_variables  */
  YYSYMBOL_for_output_variables = 109,     /* for_output_variables  */
  YYSYMBOL_prune_and_options = 110,        /* prune_and_options  */
  YYSYMBOL_traversal_graph_info = 111,     /* traversal_graph_info  */
  YYSYMBOL_shortest_path_graph_info = 112, /* shortest_path_graph_info  */
  YYSYMBOL_k_shortest_paths_graph_info = 113, /* k_shortest_paths_graph_info  */
  YYSYMBOL_k_paths_graph_info = 114,       /* k_paths_graph_info  */
  YYSYMBOL_all_shortest_paths_graph_info = 115, /* all_shortest_paths_graph_info  */
  YYSYMBOL_for_statement = 116,            /* for_statement  */
  YYSYMBOL_117_1 = 117,                    /* $@1  */
  YYSYMBOL_118_2 = 118,                    /* $@2  */
  YYSYMBOL_filter_statement = 119,         /* filter_statement  */
  YYSYMBOL_let_statement = 120,            /* let_statement  */
  YYSYMBOL_let_list = 121,                 /* let_list  */
  YYSYMBOL_let_element = 122,              /* let_element  */
  YYSYMBOL_count_into = 123,               /* count_into  */
  YYSYMBOL_collect_variable_list = 124,    /* collect_variable_list  */
  YYSYMBOL_125_3 = 125,                    /* $@3  */
  YYSYMBOL_collect_statement = 126,        /* collect_statement  */
  YYSYMBOL_collect_list = 127,             /* collect_list  */
  YYSYMBOL_collect_element = 128,          /* collect_element  */
  YYSYMBOL_collect_optional_into = 129,    /* collect_optional_into  */
  YYSYMBOL_variable_list = 130,            /* variable_list  */
  YYSYMBOL_keep = 131,                     /* keep  */
  YYSYMBOL_132_4 = 132,                    /* $@4  */
  YYSYMBOL_aggregate = 133,                /* aggregate  */
  YYSYMBOL_134_5 = 134,                    /* $@5  */
  YYSYMBOL_aggregate_list = 135,           /* aggregate_list  */
  YYSYMBOL_aggregate_element = 136,        /* aggregate_element  */
  YYSYMBOL_aggregate_function_call = 137,  /* aggregate_function_call  */
  YYSYMBOL_138_6 = 138,                    /* $@6  */
  YYSYMBOL_sort_statement = 139,           /* sort_statement  */
  YYSYMBOL_140_7 = 140,                    /* $@7  */
  YYSYMBOL_sort_list = 141,                /* sort_list  */
  YYSYMBOL_sort_element = 142,             /* sort_element  */
  YYSYMBOL_sort_direction = 143,           /* sort_direction  */
  YYSYMBOL_limit_statement = 144,          /* limit_statement  */
  YYSYMBOL_window_statement = 145,         /* window_statement  */
  YYSYMBOL_return_statement = 146,         /* return_statement  */
  YYSYMBOL_in_or_into_collection = 147,    /* in_or_into_collection  */
  YYSYMBOL_remove_statement = 148,         /* remove_statement  */
  YYSYMBOL_insert_statement = 149,         /* insert_statement  */
  YYSYMBOL_update_parameters = 150,        /* update_parameters  */
  YYSYMBOL_update_statement = 151,         /* update_statement  */
  YYSYMBOL_replace_parameters = 152,       /* replace_parameters  */
  YYSYMBOL_replace_statement = 153,        /* replace_statement  */
  YYSYMBOL_update_or_replace = 154,        /* update_or_replace  */
  YYSYMBOL_upsert_input = 155,             /* upsert_input  */
  YYSYMBOL_upsert_statement = 156,         /* upsert_statement  */
  YYSYMBOL_157_8 = 157,                    /* $@8  */
  YYSYMBOL_158_9 = 158,                    /* $@9  */
  YYSYMBOL_159_10 = 159,                   /* $@10  */
  YYSYMBOL_quantifier = 160,               /* quantifier  */
  YYSYMBOL_distinct_expression = 161,      /* distinct_expression  */
  YYSYMBOL_162_11 = 162,                   /* $@11  */
  YYSYMBOL_expression = 163,               /* expression  */
  YYSYMBOL_function_name = 164,            /* function_name  */
  YYSYMBOL_function_call = 165,            /* function_call  */
  YYSYMBOL_166_12 = 166,                   /* $@12  */
  YYSYMBOL_167_13 = 167,                   /* $@13  */
  YYSYMBOL_operator_unary = 168,           /* operator_unary  */
  YYSYMBOL_operator_binary = 169,          /* operator_binary  */
  YYSYMBOL_operator_ternary = 170,         /* operator_ternary  */
  YYSYMBOL_optional_function_call_arguments = 171, /* optional_function_call_arguments  */
  YYSYMBOL_function_arguments_list = 172,  /* function_arguments_list  */
  YYSYMBOL_compound_value = 173,           /* compound_value  */
  YYSYMBOL_array = 174,                    /* array  */
  YYSYMBOL_175_14 = 175,                   /* $@14  */
  YYSYMBOL_optional_array_elements = 176,  /* optional_array_elements  */
  YYSYMBOL_array_elements_list = 177,      /* array_elements_list  */
  YYSYMBOL_array_element = 178,            /* array_element  */
  YYSYMBOL_for_options = 179,              /* for_options  */
  YYSYMBOL_options = 180,                  /* options  */
  YYSYMBOL_object = 181,                   /* object  */
  YYSYMBOL_182_15 = 182,                   /* $@15  */
  YYSYMBOL_optional_object_elements = 183, /* optional_object_elements  */
  YYSYMBOL_object_elements_list = 184,     /* object_elements_list  */
  YYSYMBOL_object_element = 185,           /* object_element  */
  YYSYMBOL_array_filter_operator = 186,    /* array_filter_operator  */
  YYSYMBOL_array_map_operator = 187,       /* array_map_operator  */
  YYSYMBOL_optional_array_filter = 188,    /* optional_array_filter  */
  YYSYMBOL_optional_array_limit = 189,     /* optional_array_limit  */
  YYSYMBOL_optional_array_return = 190,    /* optional_array_return  */
  YYSYMBOL_graph_collection = 191,         /* graph_collection  */
  YYSYMBOL_graph_collection_list = 192,    /* graph_collection_list  */
  YYSYMBOL_graph_subject = 193,            /* graph_subject  */
  YYSYMBOL_194_16 = 194,                   /* $@16  */
  YYSYMBOL_graph_direction = 195,          /* graph_direction  */
  YYSYMBOL_graph_direction_steps = 196,    /* graph_direction_steps  */
  YYSYMBOL_reference = 197,                /* reference  */
  YYSYMBOL_198_17 = 198,                   /* $@17  */
  YYSYMBOL_199_18 = 199,                   /* $@18  */
  YYSYMBOL_200_19 = 200,                   /* $@19  */
  YYSYMBOL_201_20 = 201,                   /* $@20  */
  YYSYMBOL_ndarray_expression_list = 202,  /* ndarray_expression_list  */
  YYSYMBOL_ndarray_expression = 203,       /* ndarray_expression  */
  YYSYMBOL_range_index = 204,              /* range_index  */
  YYSYMBOL_expression_or_none = 205,       /* expression_or_none  */
  YYSYMBOL_interval_element = 206,         /* interval_element  */
  YYSYMBOL_simple_value = 207,             /* simple_value  */
  YYSYMBOL_numeric_value = 208,            /* numeric_value  */
  YYSYMBOL_value_literal = 209,            /* value_literal  */
  YYSYMBOL_in_or_into_collection_name = 210, /* in_or_into_collection_name  */
  YYSYMBOL_bind_parameter = 211,           /* bind_parameter  */
  YYSYMBOL_bind_parameter_datasource_expected = 212, /* bind_parameter_datasource_expected  */
  YYSYMBOL_object_element_name = 213,      /* object_element_name  */
  YYSYMBOL_variable_name = 214,            /* variable_name  */
  YYSYMBOL_sql_statements = 215,           /* sql_statements  */
  YYSYMBOL_216_21 = 216,                   /* $@21  */
  YYSYMBOL_217_22 = 217,                   /* $@22  */
  YYSYMBOL_218_23 = 218,                   /* $@23  */
  YYSYMBOL_with_statements = 219,          /* with_statements  */
  YYSYMBOL_with_list = 220,                /* with_list  */
  YYSYMBOL_with_element = 221,             /* with_element  */
  YYSYMBOL_from_statements = 222,          /* from_statements  */
  YYSYMBOL_collection_pair_list = 223,     /* collection_pair_list  */
  YYSYMBOL_collection_element = 224,       /* collection_element  */
  YYSYMBOL_collection_pair = 225,          /* collection_pair  */
  YYSYMBOL_226_24 = 226,                   /* $@24  */
  YYSYMBOL_227_25 = 227,                   /* $@25  */
  YYSYMBOL_unnest_statement = 228,         /* unnest_statement  */
  YYSYMBOL_229_26 = 229,                   /* $@26  */
  YYSYMBOL_expression_list = 230,          /* expression_list  */
  YYSYMBOL_expression_element = 231,       /* expression_element  */
  YYSYMBOL_optional_axis_name_list = 232,  /* optional_axis_name_list  */
  YYSYMBOL_axis_name_list = 233,           /* axis_name_list  */
  YYSYMBOL_axis_name = 234,                /* axis_name  */
  YYSYMBOL_distinct_label = 235,           /* distinct_label  */
  YYSYMBOL_select_list = 236,              /* select_list  */
  YYSYMBOL_select_element = 237,           /* select_element  */
  YYSYMBOL_where_statements = 238,         /* where_statements  */
  YYSYMBOL_group_by_statements = 239,      /* group_by_statements  */
  YYSYMBOL_240_27 = 240,                   /* $@27  */
  YYSYMBOL_group_by_variable_list = 241,   /* group_by_variable_list  */
  YYSYMBOL_242_28 = 242,                   /* $@28  */
  YYSYMBOL_group_by_list = 243,            /* group_by_list  */
  YYSYMBOL_group_by_element = 244,         /* group_by_element  */
  YYSYMBOL_having_statements = 245,        /* having_statements  */
  YYSYMBOL_order_by_statements = 246,      /* order_by_statements  */
  YYSYMBOL_247_29 = 247,                   /* $@29  */
  YYSYMBOL_limit_statements = 248          /* limit_statements  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;


/* Second part of user prologue.  */
#line 56 "grammar.y"

#include <iostream>
using namespace arangodb::aql;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);

/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp,
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

namespace {
  struct strval {
  char*                  value;
  size_t                 length;
  };

bool caseInsensitiveEqual(std::string_view lhs, std::string_view rhs) noexcept {
  return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end(), [](char l, char r) {
    return arangodb::basics::StringUtils::tolower(l) == arangodb::basics::StringUtils::tolower(r);
  });
}

void handleUpsertOptions(AstNode const* options, AstNode* forNode, AstNode* forOptionsNode, AstNode* upsertOptionsNode, bool& canReadOwnWrites) {
  TRI_ASSERT(canReadOwnWrites);
  if (options != nullptr && options->type == NODE_TYPE_OBJECT) {
    for (size_t i = 0; i < options->numMembers(); ++i) {
      auto nodeMember = options->getMember(i);
      if (nodeMember->type == NODE_TYPE_OBJECT_ELEMENT) {
        std::string_view nodeMemberName = nodeMember->getStringView();
        if (nodeMemberName == arangodb::StaticStrings::IndexHintOption || 
          nodeMemberName == arangodb::StaticStrings::IndexHintOptionForce ||
          nodeMemberName == arangodb::StaticStrings::IndexHintDisableIndex ||
          nodeMemberName == arangodb::StaticStrings::UseCache) {
          forOptionsNode->addMember(nodeMember);
        } else {
          upsertOptionsNode->addMember(nodeMember);
        }

        if (nodeMemberName == arangodb::StaticStrings::ReadOwnWrites) {
          canReadOwnWrites = nodeMember->getMember(0)->isTrue();
        }
      }
    }
    forNode->changeMember(2, forOptionsNode);
  }
  if (canReadOwnWrites) {
    forNode->setFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES);
  }
}

AstNode* buildShortestPathInfo(Parser* parser,
                               char const* seperator,
                               AstNode* direction,
                               AstNode* startNode,
                               AstNode* endNode,
                               AstNode* graph,
                               AstNode* options,
                               YYLTYPE const& yyloc) {
  if (!caseInsensitiveEqual(seperator, "TO")) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", seperator, yyloc.first_line, yyloc.first_column);
  }
  auto infoNode = parser->ast()->createNodeArray();
  infoNode->addMember(direction);
  infoNode->addMember(startNode);
  infoNode->addMember(endNode);
  infoNode->addMember(graph);
  
  auto opts = parser->ast()->createNodeOptions(options);
  TRI_ASSERT(opts != nullptr);
  infoNode->addMember(opts);
  return infoNode;
}

void checkOutVariables(Parser* parser,
                       AstNode const* variableNamesNode,
                       size_t minVariables, size_t maxVariables,
                       char const* errorMessage,
                       YYLTYPE const& yyloc) {
  TRI_ASSERT(variableNamesNode != nullptr);
  TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
  if (variableNamesNode->numMembers() < minVariables ||
      variableNamesNode->numMembers() > maxVariables) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, errorMessage, yyloc.first_line, yyloc.first_column);
  }
}

void validateOptions(Parser* parser, AstNode const* node,
                     int line, int column) {
  TRI_ASSERT(node != nullptr);
  if (!node->isObject()) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "'OPTIONS' have to be an object", line, column);
  }
  if (!node->isConstant()) {
    parser->registerParseError(TRI_ERROR_QUERY_COMPILE_TIME_OPTIONS, "'OPTIONS' have to be known at query compile time", line, column);
  }
}

/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
void checkCollectVariables(Parser* parser, char const* context, 
                           AstNode const* expression,
                           int line, int column,
                           VarSet const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }

  arangodb::containers::SmallVector<AstNode const*, 4> toTraverse = { expression };
 
  // recursively find all variables in expression
  auto preVisitor = [](AstNode const* node) -> bool {
    // ignore constant nodes, as they can't contain variables
    return !node->isConstant();
  };
  auto visitor = [&](AstNode const* node) {
    // reference to a variable
    if (node != nullptr && node->type == NODE_TYPE_REFERENCE) {
      auto variable = static_cast<Variable const*>(node->getData());

      if (variable == nullptr) {
        THROW_ARANGO_EXCEPTION_MESSAGE(TRI_ERROR_INTERNAL,
                                       "invalid reference in AST");
      }

      if (variable->needsRegister()) {
        if (variablesIntroduced.contains(variable)) {
          auto msg = absl::StrCat("use of COLLECT variable '", variable->name, "' inside same COLLECT's expression");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), variable->name, line, column);
        }
        if (auto subquery = parser->ast()->getSubqueryForVariable(variable); subquery != nullptr) {
          toTraverse.push_back(subquery);
        }
      }
    }
  };

  size_t pos = 0;
  while (pos < toTraverse.size()) {
    AstNode const* node = toTraverse[pos++];
    // note: the traverseReadOnly may add to the toTraverse vector!
    Ast::traverseReadOnly(node, preVisitor, visitor);
  }
}

/// @brief register variables in the scope
void registerAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes,
                             int line, int column,
                             VarSet& variablesIntroduced,
                             AstNode const* vars) {
  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
bool validateAggregates(Parser* parser, AstNode const* aggregates,
                        int line, int column) {
  VarSet variablesIntroduced{};
  VarSet varsInAssignment{};
  
  size_t const n = aggregates->numMembers();
  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      variablesIntroduced.emplace(v);

      auto func = member->getMember(1);
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        constexpr std::string_view error = "aggregate expression must be a function call";
        parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
      } else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          constexpr std::string_view error = "unknown aggregate function used";
          parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
        }
      }
      
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.contains(it)) {
          auto msg = absl::StrCat("use of COLLECT variable '", it->name, "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name, line, column);
        }
      }
    }
  }

  return true;
}


/// @brief validate the WINDOW specification
bool validateWindowSpec(Parser* parser, AstNode const* spec,
                        int line, int column) {
  bool preceding = false;
  bool following = false;
  
  size_t const n = spec->numMembers();
  if (n == 0) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "At least one WINDOW bound must be specified ('preceding'/'following')", line, column);
  }
  
  for (size_t i = 0; i < n; ++i) {
    auto member = spec->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_OBJECT_ELEMENT);
      bool* attr{};
      auto name = member->getString();
      if (name == "preceding") {
        attr = &preceding;
      } else if (name == "following") {
        attr = &following;
      } else  {
        char const* error = "Invalid WINDOW attribute '%s'; only \"preceding\" and \"following\" are supported";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      if (*attr) {
        char const* error = "WINDOW attribute '%s' is specified multiple times";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      // mark this attribute as "seen"
      *attr = true;
    }
  }
  return true;
}

/// @brief start a new scope for the collect
bool startCollectScope(arangodb::aql::Scopes* scopes) {
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN ||
      scopes->type() == arangodb::aql::AQL_SCOPE_SUBQUERY) {
    return false;
  }


  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
AstNode const* getIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringView(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringView(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
AstNode const* getIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

AstNode* transformOutputVariables(Parser* parser, AstNode const* names) {
  auto wrapperNode = parser->ast()->createNodeArray();
  for (size_t i = 0; i < names->numMembers(); ++i) {
    AstNode* variableNameNode = names->getMemberUnchecked(i);
    TRI_ASSERT(variableNameNode->isStringValue());
    AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
    wrapperNode->addMember(variableNode);
  }
  return wrapperNode;
}

} // namespace


#line 716 "grammar.cpp"


#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if 1

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* 1 */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  19
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   2210

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  96
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  153
/* YYNRULES -- Number of rules.  */
#define YYNRULES  342
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  584

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   349


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    95,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   598,   598,   604,   614,   617,   623,   627,   631,   638,
     640,   648,   654,   656,   662,   664,   669,   674,   676,   679,
     682,   685,   688,   694,   697,   702,   704,   706,   708,   710,
     712,   714,   716,   718,   720,   722,   724,   729,   736,   743,
     749,   756,   780,   803,   816,   822,   828,   834,   843,   843,
     894,   894,   928,   940,   952,   964,   979,   987,   992,   994,
     999,  1006,  1017,  1017,  1028,  1038,  1051,  1075,  1130,  1149,
    1180,  1182,  1187,  1194,  1197,  1200,  1209,  1222,  1238,  1238,
    1253,  1253,  1263,  1265,  1270,  1277,  1277,  1289,  1289,  1300,
    1303,  1309,  1315,  1318,  1321,  1324,  1330,  1335,  1342,  1357,
    1375,  1383,  1386,  1392,  1402,  1412,  1420,  1431,  1436,  1444,
    1455,  1460,  1463,  1469,  1472,  1478,  1494,  1478,  1541,  1541,
    1600,  1603,  1606,  1612,  1612,  1622,  1628,  1631,  1634,  1637,
    1640,  1643,  1649,  1652,  1665,  1665,  1674,  1674,  1684,  1687,
    1690,  1696,  1699,  1702,  1705,  1708,  1711,  1714,  1717,  1720,
    1723,  1726,  1729,  1732,  1735,  1738,  1741,  1748,  1755,  1761,
    1767,  1773,  1780,  1783,  1786,  1789,  1792,  1795,  1798,  1801,
    1804,  1808,  1812,  1816,  1820,  1824,  1828,  1832,  1839,  1842,
    1848,  1850,  1855,  1858,  1864,  1867,  1873,  1873,  1882,  1884,
    1886,  1891,  1893,  1898,  1904,  1907,  1932,  1952,  1955,  1970,
    1970,  1979,  1981,  1983,  1988,  1990,  1995,  2011,  2015,  2025,
    2032,  2035,  2041,  2044,  2050,  2053,  2057,  2061,  2065,  2073,
    2076,  2079,  2085,  2088,  2094,  2097,  2100,  2104,  2110,  2114,
    2121,  2127,  2127,  2136,  2140,  2144,  2153,  2156,  2159,  2165,
    2168,  2174,  2213,  2216,  2219,  2223,  2232,  2232,  2248,  2263,
    2276,  2280,  2280,  2296,  2296,  2334,  2334,  2385,  2388,  2393,
    2396,  2399,  2402,  2407,  2413,  2416,  2421,  2424,  2431,  2434,
    2440,  2444,  2451,  2454,  2457,  2460,  2463,  2469,  2474,  2479,
    2490,  2498,  2505,  2513,  2520,  2523,  2528,  2539,  2545,  2545,
    2539,  2588,  2591,  2597,  2600,  2606,  2612,  2615,  2621,  2625,
    2631,  2634,  2641,  2641,  2656,  2656,  2693,  2696,  2699,  2699,
    2707,  2710,  2715,  2731,  2734,  2737,  2743,  2746,  2751,  2755,
    2762,  2765,  2771,  2774,  2779,  2789,  2815,  2817,  2825,  2845,
    2845,  2873,  2873,  2883,  2887,  2892,  2900,  2903,  2908,  2910,
    2910,  2921,  2923
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if 1
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "\"invalid token\"",
  "\"FOR declaration\"", "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"",
  "\"WINDOW declaration\"", "\"ASC keyword\"", "\"DESC keyword\"",
  "\"IN keyword\"", "\"WITH keyword\"", "\"INTO keyword\"",
  "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"K_SHORTEST_PATHS keyword\"",
  "\"K_PATHS keyword\"", "\"ALL_SHORTEST_PATHS keyword\"",
  "\"DISTINCT modifier\"", "\"REMOVE command\"", "\"INSERT command\"",
  "\"UPDATE command\"", "\"REPLACE command\"", "\"UPSERT command\"",
  "\"null\"", "\"true\"", "\"false\"", "\"identifier\"",
  "\"quoted string\"", "\"integer number\"", "\"number\"",
  "\"bind parameter\"", "\"bind data source parameter\"", "\"assignment\"",
  "\"not operator\"", "\"and operator\"", "\"or operator\"",
  "\"not in operator\"", "\"~= operator\"", "\"~! operator\"",
  "\"== operator\"", "\"!= operator\"", "\"< operator\"", "\"> operator\"",
  "\"<= operator\"", "\">= operator\"", "\"like operator\"",
  "\"+ operator\"", "\"- operator\"", "\"* operator\"", "\"/ operator\"",
  "\"% operator\"", "\"?\"", "\":\"", "\"::\"", "\"..\"", "\",\"", "\"(\"",
  "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\";\"",
  "\"outbound modifier\"", "\"inbound modifier\"", "\"any modifier\"",
  "\"all modifier\"", "\"none modifier\"", "\"at least modifier\"",
  "\"select\"", "\"from\"", "\"as\"", "\"where\"", "\"group\"",
  "\"order\"", "\"by\"", "\"having\"", "\"unnest\"", "\"unnest_all\"",
  "\"$\"", "\"join\"", "\"on\"", "WITH_COLLECTION_LIST", "UMINUS", "UPLUS",
  "UNEGATION", "FUNCCALL", "REFERENCE", "INDEXED", "EXPANSION", "'.'",
  "$accept", "optional_prune_variable", "with_collection",
  "with_collection_list", "optional_with", "with_key", "queryStart",
  "query", "aql_statements", "final_statement",
  "optional_statement_block_statements", "statement_block_statement",
  "more_output_variables", "for_output_variables", "prune_and_options",
  "traversal_graph_info", "shortest_path_graph_info",
  "k_shortest_paths_graph_info", "k_paths_graph_info",
  "all_shortest_paths_graph_info", "for_statement", "$@1", "$@2",
  "filter_statement", "let_statement", "let_list", "let_element",
  "count_into", "collect_variable_list", "$@3", "collect_statement",
  "collect_list", "collect_element", "collect_optional_into",
  "variable_list", "keep", "$@4", "aggregate", "$@5", "aggregate_list",
  "aggregate_element", "aggregate_function_call", "$@6", "sort_statement",
  "$@7", "sort_list", "sort_element", "sort_direction", "limit_statement",
  "window_statement", "return_statement", "in_or_into_collection",
  "remove_statement", "insert_statement", "update_parameters",
  "update_statement", "replace_parameters", "replace_statement",
  "update_or_replace", "upsert_input", "upsert_statement", "$@8", "$@9",
  "$@10", "quantifier", "distinct_expression", "$@11", "expression",
  "function_name", "function_call", "$@12", "$@13", "operator_unary",
  "operator_binary", "operator_ternary",
  "optional_function_call_arguments", "function_arguments_list",
  "compound_value", "array", "$@14", "optional_array_elements",
  "array_elements_list", "array_element", "for_options", "options",
  "object", "$@15", "optional_object_elements", "object_elements_list",
  "object_element", "array_filter_operator", "array_map_operator",
  "optional_array_filter", "optional_array_limit", "optional_array_return",
  "graph_collection", "graph_collection_list", "graph_subject", "$@16",
  "graph_direction", "graph_direction_steps", "reference", "$@17", "$@18",
  "$@19", "$@20", "ndarray_expression_list", "ndarray_expression",
  "range_index", "expression_or_none", "interval_element", "simple_value",
  "numeric_value", "value_literal", "in_or_into_collection_name",
  "bind_parameter", "bind_parameter_datasource_expected",
  "object_element_name", "variable_name", "sql_statements", "$@21", "$@22",
  "$@23", "with_statements", "with_list", "with_element",
  "from_statements", "collection_pair_list", "collection_element",
  "collection_pair", "$@24", "$@25", "unnest_statement", "$@26",
  "expression_list", "expression_element", "optional_axis_name_list",
  "axis_name_list", "axis_name", "distinct_label", "select_list",
  "select_element", "where_statements", "group_by_statements", "$@27",
  "group_by_variable_list", "$@28", "group_by_list", "group_by_element",
  "having_statements", "order_by_statements", "$@29", "limit_statements", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-490)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-292)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
       9,    25,  -490,   197,     8,  -490,   -47,  -490,   -10,    58,
    -490,  -490,  2183,  -490,  -490,  -490,  -490,    85,  -490,  -490,
    -490,  2057,    25,    25,    25,  2057,  1938,   109,  -490,  2057,
    2057,  2057,  2057,  2057,  2057,    36,  -490,  -490,  -490,  -490,
    -490,    80,  -490,  -490,  -490,  -490,  -490,     5,     6,    24,
      28,    30,   197,  -490,    62,  -490,  -490,  -490,   113,  -490,
    -490,  -490,  -490,  -490,  2057,    69,  2057,  2057,  2057,  -490,
    -490,  1767,   124,  -490,  -490,  -490,  -490,  -490,  -490,  -490,
     -51,  -490,  -490,  -490,  -490,    75,   133,  -490,    91,  -490,
     136,  1767,  -490,  -490,  1767,   146,  -490,   156,    25,   180,
    2057,  1060,  1104,   185,  1149,  1149,  -490,   876,  -490,   923,
    -490,  -490,  -490,  -490,    25,   156,   177,   180,  -490,  -490,
    2057,  -490,  -490,  -490,  -490,  1193,    19,    -6,  2057,  2057,
      90,  2057,  2057,  2057,  2057,  2057,  2057,  2057,  2057,  2057,
    2057,  2057,  2057,  2057,  2057,  2057,  2057,  2057,  2019,  2057,
    -490,  -490,  -490,   154,    56,   195,  -490,    26,   144,    25,
    1976,    25,  2057,  2057,   220,    25,   184,  -490,   188,  -490,
     222,   156,   209,  -490,   785,  2057,   184,  -490,  2095,   198,
     156,   156,  2057,   156,  2057,   156,  2057,   247,   241,  -490,
     184,   156,  -490,   156,   648,   221,  -490,  2057,  -490,    25,
     217,  -490,  -490,   223,  -490,   225,  2057,   224,   226,  -490,
     228,  1767,   227,   229,  -490,   299,  2057,  2057,  2057,  1854,
    1811,   299,   485,   485,   485,   485,   139,   139,   139,   139,
     485,   219,   219,  -490,  -490,  -490,  2057,  1237,    55,  2057,
    2057,  2057,  2057,  2057,  2057,  2057,  2057,  2057,  -490,  2057,
    -490,  -490,   235,   230,  2133,  -490,  -490,  -490,  -490,  -490,
    -490,  -490,  -490,  -490,  -490,  -490,  -490,   967,    13,  1900,
    -490,  1767,  1767,    25,   232,  -490,   257,  -490,    25,  2057,
    -490,  2057,  -490,  -490,  -490,  -490,  -490,  -490,  1767,   185,
      12,   298,   380,  -490,  -490,  -490,  -490,  -490,  -490,  -490,
    1149,  -490,  1149,  -490,  1767,  2057,  2057,    25,  -490,  -490,
      25,  2057,   234,  1767,   233,   236,  -490,  2057,  1282,  -490,
      -6,  2057,  -490,  2057,   485,   485,   485,  1767,  2057,  1326,
     299,   299,   485,   485,   139,   139,   139,   139,   237,  -490,
     612,  -490,   612,    61,  1370,    -2,  -490,  -490,   240,   248,
     279,   165,   283,  -490,  2057,  2057,  2057,  2057,   829,  -490,
      25,   284,  -490,  1767,  -490,  -490,   156,   156,   292,  1016,
    1767,   258,  -490,  -490,  -490,  2057,  -490,  -490,  2057,  1767,
     260,  -490,  1767,  -490,  1767,   176,  -490,  2057,   259,   314,
     560,   262,   321,  2133,  -490,  2057,  2057,  2133,  -490,  2057,
    -490,  1415,  1459,  1503,  1547,   112,  -490,   271,  -490,   205,
    -490,  -490,  -490,  -490,   158,  -490,  -490,  2057,  -490,  -490,
    2057,    25,   692,   273,  -490,   249,   263,  1767,  2057,  2057,
    2057,  2057,  2057,  2057,  2057,  2057,  2057,  1767,  2057,  2057,
    2057,  -490,  2057,   329,  -490,  1767,   282,  1591,   272,   310,
    1767,   306,  1635,  2057,  2057,  2057,  2057,  -490,  -490,  -490,
    -490,  -490,  -490,  -490,  1016,  1149,  -490,    25,   194,  2057,
    2057,  2057,   277,  1767,   299,   299,   485,   485,   139,   139,
     139,   139,  1679,  1767,  1767,  1723,  2057,   290,  2057,  -490,
    -490,  -490,   184,  2057,  2057,   829,   829,   829,   829,    45,
    2057,  2057,   156,  -490,  2057,  -490,  -490,  -490,   276,  1767,
     285,   278,  -490,   354,  2057,  1767,  -490,  1767,  -490,  1767,
    1767,   156,   156,   156,   156,  -490,   304,   307,  1149,  -490,
     194,   736,   316,  -490,   295,  2057,  -490,   286,   363,   300,
    2057,  1767,  -490,  -490,  -490,  -490,    45,  -490,   156,  -490,
      25,   326,   218,  -490,  1767,  2057,  -490,  -490,  -490,  2057,
    -490,  1767,  -490,  -490,  -490,  2057,  -490,  -490,   318,  1767,
     322,  -490,  2057,  1767,  -490,   218,  2057,   209,   192,  -490,
    -490,   218,  -490,  -490
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       9,    11,    23,     0,     0,    13,     0,   286,     0,   292,
     293,    12,     0,     4,   283,   282,     6,    10,     5,     1,
     287,     0,     0,     0,     0,     0,     0,    62,    87,     0,
       0,     0,     0,     0,     0,     0,    16,    24,    25,    27,
      26,    73,    28,    29,    30,    31,    17,    32,    33,    34,
      35,    36,     0,     8,   320,   274,   275,   276,   241,   272,
     270,   271,   281,   280,     0,     0,     0,     0,   246,   199,
     186,   295,     0,   244,   126,   127,   128,   242,   184,   185,
     130,   273,   129,   243,   294,    39,     0,    37,    57,    58,
       0,    56,   123,   100,   125,     0,    80,   197,     0,    73,
       0,    96,     0,   185,     0,     0,   107,     0,   110,     0,
     115,   118,   113,   114,     0,   197,   197,    73,     7,   321,
       0,   140,   136,   138,   139,     0,    23,   201,   188,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   120,   122,     0,     0,     0,   134,   251,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    64,    63,    70,
       0,   197,    88,    89,    92,     0,     0,    98,     0,     0,
     197,   197,     0,   197,     0,   197,     0,     0,    74,    65,
      78,   197,    68,   197,   325,   288,   322,   180,   245,     0,
       0,    14,    15,   206,   285,     0,     0,     0,   202,   204,
       0,   193,     0,   189,   191,   154,     0,     0,     0,   142,
     141,   155,   160,   161,   148,   149,   150,   151,   152,   153,
     159,   143,   144,   145,   146,   147,     0,     0,   131,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   133,   180,
     212,   210,   253,   255,   264,   248,   250,   249,    38,   236,
     237,   238,    50,    52,    53,    54,    55,    48,   239,     0,
      59,    60,   124,     0,    81,    82,     0,   198,     0,     0,
      66,     0,    93,    94,    91,    95,   268,   269,    97,     0,
     241,   272,   280,   101,   277,   278,   279,   102,   103,   104,
       0,   105,     0,   108,   116,     0,     0,     0,    69,    67,
       0,     0,   296,   182,     0,   181,   247,     0,     0,   200,
     203,     0,   187,   190,   157,   158,   156,   179,     0,     0,
     168,   169,   162,   163,   164,   165,   166,   167,     0,   211,
     214,   213,   214,   241,   259,     0,   257,   260,     0,     0,
      40,   238,   194,   240,     0,     0,     0,     0,     0,    61,
       0,     0,    71,    72,    90,    99,   197,   197,     0,     0,
      75,    79,    76,   324,   323,     0,   289,   137,     0,   208,
       0,   205,   207,   192,   178,     0,   135,     0,     0,     0,
       0,     0,   219,   264,   252,   264,   264,     0,    51,     0,
      49,     0,     0,     0,     0,     0,   224,   230,    43,     0,
     225,    83,   132,    84,     0,   106,   109,     0,   111,   112,
       0,     0,   304,   297,   298,   300,   326,   183,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   215,     0,     0,
       0,   254,     0,   222,   258,   265,   266,   265,     0,    41,
       2,     0,   195,     0,     0,     0,     0,   235,   234,   233,
     231,   226,   227,    85,     0,     0,    77,     0,   306,     0,
       0,     0,   328,   209,   176,   177,   170,   171,   172,   173,
     174,   175,     0,   216,   218,   220,     0,     0,     0,   263,
     261,   262,     0,     0,     0,     0,     0,     0,     0,     0,
     180,     0,   197,   302,     0,   308,   305,   299,     0,   327,
       0,   338,   329,     0,     0,   223,   256,   267,    42,     3,
     196,   197,   197,   197,   197,   228,   232,     0,     0,   119,
     306,     0,   307,   310,   313,     0,   331,     0,   341,   336,
       0,   221,    44,    45,    47,    46,     0,    86,   197,   303,
       0,     0,     0,   309,   301,     0,   339,   342,   290,     0,
     330,   217,   229,   117,   312,     0,   318,   319,   314,   335,
     332,   333,     0,   337,   311,     0,     0,   340,     0,   316,
     334,     0,   315,   317
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -490,  -490,    -4,  -490,  -490,  -490,  -490,  -490,   265,  -490,
    -490,  -490,  -490,  -490,  -490,  -490,  -490,  -490,  -490,  -490,
    -490,  -490,  -490,  -490,  -490,  -490,   231,   352,  -490,  -490,
    -490,  -490,   116,   -39,  -490,  -490,  -490,   -38,  -490,  -490,
      35,  -490,  -490,  -490,  -490,  -175,   119,  -490,  -137,  -490,
    -490,   -98,  -490,  -490,  -490,  -490,  -490,  -490,   -62,  -490,
    -490,  -490,  -490,  -490,   -84,  -490,  -490,    21,    48,  -490,
    -490,  -490,  -490,  -490,  -490,  -247,  -490,  -490,  -490,  -490,
    -490,  -490,    87,  -490,   -54,    10,  -490,  -490,  -490,    92,
    -490,  -490,    71,  -490,  -490,  -489,  -490,  -253,  -490,  -156,
    -490,  -490,  -490,  -490,  -490,  -490,  -490,    22,    29,    27,
    -490,  -490,  -490,   250,   242,    14,    60,  -490,   -23,   301,
    -490,  -490,  -490,  -490,  -490,   404,  -490,  -490,   -41,   -37,
    -490,  -490,  -101,  -490,  -490,  -134,  -490,  -490,  -447,  -490,
    -490,   121,  -490,  -490,  -490,  -490,  -490,  -490,  -142,  -490,
    -490,  -490,  -490
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,   449,    16,    17,     2,     3,     4,   200,    11,    36,
      12,    37,    85,    86,   398,   262,   263,   264,   265,   266,
      38,   352,   350,    39,    40,    88,    89,    97,    41,    98,
      42,   168,   169,   116,   371,   191,   307,    99,   165,   274,
     275,   413,   500,    43,   100,   172,   173,   284,    44,    45,
      46,   180,    47,    48,   106,    49,   108,    50,   420,   111,
      51,   186,   368,   187,   154,    93,   163,   174,    72,    73,
     249,   197,    74,    75,    76,   314,   315,    77,    78,   128,
     212,   213,   214,   400,   167,    79,   127,   207,   208,   209,
     252,   253,   391,   443,   487,   407,   526,   408,   499,   409,
     269,    80,   126,   254,   340,   342,   345,   346,   347,   348,
     489,   285,    81,    82,   293,    83,   410,   210,     8,     5,
      54,   312,   426,     6,     9,    10,   376,   423,   424,   425,
     530,   468,   506,   534,   532,   533,   553,   578,   568,   120,
     195,   196,   472,   511,   539,   512,   555,   570,   571,   560,
     538,   572,   558
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      87,    90,   338,   117,   268,   -18,   -19,   181,    19,   183,
     525,   185,  -277,    53,   157,  -277,  -277,  -277,  -277,  -277,
    -277,  -277,  -277,     1,   -20,   203,   204,    20,   -21,   205,
     -22,   354,   355,   199,   356,  -277,  -277,  -277,  -277,  -277,
     103,   110,    71,  -277,   158,   112,    91,    94,   118,   113,
     101,   102,   104,   105,   107,   109,     7,   562,   393,   206,
     171,   189,   192,    18,   394,   177,    21,   -18,   -19,   240,
    -132,    62,    63,  -132,  -277,   170,   406,    18,   193,   250,
      14,    15,   251,  -291,   119,   121,   -20,   123,   124,   125,
     -21,   188,   -22,  -291,    95,   114,    96,   241,  -286,    69,
     242,   243,   244,   245,   246,   247,   143,   144,   145,   146,
     147,   353,    18,   259,   260,   261,    13,   280,    22,  -132,
      14,    15,  -132,    95,  -286,    96,   298,   299,   579,   301,
     122,   303,   216,   217,   583,   159,   258,   308,    90,   309,
     218,   194,   276,   457,   458,    52,   160,    62,    63,   211,
     215,   161,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   237,
     238,  -132,   257,   162,  -132,   255,   277,   164,  -121,    62,
      63,   267,   155,   271,   272,   156,   289,   166,   287,   429,
     143,   144,   145,   146,   147,   114,   288,   256,   149,   215,
     277,    96,   366,   300,   367,   302,  -121,   304,   190,  -121,
    -121,  -121,  -121,  -121,  -121,   239,   155,   430,   313,   463,
     431,   432,   433,   434,   435,   436,   248,   318,    13,   294,
     295,   349,    14,    15,   296,   273,   461,   324,   325,   326,
      62,    63,   521,   522,   523,   524,   566,    69,   278,     7,
     359,   365,   581,   527,   582,   170,   389,   327,   389,   279,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   281,
     313,   305,   145,   146,   147,   344,   504,   505,   306,   316,
    -284,   311,   317,   341,   372,   321,   320,   373,   319,   323,
     358,   339,   360,   322,   361,   377,   378,   395,  -278,   386,
     363,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,   375,
     397,   396,   415,   416,   399,   412,   417,   428,   421,   439,
     438,  -278,  -278,  -278,  -278,  -278,   369,   370,   441,  -278,
     442,   460,   194,   469,   470,   486,   491,   276,   379,   488,
     471,   492,   382,   493,   211,   138,   139,   140,   141,   384,
     143,   144,   145,   146,   147,   510,   516,   537,   149,   540,
    -278,   390,   535,   390,   546,   536,   556,   502,   551,   547,
     349,   552,    29,   565,   451,   401,   402,   403,   404,   575,
    -279,   559,   576,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,   201,   270,   115,   362,   411,   422,   577,   466,   427,
     364,   557,   501,  -279,  -279,  -279,  -279,  -279,   437,   414,
     383,  -279,   381,   392,   344,   444,   445,   447,   450,   459,
     452,   297,   446,   462,   286,   448,    84,   202,   507,   549,
     548,   574,   374,   508,   580,     0,     0,     0,   464,     0,
       0,   465,  -279,     0,   503,     0,     0,     0,   529,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     0,   482,
     483,   484,     0,   485,     0,     0,     0,   542,   543,   544,
     545,     0,     0,     0,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     422,   422,   509,     0,   563,     0,     0,     0,   129,     0,
       0,     0,   518,     0,     0,     0,     0,   515,     0,   517,
       0,     0,     0,     0,   519,   520,     0,     0,     0,     0,
       0,   313,   528,   130,     0,   531,   133,   564,     0,   567,
       0,   138,   139,   140,   141,   541,   143,   144,   145,   146,
     147,     0,     0,     0,   149,     0,     0,     0,     0,     0,
       0,     0,   567,     0,     0,     0,   554,     0,   567,     0,
       0,   561,     0,     0,     0,   440,     0,     0,     0,     0,
       0,     0,     0,   129,     0,     0,   569,     0,     0,     0,
     573,     0,     0,     0,     0,     0,   531,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   569,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   387,     0,   149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   152,   153,     0,     0,     0,     0,     0,     0,
      55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   129,    65,    66,    67,     0,     0,     0,     0,     0,
       0,     0,     0,    68,     0,    69,     0,    70,     0,     0,
       0,     0,   150,   151,   152,   388,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   129,     0,   149,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,   151,
     152,   153,     0,     0,   310,     0,     0,     0,     0,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   129,
       0,   149,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,   151,   152,   153,     0,     0,   467,     0,
       0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,     0,     0,   149,   282,   283,   129,     0,
       0,     0,     0,     0,     0,     0,   150,   151,   152,   153,
       0,     0,   550,    55,    56,    57,     0,    59,    60,    61,
      62,    63,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   129,     0,   149,     0,   405,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,   152,   153,     0,
     406,     0,     0,     0,    14,    15,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,     0,     0,   149,   178,
     182,   179,     0,     0,     0,     0,     0,   259,   260,   351,
     151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,     0,     0,   149,   178,   184,   179,     0,
       0,     0,     0,     0,     0,     0,   150,   151,   152,   153,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     129,     0,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,   152,   153,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,   129,
       0,     0,     0,     0,     0,   259,   260,   351,   151,   152,
     153,   418,   419,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   129,     0,   149,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   150,   151,   152,   153,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   129,   176,   149,
     175,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   152,   153,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,     0,   178,   149,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,   151,   152,   153,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   129,     0,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     129,     0,   149,     0,     0,   198,     0,     0,     0,     0,
       0,     0,     0,   150,   151,   152,   153,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   328,   129,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   129,
       0,   149,     0,     0,     0,     0,     0,     0,   380,     0,
       0,     0,   150,   151,   152,   153,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   129,     0,   149,     0,     0,   385,     0,
       0,     0,     0,     0,     0,     0,   150,   151,   152,   153,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,  -265,   129,   149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   152,   153,     0,     0,   453,     0,     0,     0,
       0,     0,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   129,     0,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,   152,   153,     0,
     454,     0,     0,     0,     0,     0,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   129,     0,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,   455,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     129,     0,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,   152,   153,     0,   456,     0,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   129,     0,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   129,     0,
     149,     0,     0,     0,     0,   490,     0,     0,     0,     0,
       0,   150,   151,   152,   153,     0,   494,     0,     0,     0,
       0,     0,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   129,     0,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,   152,   153,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   129,     0,   149,     0,
       0,   513,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     129,     0,   149,   514,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,   152,   153,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   129,     0,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,     0,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   129,     0,     0,
     149,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   150,   151,   152,   153,     0,     0,     0,     0,     0,
       0,     0,   130,     0,     0,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
       0,     0,     0,   149,     0,     0,     0,     0,     0,     0,
     357,     0,     0,     0,   150,   151,   152,   153,    55,    56,
      57,    58,    59,    60,    61,    62,    63,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,     0,     0,     0,     0,     0,
      92,    68,     0,    69,     0,    70,    55,    56,    57,    58,
      59,    60,    61,    62,    63,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,     0,     0,     0,     0,     0,     0,     0,     0,    68,
       0,    69,     0,    70,    55,    56,    57,    58,    59,    60,
      61,    62,    63,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,     0,     0,     0,     0,     0,     0,    68,     0,    69,
       0,    70,     0,     0,   259,   260,   261,    55,    56,    57,
      58,    59,    60,    61,    62,    63,     0,    64,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
      66,    67,     0,     0,     0,     0,   236,     0,     0,     0,
      68,     0,    69,     0,    70,    55,    56,    57,    58,    59,
      60,    61,    62,    63,     0,    64,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    65,    66,    67,
       0,     0,     0,     0,     0,     0,     0,     0,    68,     0,
      69,     0,    70,    55,    56,    57,   290,   291,    60,    61,
      62,   292,     0,    64,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    65,    66,    67,     0,     0,
       0,     0,     0,     0,     0,     0,    68,     0,    69,     0,
      70,    55,    56,    57,   343,    59,    60,    61,    62,    63,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    65,    66,    67,    23,    24,    25,    26,
      27,    28,    29,    30,    68,     0,    69,     0,    70,     0,
       0,     0,     0,     0,     0,     0,    31,    32,    33,    34,
      35
};

static const yytype_int16 yycheck[] =
{
      23,    24,   249,    41,   160,     0,     0,   105,     0,   107,
     499,   109,     0,    17,    65,     3,     4,     5,     6,     7,
       8,     9,    10,    14,     0,    31,    32,    74,     0,    35,
       0,    18,    19,    14,    21,    23,    24,    25,    26,    27,
      30,     5,    21,    31,    95,    35,    25,    26,    52,    35,
      29,    30,    31,    32,    33,    34,    31,   546,    60,    65,
      99,   115,   116,     3,    66,   103,    76,    62,    62,    13,
      58,    35,    36,    61,    62,    98,    31,    17,   117,    53,
      35,    36,    56,    74,    22,    64,    62,    66,    67,    68,
      62,   114,    62,    74,    14,    15,    16,    41,    37,    63,
      44,    45,    46,    47,    48,    49,    51,    52,    53,    54,
      55,   267,    52,    68,    69,    70,    31,   171,    60,    58,
      35,    36,    61,    14,    63,    16,   180,   181,   575,   183,
      61,   185,    42,    43,   581,    60,   159,   191,   161,   193,
      50,   120,   165,    31,    32,    60,    13,    35,    36,   128,
     129,    60,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,    58,   158,    37,    61,    31,   166,    31,    13,    35,
      36,   160,    58,   162,   163,    61,   176,    31,   174,    13,
      51,    52,    53,    54,    55,    15,   175,    53,    59,   178,
     190,    16,   300,   182,   302,   184,    41,   186,    31,    44,
      45,    46,    47,    48,    49,    61,    58,    41,   197,    61,
      44,    45,    46,    47,    48,    49,    31,   206,    31,    31,
      32,   254,    35,    36,    36,    15,    31,   216,   217,   218,
      35,    36,   495,   496,   497,   498,    28,    63,    60,    31,
     273,   289,    60,   500,    62,   278,   340,   236,   342,    37,
     239,   240,   241,   242,   243,   244,   245,   246,   247,    60,
     249,    24,    53,    54,    55,   254,    82,    83,    37,    62,
      57,    60,    57,    53,   307,    57,    60,   310,    64,    60,
     269,    56,    60,    66,    37,    62,    60,    57,     0,    62,
     279,     3,     4,     5,     6,     7,     8,     9,    10,    75,
      31,    63,   366,   367,    31,    31,    24,    57,    60,     5,
      61,    23,    24,    25,    26,    27,   305,   306,    66,    31,
       9,    60,   311,    60,    85,     6,    64,   360,   317,    57,
      77,    31,   321,    37,   323,    46,    47,    48,    49,   328,
      51,    52,    53,    54,    55,    78,    66,    79,    59,     5,
      62,   340,    86,   342,    60,    80,    80,   465,    52,    62,
     393,    76,     9,    47,   397,   354,   355,   356,   357,    61,
       0,    81,    60,     3,     4,     5,     6,     7,     8,     9,
      10,   126,   161,    41,   278,   360,   375,   572,   421,   378,
     281,   538,   464,    23,    24,    25,    26,    27,   387,   361,
     323,    31,   320,   342,   393,   393,   395,   396,   397,   405,
     399,   179,   395,   409,   174,   396,    22,   126,   469,   530,
     528,   565,   311,   470,   576,    -1,    -1,    -1,   417,    -1,
      -1,   420,    62,    -1,   467,    -1,    -1,    -1,   502,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,    -1,   442,    -1,    -1,    -1,   521,   522,   523,
     524,    -1,    -1,    -1,   453,   454,   455,   456,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     469,   470,   471,    -1,   548,    -1,    -1,    -1,    13,    -1,
      -1,    -1,   492,    -1,    -1,    -1,    -1,   486,    -1,   488,
      -1,    -1,    -1,    -1,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,    38,    -1,   504,    41,   550,    -1,   552,
      -1,    46,    47,    48,    49,   514,    51,    52,    53,    54,
      55,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,    -1,   535,    -1,   581,    -1,
      -1,   540,    -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    13,    -1,    -1,   555,    -1,    -1,    -1,
     559,    -1,    -1,    -1,    -1,    -1,   565,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   576,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,     5,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    13,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    63,    -1,    65,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    13,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
      72,    73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    -1,    59,    11,    12,    13,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    76,    28,    29,    30,    -1,    32,    33,    34,
      35,    36,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    13,    -1,    59,    -1,    17,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
      31,    -1,    -1,    -1,    35,    36,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    -1,    59,    13,
      14,    15,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    -1,    -1,    59,    13,    14,    15,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    -1,    -1,    59,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,
      73,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    14,    59,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    13,    59,    15,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    -1,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    13,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    13,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    13,    -1,
      59,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    13,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    -1,    -1,    -1,    70,    71,    72,    73,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    61,    -1,    63,    -1,    65,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    63,    -1,    65,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    63,
      -1,    65,    -1,    -1,    68,    69,    70,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      51,    52,    -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      61,    -1,    63,    -1,    65,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      63,    -1,    65,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    63,    -1,
      65,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    51,    52,     3,     4,     5,     6,
       7,     8,     9,    10,    61,    -1,    63,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    14,   100,   101,   102,   215,   219,    31,   214,   220,
     221,   104,   106,    31,    35,    36,    98,    99,   212,     0,
      74,    76,    60,     3,     4,     5,     6,     7,     8,     9,
      10,    23,    24,    25,    26,    27,   105,   107,   116,   119,
     120,   124,   126,   139,   144,   145,   146,   148,   149,   151,
     153,   156,    60,    98,   216,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    38,    50,    51,    52,    61,    63,
      65,   163,   164,   165,   168,   169,   170,   173,   174,   181,
     197,   208,   209,   211,   221,   108,   109,   214,   121,   122,
     214,   163,    22,   161,   163,    14,    16,   123,   125,   133,
     140,   163,   163,   181,   163,   163,   150,   163,   152,   163,
       5,   155,   181,   211,    15,   123,   129,   133,    98,    22,
     235,   163,    61,   163,   163,   163,   198,   182,   175,    13,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    59,
      70,    71,    72,    73,   160,    58,    61,    65,    95,    60,
      13,    60,    37,   162,    31,   134,    31,   180,   127,   128,
     214,   129,   141,   142,   163,    60,    14,   133,    13,    15,
     147,   147,    14,   147,    14,   147,   157,   159,   214,   180,
      31,   131,   180,   129,   163,   236,   237,   167,    62,    14,
     103,   104,   215,    31,    32,    35,    65,   183,   184,   185,
     213,   163,   176,   177,   178,   163,    42,    43,    50,   163,
     163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
     163,   163,   163,   163,   163,   163,    57,   163,   163,    61,
      13,    41,    44,    45,    46,    47,    48,    49,    31,   166,
      53,    56,   186,   187,   199,    31,    53,   211,   214,    68,
      69,    70,   111,   112,   113,   114,   115,   163,   195,   196,
     122,   163,   163,    15,   135,   136,   214,   181,    60,    37,
     180,    60,    11,    12,   143,   207,   209,   211,   163,   181,
      31,    32,    36,   210,    31,    32,    36,   210,   180,   180,
     163,   180,   163,   180,   163,    24,    37,   132,   180,   180,
      76,    60,   217,   163,   171,   172,    62,    57,   163,    64,
      60,    57,    66,    60,   163,   163,   163,   163,    57,   163,
     163,   163,   163,   163,   163,   163,   163,   163,   171,    56,
     200,    53,   201,    31,   163,   202,   203,   204,   205,   214,
     118,    70,   117,   195,    18,    19,    21,    20,   163,   214,
      60,    37,   128,   163,   142,   133,   147,   147,   158,   163,
     163,   130,   214,   214,   237,    75,   222,    62,    60,   163,
      66,   185,   163,   178,   163,    62,    62,     5,    73,   160,
     163,   188,   188,    60,    66,    57,    63,    31,   110,    31,
     179,   163,   163,   163,   163,    17,    31,   191,   193,   195,
     212,   136,    31,   137,   164,   180,   180,    24,    25,    26,
     154,    60,   163,   223,   224,   225,   218,   163,    57,    13,
      41,    44,    45,    46,    47,    48,    49,   163,    61,     5,
       5,    66,     9,   189,   203,   163,   205,   163,   204,    97,
     163,   214,   163,    31,    31,    31,    31,    31,    32,   211,
      60,    31,   211,    61,   163,   163,   214,    76,   227,    60,
      85,    77,   238,   163,   163,   163,   163,   163,   163,   163,
     163,   163,   163,   163,   163,   163,     6,   190,    57,   206,
      64,    64,    31,    37,    31,   163,   163,   163,   163,   194,
     138,   154,   147,   214,    82,    83,   228,   224,   225,   163,
      78,   239,   241,    62,    60,   163,    66,   163,   181,   163,
     163,   193,   193,   193,   193,   191,   192,   171,   163,   180,
     226,   163,   230,   231,   229,    86,    80,    79,   246,   240,
       5,   163,   180,   180,   180,   180,    60,    62,   147,   228,
      76,    52,    76,   232,   163,   242,    80,   144,   248,    81,
     245,   163,   191,   180,   214,    47,    28,   214,   234,   163,
     243,   244,   247,   163,   231,    61,    60,   141,   233,   234,
     244,    60,    62,   234
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_uint8 yyr1[] =
{
       0,    96,    97,    97,    98,    98,    99,    99,    99,   100,
     100,   101,   102,   102,   103,   103,   104,   105,   105,   105,
     105,   105,   105,   106,   106,   107,   107,   107,   107,   107,
     107,   107,   107,   107,   107,   107,   107,   108,   108,   109,
     110,   110,   110,   111,   112,   113,   114,   115,   117,   116,
     118,   116,   116,   116,   116,   116,   119,   120,   121,   121,
     122,   123,   125,   124,   126,   126,   126,   126,   126,   126,
     127,   127,   128,   129,   129,   129,   130,   130,   132,   131,
     134,   133,   135,   135,   136,   138,   137,   140,   139,   141,
     141,   142,   143,   143,   143,   143,   144,   144,   145,   145,
     146,   147,   147,   148,   149,   150,   150,   151,   152,   152,
     153,   154,   154,   155,   155,   157,   158,   156,   159,   156,
     160,   160,   160,   162,   161,   161,   163,   163,   163,   163,
     163,   163,   164,   164,   166,   165,   167,   165,   168,   168,
     168,   169,   169,   169,   169,   169,   169,   169,   169,   169,
     169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
     169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
     169,   169,   169,   169,   169,   169,   169,   169,   170,   170,
     171,   171,   172,   172,   173,   173,   175,   174,   176,   176,
     176,   177,   177,   178,   179,   179,   179,   180,   180,   182,
     181,   183,   183,   183,   184,   184,   185,   185,   185,   185,
     186,   186,   187,   187,   188,   188,   188,   188,   188,   189,
     189,   189,   190,   190,   191,   191,   191,   191,   192,   192,
     193,   194,   193,   193,   193,   193,   195,   195,   195,   196,
     196,   197,   197,   197,   197,   197,   198,   197,   197,   197,
     197,   199,   197,   200,   197,   201,   197,   202,   202,   203,
     203,   203,   203,   204,   205,   205,   206,   206,   207,   207,
     208,   208,   209,   209,   209,   209,   209,   210,   210,   210,
     211,   211,   212,   212,   213,   213,   214,   216,   217,   218,
     215,   219,   219,   220,   220,   221,   222,   222,   223,   223,
     224,   224,   226,   225,   227,   225,   228,   228,   229,   228,
     230,   230,   231,   232,   232,   232,   233,   233,   234,   234,
     235,   235,   236,   236,   237,   237,   238,   238,   239,   240,
     239,   242,   241,   243,   243,   244,   245,   245,   246,   247,
     246,   248,   248
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     3,     2,     0,
       2,     1,     2,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       0,     2,     4,     3,     7,     7,     7,     7,     0,     6,
       0,     6,     4,     4,     4,     4,     2,     2,     1,     3,
       3,     4,     0,     3,     3,     3,     4,     4,     3,     4,
       1,     3,     3,     0,     2,     4,     1,     3,     0,     3,
       0,     3,     1,     3,     3,     0,     5,     0,     3,     1,
       3,     2,     0,     1,     1,     1,     2,     4,     3,     5,
       2,     2,     2,     4,     4,     3,     5,     2,     3,     5,
       2,     1,     1,     1,     1,     0,     0,    11,     0,     9,
       1,     1,     1,     0,     3,     1,     1,     1,     1,     1,
       1,     3,     1,     3,     0,     5,     0,     5,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     4,     3,
       3,     3,     4,     4,     4,     4,     4,     4,     4,     4,
       7,     7,     7,     7,     7,     7,     7,     7,     5,     4,
       0,     1,     1,     3,     1,     1,     0,     4,     0,     1,
       2,     1,     3,     1,     0,     2,     4,     0,     2,     0,
       4,     0,     1,     2,     1,     3,     1,     3,     3,     5,
       1,     2,     1,     2,     0,     2,     3,     6,     3,     0,
       2,     4,     0,     2,     1,     1,     2,     2,     1,     3,
       1,     0,     4,     2,     2,     2,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     3,     0,     4,     3,     3,
       3,     0,     5,     0,     6,     0,     8,     1,     3,     1,
       1,     4,     4,     4,     0,     1,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     0,     0,
      12,     0,     2,     1,     3,     3,     0,     2,     1,     3,
       1,     5,     0,     5,     0,     3,     0,     2,     0,     3,
       1,     4,     3,     0,     2,     5,     1,     3,     1,     1,
       0,     1,     1,     3,     3,     1,     0,     2,     0,     0,
       3,     0,     4,     1,     3,     1,     0,     2,     0,     0,
       4,     0,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, arangodb::aql::Parser* parser)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


/* Context of a parse error.  */
typedef struct
{
  yy_state_t *yyssp;
  yysymbol_kind_t yytoken;
  YYLTYPE *yylloc;
} yypcontext_t;

/* Put in YYARG at most YYARGN of the expected tokens given the
   current YYCTX, and return the number of tokens stored in YYARG.  If
   YYARG is null, return the number of expected tokens (guaranteed to
   be less than YYNTOKENS).  Return YYENOMEM on memory exhaustion.
   Return 0 if there are more than YYARGN expected tokens, yet fill
   YYARG up to YYARGN. */
static int
yypcontext_expected_tokens (const yypcontext_t *yyctx,
                            yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  int yyn = yypact[+*yyctx->yyssp];
  if (!yypact_value_is_default (yyn))
    {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYSYMBOL_YYerror
            && !yytable_value_is_error (yytable[yyx + yyn]))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = YY_CAST (yysymbol_kind_t, yyx);
          }
    }
  if (yyarg && yycount == 0 && 0 < yyargn)
    yyarg[0] = YYSYMBOL_YYEMPTY;
  return yycount;
}




#ifndef yystrlen
# if defined __GLIBC__ && defined _STRING_H
#  define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
# else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
# endif
#endif

#ifndef yystpcpy
# if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#  define yystpcpy stpcpy
# else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
# endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;
      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
#endif


static int
yy_syntax_error_arguments (const yypcontext_t *yyctx,
                           yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yyctx->yytoken != YYSYMBOL_YYEMPTY)
    {
      int yyn;
      if (yyarg)
        yyarg[yycount] = yyctx->yytoken;
      ++yycount;
      yyn = yypcontext_expected_tokens (yyctx,
                                        yyarg ? yyarg + 1 : yyarg, yyargn - 1);
      if (yyn == YYENOMEM)
        return YYENOMEM;
      else
        yycount += yyn;
    }
  return yycount;
}

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return -1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return YYENOMEM if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                const yypcontext_t *yyctx)
{
  enum { YYARGS_MAX = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  yysymbol_kind_t yyarg[YYARGS_MAX];
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* Actual size of YYARG. */
  int yycount = yy_syntax_error_arguments (yyctx, yyarg, YYARGS_MAX);
  if (yycount == YYENOMEM)
    return YYENOMEM;

  switch (yycount)
    {
#define YYCASE_(N, S)                       \
      case N:                               \
        yyformat = S;                       \
        break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
    }

  /* Compute error message size.  Don't count the "%s"s, but reserve
     room for the terminator.  */
  yysize = yystrlen (yyformat) - 2 * yycount + 1;
  {
    int yyi;
    for (yyi = 0; yyi < yycount; ++yyi)
      {
        YYPTRDIFF_T yysize1
          = yysize + yytnamerr (YY_NULLPTR, yytname[yyarg[yyi]]);
        if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
          yysize = yysize1;
        else
          return YYENOMEM;
      }
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return -1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yytname[yyarg[yyi++]]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= T_END)
    {
      yychar = T_END;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* optional_prune_variable: expression  */
#line 598 "grammar.y"
               {
      AstNode* node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeNop());
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 2883 "grammar.cpp"
    break;

  case 3: /* optional_prune_variable: variable_name "assignment" expression  */
#line 604 "grammar.y"
                                      {
      AstNode* node = parser->ast()->createNodeArray();
      AstNode* variableNode = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      node->addMember(variableNode);
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;    
  }
#line 2895 "grammar.cpp"
    break;

  case 4: /* with_collection: "identifier"  */
#line 614 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2903 "grammar.cpp"
    break;

  case 5: /* with_collection: bind_parameter_datasource_expected  */
#line 617 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 2911 "grammar.cpp"
    break;

  case 6: /* with_collection_list: with_collection  */
#line 623 "grammar.y"
                     {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2920 "grammar.cpp"
    break;

  case 7: /* with_collection_list: with_collection_list "," with_collection  */
#line 627 "grammar.y"
                                                  {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2929 "grammar.cpp"
    break;

  case 8: /* with_collection_list: with_collection_list with_collection  */
#line 631 "grammar.y"
                                          {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2938 "grammar.cpp"
    break;

  case 9: /* optional_with: %empty  */
#line 638 "grammar.y"
                 {
     }
#line 2945 "grammar.cpp"
    break;

  case 10: /* optional_with: with_key with_collection_list  */
#line 640 "grammar.y"
                                                              {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 2956 "grammar.cpp"
    break;

  case 11: /* with_key: "WITH keyword"  */
#line 648 "grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 2965 "grammar.cpp"
    break;

  case 12: /* queryStart: optional_with aql_statements  */
#line 654 "grammar.y"
                                 {
    }
#line 2972 "grammar.cpp"
    break;

  case 13: /* queryStart: sql_statements  */
#line 656 "grammar.y"
                  {

    }
#line 2980 "grammar.cpp"
    break;

  case 14: /* query: aql_statements  */
#line 662 "grammar.y"
                   {
    }
#line 2987 "grammar.cpp"
    break;

  case 15: /* query: sql_statements  */
#line 664 "grammar.y"
                   {
    }
#line 2994 "grammar.cpp"
    break;

  case 16: /* aql_statements: optional_statement_block_statements final_statement  */
#line 669 "grammar.y"
                                                       {

    }
#line 3002 "grammar.cpp"
    break;

  case 17: /* final_statement: return_statement  */
#line 674 "grammar.y"
                     {
    }
#line 3009 "grammar.cpp"
    break;

  case 18: /* final_statement: remove_statement  */
#line 676 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3017 "grammar.cpp"
    break;

  case 19: /* final_statement: insert_statement  */
#line 679 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3025 "grammar.cpp"
    break;

  case 20: /* final_statement: update_statement  */
#line 682 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3033 "grammar.cpp"
    break;

  case 21: /* final_statement: replace_statement  */
#line 685 "grammar.y"
                      {
      parser->ast()->scopes()->endNested();
    }
#line 3041 "grammar.cpp"
    break;

  case 22: /* final_statement: upsert_statement  */
#line 688 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3049 "grammar.cpp"
    break;

  case 23: /* optional_statement_block_statements: %empty  */
#line 694 "grammar.y"
                {
      parser->setAQL();
    }
#line 3057 "grammar.cpp"
    break;

  case 24: /* optional_statement_block_statements: optional_statement_block_statements statement_block_statement  */
#line 697 "grammar.y"
                                                                  {
    }
#line 3064 "grammar.cpp"
    break;

  case 25: /* statement_block_statement: for_statement  */
#line 702 "grammar.y"
                  {
    }
#line 3071 "grammar.cpp"
    break;

  case 26: /* statement_block_statement: let_statement  */
#line 704 "grammar.y"
                  {
    }
#line 3078 "grammar.cpp"
    break;

  case 27: /* statement_block_statement: filter_statement  */
#line 706 "grammar.y"
                     {
    }
#line 3085 "grammar.cpp"
    break;

  case 28: /* statement_block_statement: collect_statement  */
#line 708 "grammar.y"
                      {
    }
#line 3092 "grammar.cpp"
    break;

  case 29: /* statement_block_statement: sort_statement  */
#line 710 "grammar.y"
                   {
    }
#line 3099 "grammar.cpp"
    break;

  case 30: /* statement_block_statement: limit_statement  */
#line 712 "grammar.y"
                    {
    }
#line 3106 "grammar.cpp"
    break;

  case 31: /* statement_block_statement: window_statement  */
#line 714 "grammar.y"
                     {
    }
#line 3113 "grammar.cpp"
    break;

  case 32: /* statement_block_statement: remove_statement  */
#line 716 "grammar.y"
                     {
    }
#line 3120 "grammar.cpp"
    break;

  case 33: /* statement_block_statement: insert_statement  */
#line 718 "grammar.y"
                     {
    }
#line 3127 "grammar.cpp"
    break;

  case 34: /* statement_block_statement: update_statement  */
#line 720 "grammar.y"
                     {
    }
#line 3134 "grammar.cpp"
    break;

  case 35: /* statement_block_statement: replace_statement  */
#line 722 "grammar.y"
                      {
    }
#line 3141 "grammar.cpp"
    break;

  case 36: /* statement_block_statement: upsert_statement  */
#line 724 "grammar.y"
                     {
    }
#line 3148 "grammar.cpp"
    break;

  case 37: /* more_output_variables: variable_name  */
#line 729 "grammar.y"
                  {
      auto wrapperNode = parser->ast()->createNodeArray();
      parser->pushArray(wrapperNode);
      // This is guaranteed to be called on the first variable
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3160 "grammar.cpp"
    break;

  case 38: /* more_output_variables: more_output_variables "," variable_name  */
#line 736 "grammar.y"
                                                  {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3169 "grammar.cpp"
    break;

  case 39: /* for_output_variables: more_output_variables  */
#line 743 "grammar.y"
                          {
      (yyval.node) = parser->popArray();
    }
#line 3177 "grammar.cpp"
    break;

  case 40: /* prune_and_options: %empty  */
#line 749 "grammar.y"
                                                   {
      auto node = static_cast<AstNode*>(parser->peekStack());
      // Prune
      node->addMember(parser->ast()->createNodeNop());
      // Options
      node->addMember(parser->ast()->createNodeNop());
    }
#line 3189 "grammar.cpp"
    break;

  case 41: /* prune_and_options: "identifier" optional_prune_variable  */
#line 756 "grammar.y"
                                     {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);

      auto node = static_cast<AstNode*>(parser->peekStack());
      if (::caseInsensitiveEqual(operation, "PRUNE")) {
        /* Only Prune */
        TRI_ASSERT((yyvsp[0].node) != nullptr);
        // Prune
        node->addMember((yyvsp[0].node));
        // Options
        node->addMember(parser->ast()->createNodeNop());
      } else if (::caseInsensitiveEqual(operation, "OPTIONS")) {
        auto const* optionsArgument = (yyvsp[0].node)->getMember(1);
        /* Only Options */
        TRI_ASSERT(optionsArgument != nullptr);
        ::validateOptions(parser, optionsArgument, yylloc.first_line, yylloc.first_column);
        // Prune
        node->addMember(parser->ast()->createNodeNop());
        // Options
        node->addMember(optionsArgument);
      } else {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
    }
#line 3218 "grammar.cpp"
    break;

  case 42: /* prune_and_options: "identifier" optional_prune_variable "identifier" object  */
#line 780 "grammar.y"
                                                     {
      /* prune and options */
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (!::caseInsensitiveEqual(operation, "PRUNE")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      operation = {(yyvsp[-1].strval).value, (yyvsp[-1].strval).length};
      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      // Prune
      node->addMember((yyvsp[-2].node));
      // Options
      node->addMember((yyvsp[0].node));
    }
#line 3243 "grammar.cpp"
    break;

  case 43: /* traversal_graph_info: graph_direction_steps expression graph_subject  */
#line 803 "grammar.y"
                                                   {
      auto infoNode = parser->ast()->createNodeArray();
      // Direction
      infoNode->addMember((yyvsp[-2].node));
      // Source
      infoNode->addMember((yyvsp[-1].node));
      // Graph
      infoNode->addMember((yyvsp[0].node));
      (yyval.node) = infoNode;
    }
#line 3258 "grammar.cpp"
    break;

  case 44: /* shortest_path_graph_info: graph_direction "SHORTEST_PATH keyword" expression "identifier" expression graph_subject options  */
#line 816 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3266 "grammar.cpp"
    break;

  case 45: /* k_shortest_paths_graph_info: graph_direction "K_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 822 "grammar.y"
                                                                                            {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3274 "grammar.cpp"
    break;

  case 46: /* k_paths_graph_info: graph_direction_steps "K_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 828 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, (yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3282 "grammar.cpp"
    break;

  case 47: /* all_shortest_paths_graph_info: graph_direction "ALL_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 834 "grammar.y"
                                                                                              {
      auto nodeStart = parser->ast()->createNodeValueInt(0);
      auto nodeEnd = parser->ast()->createNodeValueInt(INT64_MAX-1);
      auto nodeRange = parser->ast()->createNodeRange(nodeStart, nodeEnd);
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), nodeRange), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3293 "grammar.cpp"
    break;

  case 48: /* $@1: %empty  */
#line 843 "grammar.y"
                                               {
      AstNode* variablesNode = static_cast<AstNode*>((yyvsp[-2].node));//这个是数组节点
      ::checkOutVariables(parser, variablesNode, 1, 1, "Collections and views FOR loops only allow a single return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      AstNode* variableNameNode = variablesNode->getMemberUnchecked(0);
      TRI_ASSERT(variableNameNode->isStringValue());
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);//现在创建了一个变量节点(同时也创建一个变量)
      parser->pushStack(variableNode);
    }
#line 3310 "grammar.cpp"
    break;

  case 49: /* for_statement: "FOR declaration" for_output_variables "IN keyword" expression $@1 for_options  */
#line 854 "grammar.y"
                  {
      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      Variable* variable = static_cast<Variable*>(variableNode->getData());

      AstNode* node = nullptr;
      AstNode* search = nullptr;
      AstNode* options = nullptr;

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);

        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW &&
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);//创建整个Node_type_for节点
      }

      parser->ast()->addOperation(node);//向整个ast的_root添加member
    }
#line 3355 "grammar.cpp"
    break;

  case 50: /* $@2: %empty  */
#line 894 "grammar.y"
                                                         {
      // Traversal
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 3, "Traversals only have one, two or three return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      parser->pushStack(variablesNode);
      parser->pushStack(graphInfoNode);
      // This stack push/pop magic is necessary to allow v, e, and p in the prune condition
    }
#line 3373 "grammar.cpp"
    break;

  case 51: /* for_statement: "FOR declaration" for_output_variables "IN keyword" traversal_graph_info $@2 prune_and_options  */
#line 906 "grammar.y"
                        {
      auto graphInfoNode = static_cast<AstNode*>(parser->popStack());
      auto variablesNode = static_cast<AstNode*>(parser->popStack());

      auto prune = graphInfoNode->getMember(3);
      TRI_ASSERT(prune != nullptr);
      if (prune->type == NODE_TYPE_ARRAY) {
        TRI_ASSERT(prune->numMembers() == 2);
        Ast::traverseReadOnly(prune->getMember(1), [&](AstNode const* node) {
          if (node->type == NODE_TYPE_REFERENCE && node->hasFlag(AstNodeFlagType::FLAG_SUBQUERY_REFERENCE)) {
            parser->registerParseError(TRI_ERROR_QUERY_PARSE, "PRUNE condition must not use a subquery", yylloc.first_line, yylloc.first_column);
          }
        });
        graphInfoNode->changeMember(3, prune->getMember(1));
      }
      auto node = parser->ast()->createNodeTraversal(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
      if(prune->type == NODE_TYPE_ARRAY && prune->getMember(0)->type != NODE_TYPE_NOP) {
        auto pruneLetVariableName = prune->getMember(0);
        parser->ast()->addOperation(pruneLetVariableName);
      }
    }
#line 3400 "grammar.cpp"
    break;

  case 52: /* for_statement: "FOR declaration" for_output_variables "IN keyword" shortest_path_graph_info  */
#line 928 "grammar.y"
                                                             {
      // Shortest Path
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 2, "SHORTEST_PATH must have one or two return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeShortestPath(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3417 "grammar.cpp"
    break;

  case 53: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_shortest_paths_graph_info  */
#line 940 "grammar.y"
                                                                {
      // K Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3434 "grammar.cpp"
    break;

  case 54: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_paths_graph_info  */
#line 952 "grammar.y"
                                                       {
      // K Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3451 "grammar.cpp"
    break;

  case 55: /* for_statement: "FOR declaration" for_output_variables "IN keyword" all_shortest_paths_graph_info  */
#line 964 "grammar.y"
                                                                  {
      // All Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "ALL_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::AllShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3468 "grammar.cpp"
    break;

  case 56: /* filter_statement: "FILTER declaration" expression  */
#line 979 "grammar.y"
                        {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3478 "grammar.cpp"
    break;

  case 57: /* let_statement: "LET declaration" let_list  */
#line 987 "grammar.y"
                   {
    }
#line 3485 "grammar.cpp"
    break;

  case 58: /* let_list: let_element  */
#line 992 "grammar.y"
                {
    }
#line 3492 "grammar.cpp"
    break;

  case 59: /* let_list: let_list "," let_element  */
#line 994 "grammar.y"
                                 {
    }
#line 3499 "grammar.cpp"
    break;

  case 60: /* let_element: variable_name "assignment" expression  */
#line 999 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 3508 "grammar.cpp"
    break;

  case 61: /* count_into: "WITH keyword" "identifier" "INTO keyword" variable_name  */
#line 1006 "grammar.y"
                                         {
      std::string_view operation((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if (!::caseInsensitiveEqual(operation, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", operation, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3521 "grammar.cpp"
    break;

  case 62: /* $@3: %empty  */
#line 1017 "grammar.y"
              {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3530 "grammar.cpp"
    break;

  case 63: /* collect_variable_list: "COLLECT declaration" $@3 collect_list  */
#line 1020 "grammar.y"
                   {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 3540 "grammar.cpp"
    break;

  case 64: /* collect_statement: "COLLECT declaration" count_into options  */
#line 1028 "grammar.y"
                                 {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      ::startCollectScope(scopes);

      // in the AST this is transformed to COLLECT AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3555 "grammar.cpp"
    break;

  case 65: /* collect_statement: collect_variable_list count_into options  */
#line 1038 "grammar.y"
                                             {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        VarSet variables{};
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      // in the AST this is transformed to COLLECT var = expr AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3573 "grammar.cpp"
    break;

  case 66: /* collect_statement: "COLLECT declaration" aggregate collect_optional_into options  */
#line 1051 "grammar.y"
                                                      {
      /* AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3602 "grammar.cpp"
    break;

  case 67: /* collect_statement: collect_variable_list aggregate collect_optional_into options  */
#line 1075 "grammar.y"
                                                                  {//这个
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {//开始一个新的CollectScope,要重新注册(实际上collect_variable_list和aggregate中已经注册在上一层的scopes了)
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }
        //检查聚集函数的有效性(用的是聚集函数而不是普通函数)
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      VarSet groupVars{};
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }
      // 组变量不能在聚集涉及到的变量中出现
      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          VarSet variablesUsed{};
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.contains(it)) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name, yylloc.first_line, yylloc.first_column);
            }
          }
        }
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3662 "grammar.cpp"
    break;

  case 68: /* collect_statement: collect_variable_list collect_optional_into options  */
#line 1130 "grammar.y"
                                                        {
      /* COLLECT var = expr INTO var OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3686 "grammar.cpp"
    break;

  case 69: /* collect_statement: collect_variable_list collect_optional_into keep options  */
#line 1149 "grammar.y"
                                                             {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }
        
      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "KEEP", (yyvsp[-1].node), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3719 "grammar.cpp"
    break;

  case 70: /* collect_list: collect_element  */
#line 1180 "grammar.y"
                    {
    }
#line 3726 "grammar.cpp"
    break;

  case 71: /* collect_list: collect_list "," collect_element  */
#line 1182 "grammar.y"
                                         {
    }
#line 3733 "grammar.cpp"
    break;

  case 72: /* collect_element: variable_name "assignment" expression  */
#line 1187 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3742 "grammar.cpp"
    break;

  case 73: /* collect_optional_into: %empty  */
#line 1194 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 3750 "grammar.cpp"
    break;

  case 74: /* collect_optional_into: "INTO keyword" variable_name  */
#line 1197 "grammar.y"
                         {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3758 "grammar.cpp"
    break;

  case 75: /* collect_optional_into: "INTO keyword" variable_name "assignment" expression  */
#line 1200 "grammar.y"
                                             {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3769 "grammar.cpp"
    break;

  case 76: /* variable_list: variable_name  */
#line 1209 "grammar.y"
                  {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3787 "grammar.cpp"
    break;

  case 77: /* variable_list: variable_list "," variable_name  */
#line 1222 "grammar.y"
                                        {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3805 "grammar.cpp"
    break;

  case 78: /* $@4: %empty  */
#line 1238 "grammar.y"
             {
      std::string_view operation((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!::caseInsensitiveEqual(operation, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", operation, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3819 "grammar.cpp"
    break;

  case 79: /* keep: "identifier" $@4 variable_list  */
#line 1246 "grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3828 "grammar.cpp"
    break;

  case 80: /* $@5: %empty  */
#line 1253 "grammar.y"
                {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3837 "grammar.cpp"
    break;

  case 81: /* aggregate: "AGGREGATE keyword" $@5 aggregate_list  */
#line 1256 "grammar.y"
                     {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3846 "grammar.cpp"
    break;

  case 82: /* aggregate_list: aggregate_element  */
#line 1263 "grammar.y"
                      {
    }
#line 3853 "grammar.cpp"
    break;

  case 83: /* aggregate_list: aggregate_list "," aggregate_element  */
#line 1265 "grammar.y"
                                             {
    }
#line 3860 "grammar.cpp"
    break;

  case 84: /* aggregate_element: variable_name "assignment" aggregate_function_call  */
#line 1270 "grammar.y"
                                                   {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3869 "grammar.cpp"
    break;

  case 85: /* $@6: %empty  */
#line 1277 "grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3879 "grammar.cpp"
    break;

  case 86: /* aggregate_function_call: function_name "(" $@6 optional_function_call_arguments ")"  */
#line 1281 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      // this works because the function name here is always NUL-terminated
      (yyval.node) = parser->ast()->createNodeAggregateFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 3889 "grammar.cpp"
    break;

  case 87: /* $@7: %empty  */
#line 1289 "grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3898 "grammar.cpp"
    break;

  case 88: /* sort_statement: "SORT declaration" $@7 sort_list  */
#line 1292 "grammar.y"
                {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 3908 "grammar.cpp"
    break;

  case 89: /* sort_list: sort_element  */
#line 1300 "grammar.y"
                 {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3916 "grammar.cpp"
    break;

  case 90: /* sort_list: sort_list "," sort_element  */
#line 1303 "grammar.y"
                                   {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3924 "grammar.cpp"
    break;

  case 91: /* sort_element: expression sort_direction  */
#line 1309 "grammar.y"
                              {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 3932 "grammar.cpp"
    break;

  case 92: /* sort_direction: %empty  */
#line 1315 "grammar.y"
                {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3940 "grammar.cpp"
    break;

  case 93: /* sort_direction: "ASC keyword"  */
#line 1318 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3948 "grammar.cpp"
    break;

  case 94: /* sort_direction: "DESC keyword"  */
#line 1321 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 3956 "grammar.cpp"
    break;

  case 95: /* sort_direction: simple_value  */
#line 1324 "grammar.y"
                 {
      (yyval.node) = (yyvsp[0].node);
    }
#line 3964 "grammar.cpp"
    break;

  case 96: /* limit_statement: "LIMIT declaration" expression  */
#line 1330 "grammar.y"
                       {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3974 "grammar.cpp"
    break;

  case 97: /* limit_statement: "LIMIT declaration" expression "," expression  */
#line 1335 "grammar.y"
                                          {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3983 "grammar.cpp"
    break;

  case 98: /* window_statement: "WINDOW declaration" object aggregate  */
#line 1342 "grammar.y"
                              {
      /* WINDOW {preceding:2, following:2} AGGREGATE x = AVG(x) */
      
      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/nullptr, /*aggrs*/(yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4003 "grammar.cpp"
    break;

  case 99: /* window_statement: "WINDOW declaration" expression "WITH keyword" object aggregate  */
#line 1357 "grammar.y"
                                                {
    /* WINDOW rangeVar WITH {preceding:"1d", following:"1d"} AGGREGATE x = AVG(x) */
    
    // validate aggregates
    if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/(yyvsp[-3].node), /*aggrs*/(yyvsp[0].node));
    parser->ast()->addOperation(node);
  }
#line 4023 "grammar.cpp"
    break;

  case 100: /* return_statement: "RETURN declaration" distinct_expression  */
#line 1375 "grammar.y"
                                 {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 4033 "grammar.cpp"
    break;

  case 101: /* in_or_into_collection: "IN keyword" in_or_into_collection_name  */
#line 1383 "grammar.y"
                                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4041 "grammar.cpp"
    break;

  case 102: /* in_or_into_collection: "INTO keyword" in_or_into_collection_name  */
#line 1386 "grammar.y"
                                      {
       (yyval.node) = (yyvsp[0].node);
     }
#line 4049 "grammar.cpp"
    break;

  case 103: /* remove_statement: "REMOVE command" expression in_or_into_collection options  */
#line 1392 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4061 "grammar.cpp"
    break;

  case 104: /* insert_statement: "INSERT command" expression in_or_into_collection options  */
#line 1402 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4073 "grammar.cpp"
    break;

  case 105: /* update_parameters: expression in_or_into_collection options  */
#line 1412 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4086 "grammar.cpp"
    break;

  case 106: /* update_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1420 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4099 "grammar.cpp"
    break;

  case 107: /* update_statement: "UPDATE command" update_parameters  */
#line 1431 "grammar.y"
                               {
    }
#line 4106 "grammar.cpp"
    break;

  case 108: /* replace_parameters: expression in_or_into_collection options  */
#line 1436 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4119 "grammar.cpp"
    break;

  case 109: /* replace_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1444 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4132 "grammar.cpp"
    break;

  case 110: /* replace_statement: "REPLACE command" replace_parameters  */
#line 1455 "grammar.y"
                                 {
    }
#line 4139 "grammar.cpp"
    break;

  case 111: /* update_or_replace: "UPDATE command"  */
#line 1460 "grammar.y"
             {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 4147 "grammar.cpp"
    break;

  case 112: /* update_or_replace: "REPLACE command"  */
#line 1463 "grammar.y"
              {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 4155 "grammar.cpp"
    break;

  case 113: /* upsert_input: object  */
#line 1469 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4163 "grammar.cpp"
    break;

  case 114: /* upsert_input: bind_parameter  */
#line 1472 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4171 "grammar.cpp"
    break;

  case 115: /* $@8: %empty  */
#line 1478 "grammar.y"
                      {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);
      parser->pushStack(variableNode);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      auto forNode = parser->ast()->createNodeForUpsert(Variable::NAME_CURRENT.data(), Variable::NAME_CURRENT.size(), parser->ast()->createNodeArray(), false);
      scopes->stackCurrentVariable(scopes->getVariable(Variable::NAME_CURRENT));
      parser->ast()->addOperation(forNode);
      parser->pushStack(forNode);
    }
#line 4193 "grammar.cpp"
    break;

  case 116: /* $@9: %empty  */
#line 1494 "grammar.y"
                 {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());
      auto filterNode = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(filterNode);
      
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(static_cast<Variable const*>(forNode->getMember(0)->getData()));
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.data(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4230 "grammar.cpp"
    break;

  case 117: /* upsert_statement: "UPSERT command" "FILTER declaration" $@8 expression $@9 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1525 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4251 "grammar.cpp"
    break;

  case 118: /* $@10: %empty  */
#line 1541 "grammar.y"
                          {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeForUpsert(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4297 "grammar.cpp"
    break;

  case 119: /* upsert_statement: "UPSERT command" upsert_input $@10 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1581 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4318 "grammar.cpp"
    break;

  case 120: /* quantifier: "all modifier"  */
#line 1600 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAll);
    }
#line 4326 "grammar.cpp"
    break;

  case 121: /* quantifier: "any modifier"  */
#line 1603 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAny);
    }
#line 4334 "grammar.cpp"
    break;

  case 122: /* quantifier: "none modifier"  */
#line 1606 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kNone);
    }
#line 4342 "grammar.cpp"
    break;

  case 123: /* $@11: %empty  */
#line 1612 "grammar.y"
               {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 4355 "grammar.cpp"
    break;

  case 124: /* distinct_expression: "DISTINCT modifier" $@11 expression  */
#line 1619 "grammar.y"
                 {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 4363 "grammar.cpp"
    break;

  case 125: /* distinct_expression: expression  */
#line 1622 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4371 "grammar.cpp"
    break;

  case 126: /* expression: operator_unary  */
#line 1628 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4379 "grammar.cpp"
    break;

  case 127: /* expression: operator_binary  */
#line 1631 "grammar.y"
                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4387 "grammar.cpp"
    break;

  case 128: /* expression: operator_ternary  */
#line 1634 "grammar.y"
                     {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4395 "grammar.cpp"
    break;

  case 129: /* expression: value_literal  */
#line 1637 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4403 "grammar.cpp"
    break;

  case 130: /* expression: reference  */
#line 1640 "grammar.y"
              {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4411 "grammar.cpp"
    break;

  case 131: /* expression: expression ".." expression  */
#line 1643 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4419 "grammar.cpp"
    break;

  case 132: /* function_name: "identifier"  */
#line 1649 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4427 "grammar.cpp"
    break;

  case 133: /* function_name: function_name "::" "identifier"  */
#line 1652 "grammar.y"
                                   {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->ast()->resources().registerString(temp);
      TRI_ASSERT(p != nullptr);

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 4442 "grammar.cpp"
    break;

  case 134: /* $@12: %empty  */
#line 1665 "grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4453 "grammar.cpp"
    break;

  case 135: /* function_call: function_name "(" $@12 optional_function_call_arguments ")"  */
#line 1670 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(static_cast<char const*>(parser->popStack()), list, false);
    }
#line 4462 "grammar.cpp"
    break;

  case 136: /* $@13: %empty  */
#line 1674 "grammar.y"
                  {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4471 "grammar.cpp"
    break;

  case 137: /* function_call: "like operator" "(" $@13 optional_function_call_arguments ")"  */
#line 1677 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", list, false);
    }
#line 4480 "grammar.cpp"
    break;

  case 138: /* operator_unary: "+ operator" expression  */
#line 1684 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node)));
    }
#line 4488 "grammar.cpp"
    break;

  case 139: /* operator_unary: "- operator" expression  */
#line 1687 "grammar.y"
                                    {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node)));
    }
#line 4496 "grammar.cpp"
    break;

  case 140: /* operator_unary: "not operator" expression  */
#line 1690 "grammar.y"
                                     {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 4504 "grammar.cpp"
    break;

  case 141: /* operator_binary: expression "or operator" expression  */
#line 1696 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4512 "grammar.cpp"
    break;

  case 142: /* operator_binary: expression "and operator" expression  */
#line 1699 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4520 "grammar.cpp"
    break;

  case 143: /* operator_binary: expression "+ operator" expression  */
#line 1702 "grammar.y"
                                 {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4528 "grammar.cpp"
    break;

  case 144: /* operator_binary: expression "- operator" expression  */
#line 1705 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4536 "grammar.cpp"
    break;

  case 145: /* operator_binary: expression "* operator" expression  */
#line 1708 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4544 "grammar.cpp"
    break;

  case 146: /* operator_binary: expression "/ operator" expression  */
#line 1711 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4552 "grammar.cpp"
    break;

  case 147: /* operator_binary: expression "% operator" expression  */
#line 1714 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4560 "grammar.cpp"
    break;

  case 148: /* operator_binary: expression "== operator" expression  */
#line 1717 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4568 "grammar.cpp"
    break;

  case 149: /* operator_binary: expression "!= operator" expression  */
#line 1720 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4576 "grammar.cpp"
    break;

  case 150: /* operator_binary: expression "< operator" expression  */
#line 1723 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4584 "grammar.cpp"
    break;

  case 151: /* operator_binary: expression "> operator" expression  */
#line 1726 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4592 "grammar.cpp"
    break;

  case 152: /* operator_binary: expression "<= operator" expression  */
#line 1729 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4600 "grammar.cpp"
    break;

  case 153: /* operator_binary: expression ">= operator" expression  */
#line 1732 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4608 "grammar.cpp"
    break;

  case 154: /* operator_binary: expression "IN keyword" expression  */
#line 1735 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4616 "grammar.cpp"
    break;

  case 155: /* operator_binary: expression "not in operator" expression  */
#line 1738 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4624 "grammar.cpp"
    break;

  case 156: /* operator_binary: expression "not operator" "like operator" expression  */
#line 1741 "grammar.y"
                                       {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4636 "grammar.cpp"
    break;

  case 157: /* operator_binary: expression "not operator" "~= operator" expression  */
#line 1748 "grammar.y"
                                              {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4648 "grammar.cpp"
    break;

  case 158: /* operator_binary: expression "not operator" "~! operator" expression  */
#line 1755 "grammar.y"
                                                  {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4659 "grammar.cpp"
    break;

  case 159: /* operator_binary: expression "like operator" expression  */
#line 1761 "grammar.y"
                                 {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
    }
#line 4670 "grammar.cpp"
    break;

  case 160: /* operator_binary: expression "~= operator" expression  */
#line 1767 "grammar.y"
                                        {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4681 "grammar.cpp"
    break;

  case 161: /* operator_binary: expression "~! operator" expression  */
#line 1773 "grammar.y"
                                            {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 4693 "grammar.cpp"
    break;

  case 162: /* operator_binary: expression quantifier "== operator" expression  */
#line 1780 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4701 "grammar.cpp"
    break;

  case 163: /* operator_binary: expression quantifier "!= operator" expression  */
#line 1783 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4709 "grammar.cpp"
    break;

  case 164: /* operator_binary: expression quantifier "< operator" expression  */
#line 1786 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4717 "grammar.cpp"
    break;

  case 165: /* operator_binary: expression quantifier "> operator" expression  */
#line 1789 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4725 "grammar.cpp"
    break;

  case 166: /* operator_binary: expression quantifier "<= operator" expression  */
#line 1792 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4733 "grammar.cpp"
    break;

  case 167: /* operator_binary: expression quantifier ">= operator" expression  */
#line 1795 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4741 "grammar.cpp"
    break;

  case 168: /* operator_binary: expression quantifier "IN keyword" expression  */
#line 1798 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4749 "grammar.cpp"
    break;

  case 169: /* operator_binary: expression quantifier "not in operator" expression  */
#line 1801 "grammar.y"
                                              {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4757 "grammar.cpp"
    break;

  case 170: /* operator_binary: expression "at least modifier" "(" expression ")" "== operator" expression  */
#line 1804 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4766 "grammar.cpp"
    break;

  case 171: /* operator_binary: expression "at least modifier" "(" expression ")" "!= operator" expression  */
#line 1808 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4775 "grammar.cpp"
    break;

  case 172: /* operator_binary: expression "at least modifier" "(" expression ")" "< operator" expression  */
#line 1812 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4784 "grammar.cpp"
    break;

  case 173: /* operator_binary: expression "at least modifier" "(" expression ")" "> operator" expression  */
#line 1816 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4793 "grammar.cpp"
    break;

  case 174: /* operator_binary: expression "at least modifier" "(" expression ")" "<= operator" expression  */
#line 1820 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4802 "grammar.cpp"
    break;

  case 175: /* operator_binary: expression "at least modifier" "(" expression ")" ">= operator" expression  */
#line 1824 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4811 "grammar.cpp"
    break;

  case 176: /* operator_binary: expression "at least modifier" "(" expression ")" "IN keyword" expression  */
#line 1828 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4820 "grammar.cpp"
    break;

  case 177: /* operator_binary: expression "at least modifier" "(" expression ")" "not in operator" expression  */
#line 1832 "grammar.y"
                                                                        {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4829 "grammar.cpp"
    break;

  case 178: /* operator_ternary: expression "?" expression ":" expression  */
#line 1839 "grammar.y"
                                                        {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4837 "grammar.cpp"
    break;

  case 179: /* operator_ternary: expression "?" ":" expression  */
#line 1842 "grammar.y"
                                             {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4845 "grammar.cpp"
    break;

  case 180: /* optional_function_call_arguments: %empty  */
#line 1848 "grammar.y"
                {
    }
#line 4852 "grammar.cpp"
    break;

  case 181: /* optional_function_call_arguments: function_arguments_list  */
#line 1850 "grammar.y"
                            {
    }
#line 4859 "grammar.cpp"
    break;

  case 182: /* function_arguments_list: expression  */
#line 1855 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4867 "grammar.cpp"
    break;

  case 183: /* function_arguments_list: function_arguments_list "," expression  */
#line 1858 "grammar.y"
                                               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4875 "grammar.cpp"
    break;

  case 184: /* compound_value: array  */
#line 1864 "grammar.y"
          {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4883 "grammar.cpp"
    break;

  case 185: /* compound_value: object  */
#line 1867 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4891 "grammar.cpp"
    break;

  case 186: /* $@14: %empty  */
#line 1873 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 4900 "grammar.cpp"
    break;

  case 187: /* array: "[" $@14 optional_array_elements "]"  */
#line 1876 "grammar.y"
                                            {
      (yyval.node) = parser->popArray();
    }
#line 4908 "grammar.cpp"
    break;

  case 188: /* optional_array_elements: %empty  */
#line 1882 "grammar.y"
                {
    }
#line 4915 "grammar.cpp"
    break;

  case 189: /* optional_array_elements: array_elements_list  */
#line 1884 "grammar.y"
                        {
    }
#line 4922 "grammar.cpp"
    break;

  case 190: /* optional_array_elements: array_elements_list ","  */
#line 1886 "grammar.y"
                                {
    }
#line 4929 "grammar.cpp"
    break;

  case 191: /* array_elements_list: array_element  */
#line 1891 "grammar.y"
                  {
    }
#line 4936 "grammar.cpp"
    break;

  case 192: /* array_elements_list: array_elements_list "," array_element  */
#line 1893 "grammar.y"
                                              {
    }
#line 4943 "grammar.cpp"
    break;

  case 193: /* array_element: expression  */
#line 1898 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4951 "grammar.cpp"
    break;

  case 194: /* for_options: %empty  */
#line 1904 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 4959 "grammar.cpp"
    break;

  case 195: /* for_options: "identifier" expression  */
#line 1907 "grammar.y"
                        {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      auto node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (::caseInsensitiveEqual(operation, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else {
        // everything else must be OPTIONS
        if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
        }
        ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 4989 "grammar.cpp"
    break;

  case 196: /* for_options: "identifier" expression "identifier" expression  */
#line 1932 "grammar.y"
                                            {
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!::caseInsensitiveEqual(operation, "SEARCH") ||
          !::caseInsensitiveEqual({(yyvsp[-1].strval).value, (yyvsp[-1].strval).length}, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 5011 "grammar.cpp"
    break;

  case 197: /* options: %empty  */
#line 1952 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5019 "grammar.cpp"
    break;

  case 198: /* options: "identifier" object  */
#line 1955 "grammar.y"
                    {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);

      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      (yyval.node) = (yyvsp[0].node);
    }
#line 5036 "grammar.cpp"
    break;

  case 199: /* $@15: %empty  */
#line 1970 "grammar.y"
                  {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 5045 "grammar.cpp"
    break;

  case 200: /* object: "{" $@15 optional_object_elements "}"  */
#line 1973 "grammar.y"
                                              {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 5053 "grammar.cpp"
    break;

  case 201: /* optional_object_elements: %empty  */
#line 1979 "grammar.y"
                {
    }
#line 5060 "grammar.cpp"
    break;

  case 202: /* optional_object_elements: object_elements_list  */
#line 1981 "grammar.y"
                         {
    }
#line 5067 "grammar.cpp"
    break;

  case 203: /* optional_object_elements: object_elements_list ","  */
#line 1983 "grammar.y"
                                 {
    }
#line 5074 "grammar.cpp"
    break;

  case 204: /* object_elements_list: object_element  */
#line 1988 "grammar.y"
                   {
    }
#line 5081 "grammar.cpp"
    break;

  case 205: /* object_elements_list: object_elements_list "," object_element  */
#line 1990 "grammar.y"
                                                {
    }
#line 5088 "grammar.cpp"
    break;

  case 206: /* object_element: "identifier"  */
#line 1995 "grammar.y"
             {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);

      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable(name, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", name, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 5109 "grammar.cpp"
    break;

  case 207: /* object_element: object_element_name ":" expression  */
#line 2011 "grammar.y"
                                           {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5118 "grammar.cpp"
    break;

  case 208: /* object_element: "bind parameter" ":" expression  */
#line 2015 "grammar.y"
                                   {
      // bind-parameter : attribute-value
      std::string_view name((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter(name);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 5133 "grammar.cpp"
    break;

  case 209: /* object_element: "[" expression "]" ":" expression  */
#line 2025 "grammar.y"
                                                             {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 5142 "grammar.cpp"
    break;

  case 210: /* array_filter_operator: "?"  */
#line 2032 "grammar.y"
               {
      (yyval.intval) = 1;
    }
#line 5150 "grammar.cpp"
    break;

  case 211: /* array_filter_operator: array_filter_operator "?"  */
#line 2035 "grammar.y"
                                     {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5158 "grammar.cpp"
    break;

  case 212: /* array_map_operator: "* operator"  */
#line 2041 "grammar.y"
            {
      (yyval.intval) = 1;
    }
#line 5166 "grammar.cpp"
    break;

  case 213: /* array_map_operator: array_map_operator "* operator"  */
#line 2044 "grammar.y"
                               {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5174 "grammar.cpp"
    break;

  case 214: /* optional_array_filter: %empty  */
#line 2050 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5182 "grammar.cpp"
    break;

  case 215: /* optional_array_filter: "FILTER declaration" expression  */
#line 2053 "grammar.y"
                        {
      // FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter(nullptr, (yyvsp[0].node));
    }
#line 5191 "grammar.cpp"
    break;

  case 216: /* optional_array_filter: quantifier "FILTER declaration" expression  */
#line 2057 "grammar.y"
                                   {
      // ALL|ANY|NONE|AT LEAST FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5200 "grammar.cpp"
    break;

  case 217: /* optional_array_filter: "at least modifier" "(" expression ")" "FILTER declaration" expression  */
#line 2061 "grammar.y"
                                                             {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeArrayFilter(quantifier, (yyvsp[0].node));
    }
#line 5209 "grammar.cpp"
    break;

  case 218: /* optional_array_filter: expression "FILTER declaration" expression  */
#line 2065 "grammar.y"
                                   {
      // 1    FILTER filter-condition
      // 2..5 FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5219 "grammar.cpp"
    break;

  case 219: /* optional_array_limit: %empty  */
#line 2073 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5227 "grammar.cpp"
    break;

  case 220: /* optional_array_limit: "LIMIT declaration" expression  */
#line 2076 "grammar.y"
                       {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 5235 "grammar.cpp"
    break;

  case 221: /* optional_array_limit: "LIMIT declaration" expression "," expression  */
#line 2079 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5243 "grammar.cpp"
    break;

  case 222: /* optional_array_return: %empty  */
#line 2085 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5251 "grammar.cpp"
    break;

  case 223: /* optional_array_return: "RETURN declaration" expression  */
#line 2088 "grammar.y"
                        {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5259 "grammar.cpp"
    break;

  case 224: /* graph_collection: "identifier"  */
#line 2094 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5267 "grammar.cpp"
    break;

  case 225: /* graph_collection: bind_parameter_datasource_expected  */
#line 2097 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5275 "grammar.cpp"
    break;

  case 226: /* graph_collection: graph_direction "identifier"  */
#line 2100 "grammar.y"
                             {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 5284 "grammar.cpp"
    break;

  case 227: /* graph_collection: graph_direction bind_parameter  */
#line 2104 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 5292 "grammar.cpp"
    break;

  case 228: /* graph_collection_list: graph_collection  */
#line 2110 "grammar.y"
                      {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5301 "grammar.cpp"
    break;

  case 229: /* graph_collection_list: graph_collection_list "," graph_collection  */
#line 2114 "grammar.y"
                                                    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5310 "grammar.cpp"
    break;

  case 230: /* graph_subject: graph_collection  */
#line 2121 "grammar.y"
                     {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5321 "grammar.cpp"
    break;

  case 231: /* $@16: %empty  */
#line 2127 "grammar.y"
                             {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 5331 "grammar.cpp"
    break;

  case 232: /* graph_subject: graph_collection "," $@16 graph_collection_list  */
#line 2131 "grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5341 "grammar.cpp"
    break;

  case 233: /* graph_subject: "GRAPH keyword" bind_parameter  */
#line 2136 "grammar.y"
                           {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 5350 "grammar.cpp"
    break;

  case 234: /* graph_subject: "GRAPH keyword" "quoted string"  */
#line 2140 "grammar.y"
                            {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5359 "grammar.cpp"
    break;

  case 235: /* graph_subject: "GRAPH keyword" "identifier"  */
#line 2144 "grammar.y"
                     {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5368 "grammar.cpp"
    break;

  case 236: /* graph_direction: "outbound modifier"  */
#line 2153 "grammar.y"
               {
      (yyval.intval) = 2;
    }
#line 5376 "grammar.cpp"
    break;

  case 237: /* graph_direction: "inbound modifier"  */
#line 2156 "grammar.y"
              {
      (yyval.intval) = 1;
    }
#line 5384 "grammar.cpp"
    break;

  case 238: /* graph_direction: "any modifier"  */
#line 2159 "grammar.y"
          {
      (yyval.intval) = 0;
    }
#line 5392 "grammar.cpp"
    break;

  case 239: /* graph_direction_steps: graph_direction  */
#line 2165 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 5400 "grammar.cpp"
    break;

  case 240: /* graph_direction_steps: expression graph_direction  */
#line 2168 "grammar.y"
                                                {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 5408 "grammar.cpp"
    break;

  case 241: /* reference: "identifier"  */
#line 2174 "grammar.y"
             {
      AstNode* node = nullptr;

      auto ast = parser->ast();
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto variable = ast->scopes()->getVariable(variableName, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (parser->checkVariableNameIsCurrent(variableName)) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {//为collection时
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query().resolver();
        node = ast->createNodeDataSource(resolver, variableName, arangodb::AccessMode::Type::READ, true, false,parser->isSQL());
        if(parser->isSQL()){
          parser->addSQLCollectionNode(node);
        }
        if(parser->isSelectSubQuery()){
          parser->pushSelectSubQueryPending(node,std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
        }
      }
      TRI_ASSERT(node != nullptr);

      if(parser->isSelect()){
        parser->pushSelectPending(node,std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      }
      
      (yyval.node) = node;
    }
#line 5452 "grammar.cpp"
    break;

  case 242: /* reference: compound_value  */
#line 2213 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5460 "grammar.cpp"
    break;

  case 243: /* reference: bind_parameter  */
#line 2216 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5468 "grammar.cpp"
    break;

  case 244: /* reference: function_call  */
#line 2219 "grammar.y"
                  {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5477 "grammar.cpp"
    break;

  case 245: /* reference: "(" expression ")"  */
#line 2223 "grammar.y"
                              {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      } else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 5491 "grammar.cpp"
    break;

  case 246: /* $@17: %empty  */
#line 2232 "grammar.y"
           {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 5500 "grammar.cpp"
    break;

  case 247: /* reference: "(" $@17 query ")"  */
#line 2235 "grammar.y"
                    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      if(parser->isSelect()){
        parser->pushSelectSubQueryQueue(subQuery);
      }else{
        parser->ast()->addOperation(subQuery);
      }
      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName, node);
    }
#line 5518 "grammar.cpp"
    break;

  case 248: /* reference: reference '.' "identifier"  */
#line 2248 "grammar.y"
                                           {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), name));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), name);
      }
    }
#line 5538 "grammar.cpp"
    break;

  case 249: /* reference: reference '.' bind_parameter  */
#line 2263 "grammar.y"
                                                 {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 5556 "grammar.cpp"
    break;

  case 250: /* reference: reference '.' "* operator"  */
#line 2276 "grammar.y"
                         {
    (yyvsp[-2].node)->setFlag(FLAG_TIMES);
    (yyval.node) = (yyvsp[-2].node);
  }
#line 5565 "grammar.cpp"
    break;

  case 251: /* $@18: %empty  */
#line 2280 "grammar.y"
                           {      
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 5574 "grammar.cpp"
    break;

  case 252: /* reference: reference "[" $@18 ndarray_expression_list "]"  */
#line 2283 "grammar.y"
                                                          {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-4].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-4].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1),parser->popArray()));
        (yyval.node) = (yyvsp[-4].node);
      } else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-4].node), parser->popArray());
      }
    }
#line 5592 "grammar.cpp"
    break;

  case 253: /* $@19: %empty  */
#line 2296 "grammar.y"
                                                 {
      // variable expansion, e.g. variable[?], with optional FILTER clause
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5619 "grammar.cpp"
    break;

  case 254: /* reference: reference "[" array_filter_operator $@19 optional_array_filter "]"  */
#line 2317 "grammar.y"
                                                          {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-5].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
        (yyvsp[-5].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-5].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
      }
    }
#line 5641 "grammar.cpp"
    break;

  case 255: /* $@20: %empty  */
#line 2334 "grammar.y"
                                              {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5668 "grammar.cpp"
    break;

  case 256: /* reference: reference "[" array_map_operator $@20 optional_array_filter optional_array_limit optional_array_return "]"  */
#line 2355 "grammar.y"
                                                                                                     {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-3].node) != nullptr) {
        // array filter members are [quantifier, filter]
        // quantifier is optional.
        TRI_ASSERT((yyvsp[-3].node)->type == NODE_TYPE_ARRAY_FILTER);
        TRI_ASSERT((yyvsp[-3].node)->numMembers() == 2);
        if ((yyvsp[-3].node)->getMember(0) != nullptr && (yyvsp[-3].node)->getMember(0)->type != NODE_TYPE_NOP) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected quantifier value found for array expansion operation.", yylloc.first_line, yylloc.first_column);
        }
      }

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      } else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 5700 "grammar.cpp"
    break;

  case 257: /* ndarray_expression_list: ndarray_expression  */
#line 2385 "grammar.y"
                       {

    }
#line 5708 "grammar.cpp"
    break;

  case 258: /* ndarray_expression_list: ndarray_expression_list "," ndarray_expression  */
#line 2388 "grammar.y"
                                                       {

    }
#line 5716 "grammar.cpp"
    break;

  case 259: /* ndarray_expression: expression  */
#line 2393 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5724 "grammar.cpp"
    break;

  case 260: /* ndarray_expression: range_index  */
#line 2396 "grammar.y"
                {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5732 "grammar.cpp"
    break;

  case 261: /* ndarray_expression: variable_name "{" expression "}"  */
#line 2399 "grammar.y"
                                                         {
      parser->pushArrayElement(parser->ast()->createNodeNameIndex(std::string_view{(yyvsp[-3].strval).value, (yyvsp[-3].strval).length},(yyvsp[-1].node)));
    }
#line 5740 "grammar.cpp"
    break;

  case 262: /* ndarray_expression: variable_name "{" range_index "}"  */
#line 2402 "grammar.y"
                                                          {
      parser->pushArrayElement(parser->ast()->createNodeNameIndex(std::string_view{(yyvsp[-3].strval).value, (yyvsp[-3].strval).length},(yyvsp[-1].node)));
    }
#line 5748 "grammar.cpp"
    break;

  case 263: /* range_index: expression_or_none ":" expression_or_none interval_element  */
#line 2407 "grammar.y"
                                                                {
    (yyval.node)=parser->ast()->createNodeRangeIndexed((yyvsp[-3].node),(yyvsp[-1].node),(yyvsp[0].node));
  }
#line 5756 "grammar.cpp"
    break;

  case 264: /* expression_or_none: %empty  */
#line 2413 "grammar.y"
              {
      (yyval.node) = parser->ast()->createNodeNop();
    }
#line 5764 "grammar.cpp"
    break;

  case 265: /* expression_or_none: expression  */
#line 2416 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5772 "grammar.cpp"
    break;

  case 266: /* interval_element: %empty  */
#line 2421 "grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeNop();
    }
#line 5780 "grammar.cpp"
    break;

  case 267: /* interval_element: ":" expression  */
#line 2424 "grammar.y"
                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5788 "grammar.cpp"
    break;

  case 268: /* simple_value: value_literal  */
#line 2431 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5796 "grammar.cpp"
    break;

  case 269: /* simple_value: bind_parameter  */
#line 2434 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5804 "grammar.cpp"
    break;

  case 270: /* numeric_value: "integer number"  */
#line 2440 "grammar.y"
              {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5813 "grammar.cpp"
    break;

  case 271: /* numeric_value: "number"  */
#line 2444 "grammar.y"
             {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5822 "grammar.cpp"
    break;

  case 272: /* value_literal: "quoted string"  */
#line 2451 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5830 "grammar.cpp"
    break;

  case 273: /* value_literal: numeric_value  */
#line 2454 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5838 "grammar.cpp"
    break;

  case 274: /* value_literal: "null"  */
#line 2457 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 5846 "grammar.cpp"
    break;

  case 275: /* value_literal: "true"  */
#line 2460 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 5854 "grammar.cpp"
    break;

  case 276: /* value_literal: "false"  */
#line 2463 "grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 5862 "grammar.cpp"
    break;

  case 277: /* in_or_into_collection_name: "identifier"  */
#line 2469 "grammar.y"
             {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5872 "grammar.cpp"
    break;

  case 278: /* in_or_into_collection_name: "quoted string"  */
#line 2474 "grammar.y"
                    {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5882 "grammar.cpp"
    break;

  case 279: /* in_or_into_collection_name: "bind data source parameter"  */
#line 2479 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5895 "grammar.cpp"
    break;

  case 280: /* bind_parameter: "bind data source parameter"  */
#line 2490 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5908 "grammar.cpp"
    break;

  case 281: /* bind_parameter: "bind parameter"  */
#line 2498 "grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameter(name);
    }
#line 5917 "grammar.cpp"
    break;

  case 282: /* bind_parameter_datasource_expected: "bind data source parameter"  */
#line 2505 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5930 "grammar.cpp"
    break;

  case 283: /* bind_parameter_datasource_expected: "bind parameter"  */
#line 2513 "grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5939 "grammar.cpp"
    break;

  case 284: /* object_element_name: "identifier"  */
#line 2520 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5947 "grammar.cpp"
    break;

  case 285: /* object_element_name: "quoted string"  */
#line 2523 "grammar.y"
                    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5955 "grammar.cpp"
    break;

  case 286: /* variable_name: "identifier"  */
#line 2528 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5963 "grammar.cpp"
    break;

  case 287: /* $@21: %empty  */
#line 2539 "grammar.y"
                             {
      //开始sql
      parser->beginSQL();
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
      parser->beginSelect();
    }
#line 5975 "grammar.cpp"
    break;

  case 288: /* $@22: %empty  */
#line 2545 "grammar.y"
                                 {parser->endSelect(); }
#line 5981 "grammar.cpp"
    break;

  case 289: /* $@23: %empty  */
#line 2545 "grammar.y"
                                                                         {
      //设置let节点
      parser->executeSelectPendWithoutPop();
      parser->produceAlias();
    }
#line 5991 "grammar.cpp"
    break;

  case 290: /* sql_statements: with_statements "select" $@21 distinct_label select_list $@22 from_statements $@23 where_statements group_by_statements order_by_statements limit_statements  */
#line 2549 "grammar.y"
                                                                               {
      
      //如果select中有嵌套子查询,执行判定,产生子查询的let节点
      parser->executeSelectSubQueryPend();
      parser->produceSelectSubQuery();
      //设置return节点,
      parser->executeSelectPend();

      auto node =static_cast<AstNode*>(parser->popStack());
      AstNode* retNode = nullptr;

      TRI_ASSERT(node->type == NODE_TYPE_OBJECT);

      if(node->numMembers()==1){//不return对象,直接return对象中的一个内容
        node = node->getMemberUnchecked(0)->getMemberUnchecked(0);
      }

      if((yyvsp[-8].boolval)==true){//存在distinct
        auto const scopeType = parser->ast()->scopes()->type();

        if (scopeType == AQL_SCOPE_MAIN ||
            scopeType == AQL_SCOPE_SUBQUERY) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
        }
        AstNode* disNode = parser->ast()->createNodeDistinct(node);
        retNode = parser->ast()->createNodeReturn(disNode);

      }else{
        retNode = parser->ast()->createNodeReturn(node);
      }
      
      parser->ast()->addOperation(retNode); 
      parser->ast()->scopes()->endNested();
      //结束sql
      parser->endSQL();
    }
#line 6032 "grammar.cpp"
    break;

  case 291: /* with_statements: %empty  */
#line 2588 "grammar.y"
             {

    }
#line 6040 "grammar.cpp"
    break;

  case 292: /* with_statements: "WITH keyword" with_list  */
#line 2591 "grammar.y"
                      {
      
    }
#line 6048 "grammar.cpp"
    break;

  case 293: /* with_list: with_element  */
#line 2597 "grammar.y"
                 {

    }
#line 6056 "grammar.cpp"
    break;

  case 294: /* with_list: with_list "," with_element  */
#line 2600 "grammar.y"
                                  {

    }
#line 6064 "grammar.cpp"
    break;

  case 295: /* with_element: variable_name "as" expression  */
#line 2606 "grammar.y"
                                 {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 6073 "grammar.cpp"
    break;

  case 296: /* from_statements: %empty  */
#line 2612 "grammar.y"
               {

    }
#line 6081 "grammar.cpp"
    break;

  case 297: /* from_statements: "from" collection_pair_list  */
#line 2615 "grammar.y"
                                {

  }
#line 6089 "grammar.cpp"
    break;

  case 298: /* collection_pair_list: collection_element  */
#line 2621 "grammar.y"
                       {

    }
#line 6097 "grammar.cpp"
    break;

  case 299: /* collection_pair_list: collection_pair_list "," collection_element  */
#line 2625 "grammar.y"
                                                    {

    }
#line 6105 "grammar.cpp"
    break;

  case 300: /* collection_element: collection_pair  */
#line 2631 "grammar.y"
                    {

    }
#line 6113 "grammar.cpp"
    break;

  case 301: /* collection_element: collection_pair "join" collection_pair "on" expression  */
#line 2634 "grammar.y"
                                                           {
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 6122 "grammar.cpp"
    break;

  case 302: /* $@24: %empty  */
#line 2641 "grammar.y"
                                  {
      //得到变量名
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      AstNode* variableNameNode = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      //现在创建了一个变量节点(同时也创建一个变量)
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      Variable* variable = static_cast<Variable*>(variableNode->getData());
      //创建整个Node_type_for节点
      AstNode* options = nullptr;
      AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      //向整个ast的_root添加member
      parser->ast()->addOperation(node);
    }
#line 6140 "grammar.cpp"
    break;

  case 303: /* collection_pair: expression "as" variable_name $@24 unnest_statement  */
#line 2653 "grammar.y"
                       {

    }
#line 6148 "grammar.cpp"
    break;

  case 304: /* $@25: %empty  */
#line 2656 "grammar.y"
               {
      if((yyvsp[0].node)->isValueType(arangodb::aql::AstNodeValueType::VALUE_TYPE_STRING)){
        //现在创建了一个变量节点(同时也创建一个变量)
        parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
        AstNode* variableNode = parser->ast()->createNodeVariable((yyvsp[0].node)->getStringView(), true);
        Variable* variable = static_cast<Variable*>(variableNode->getData());
        //创建整个Node_type_for节点
        AstNode* options = nullptr;
        AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[0].node), options);
        //向整个ast的_root添加member
        parser->ast()->addOperation(node);
      }else if((yyvsp[0].node)->type ==NODE_TYPE_REFERENCE) {
        //找到引用的变量
        const Variable* expVariable = static_cast<Variable*>((yyvsp[0].node)->getData());
        //可能找到被覆盖的变量，所以用变量名去找真正的变量
        expVariable=parser->ast()->scopes()->getRealVariable(expVariable->name, true);
        //重新生成引用节点
        AstNode* refNode = parser->ast()->createNodeReference(expVariable);
        parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
        //覆盖掉原有的变量
        AstNode* variableNode = parser->ast()->createNodeCoverVariable(expVariable->name, false);
        Variable* variable = static_cast<Variable*>(variableNode->getData());
        //创建整个Node_type_for节点
        AstNode* options = nullptr;
        AstNode* node = parser->ast()->createNodeFor(variable, refNode, options);
        //向整个ast的_root添加member
        parser->ast()->addOperation(node);

      }else{
        parser->kk();
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "you need an alia", yylloc.first_line, yylloc.first_column);
      }
    }
#line 6186 "grammar.cpp"
    break;

  case 305: /* collection_pair: expression $@25 unnest_statement  */
#line 2688 "grammar.y"
                       {

    }
#line 6194 "grammar.cpp"
    break;

  case 306: /* unnest_statement: %empty  */
#line 2693 "grammar.y"
             {

    }
#line 6202 "grammar.cpp"
    break;

  case 307: /* unnest_statement: "unnest" expression_list  */
#line 2696 "grammar.y"
                             {

    }
#line 6210 "grammar.cpp"
    break;

  case 308: /* $@26: %empty  */
#line 2699 "grammar.y"
                 {       
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node); 
    }
#line 6219 "grammar.cpp"
    break;

  case 309: /* unnest_statement: "unnest_all" $@26 optional_axis_name_list  */
#line 2702 "grammar.y"
                              {
      parser->ast()->injectOptionForNodeFor(parser->popArray());
    }
#line 6227 "grammar.cpp"
    break;

  case 310: /* expression_list: expression_element  */
#line 2707 "grammar.y"
                       {

    }
#line 6235 "grammar.cpp"
    break;

  case 311: /* expression_list: expression_list "- operator" "> operator" expression_element  */
#line 2710 "grammar.y"
                                                     {

    }
#line 6243 "grammar.cpp"
    break;

  case 312: /* expression_element: expression "as" variable_name  */
#line 2715 "grammar.y"
                                 {
      //得到变量名
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      AstNode* variableNameNode = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      //现在创建了一个变量节点(同时也创建一个变量)
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      Variable* variable = static_cast<Variable*>(variableNode->getData());
      //创建整个Node_type_for节点
      AstNode* options = nullptr;
      AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      //向整个ast的_root添加member
      parser->ast()->addOperation(node);
  }
#line 6261 "grammar.cpp"
    break;

  case 313: /* optional_axis_name_list: %empty  */
#line 2731 "grammar.y"
             {

    }
#line 6269 "grammar.cpp"
    break;

  case 314: /* optional_axis_name_list: "as" axis_name  */
#line 2734 "grammar.y"
                  {

  }
#line 6277 "grammar.cpp"
    break;

  case 315: /* optional_axis_name_list: "as" axis_name "(" axis_name_list ")"  */
#line 2737 "grammar.y"
                                                 {
      
   }
#line 6285 "grammar.cpp"
    break;

  case 316: /* axis_name_list: axis_name  */
#line 2743 "grammar.y"
              {

    }
#line 6293 "grammar.cpp"
    break;

  case 317: /* axis_name_list: axis_name_list "," axis_name  */
#line 2746 "grammar.y"
                                     {

    }
#line 6301 "grammar.cpp"
    break;

  case 318: /* axis_name: "null"  */
#line 2751 "grammar.y"
           {
      auto node = parser->ast()->createNodeNop();
      parser->pushArrayElement(node);
    }
#line 6310 "grammar.cpp"
    break;

  case 319: /* axis_name: variable_name  */
#line 2755 "grammar.y"
                  {
      auto node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 6319 "grammar.cpp"
    break;

  case 320: /* distinct_label: %empty  */
#line 2762 "grammar.y"
             {
      (yyval.boolval)=false;
    }
#line 6327 "grammar.cpp"
    break;

  case 321: /* distinct_label: "DISTINCT modifier"  */
#line 2765 "grammar.y"
               {
      (yyval.boolval)=true;
    }
#line 6335 "grammar.cpp"
    break;

  case 322: /* select_list: select_element  */
#line 2771 "grammar.y"
                  {

    }
#line 6343 "grammar.cpp"
    break;

  case 323: /* select_list: select_list "," select_element  */
#line 2774 "grammar.y"
                                      {

    }
#line 6351 "grammar.cpp"
    break;

  case 324: /* select_element: expression "as" variable_name  */
#line 2779 "grammar.y"
                                  {
      if(parser->usedNULLAlia()){
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "The previous one requires an alias", yylloc.first_line, yylloc.first_column);
      }
      parser->disableNULLAlia();
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, (yyvsp[-2].node));
      if(!(yyvsp[-2].node)->hasFlag(FLAG_TIMES)){//.*语法创建的不生成别名
        parser->pushAliasQueue((yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      }
    }
#line 6366 "grammar.cpp"
    break;

  case 325: /* select_element: expression  */
#line 2789 "grammar.y"
               {
      if((yyvsp[0].node)->type == NODE_TYPE_ATTRIBUTE_ACCESS|| (yyvsp[0].node)->type == NODE_TYPE_COLLECTION){
        if(parser->usedNULLAlia()){
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "The previous one requires an alias", yylloc.first_line, yylloc.first_column);
        }
        parser->disableNULLAlia();
        //TODO : 名称冲突换成临时名
        parser->pushObjectElement((yyvsp[0].node)->getStringValue(), (yyvsp[0].node)->getStringLength(), (yyvsp[0].node));
        //.*语法创建的不生成别名,NODE_TYPE_COLLECTION也不生成别名
        if(!(yyvsp[0].node)->hasFlag(FLAG_TIMES) && (yyvsp[0].node)->type != NODE_TYPE_COLLECTION){
          parser->pushAliasQueue((yyvsp[0].node),(yyvsp[0].node)->getStringView());
        }
      }else{
        if(parser->allowNULLAlia()){
          //如果select子句中只有一个元素,可以接受没有别名,随便注册一个别名(这个名称不会被使用)
          const char* name= parser->ast()->resources().registerString("_",1);
          parser->pushObjectElement(name, 1, (yyvsp[0].node));
          parser->useNULLAlia();
          parser->disableNULLAlia();
        }else{
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "you need an alias", yylloc.first_line, yylloc.first_column); 
        }
      }
    }
#line 6395 "grammar.cpp"
    break;

  case 326: /* where_statements: %empty  */
#line 2815 "grammar.y"
                {
    }
#line 6402 "grammar.cpp"
    break;

  case 327: /* where_statements: "where" expression  */
#line 2817 "grammar.y"
                       {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 6412 "grammar.cpp"
    break;

  case 328: /* group_by_statements: %empty  */
#line 2825 "grammar.y"
                {
      //检查是否有聚集
      parser->produceAggregateStep1();
      AstNode* aggNode=parser->produceAggregateStep2();
      if(aggNode->numMembers()!=0){ //有聚集函数,创建聚集
        VarSet variablesIntroduced{};
        auto scopes = parser->ast()->scopes();

        if (::startCollectScope(scopes)) {
          ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, aggNode);
        }
        AstNode const* into = ::getIntoVariable(parser, nullptr);
        AstNode const* intoExpression = ::getIntoExpression(nullptr);

        auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), aggNode, into, intoExpression, nullptr, nullptr);
        parser->ast()->addOperation(node);
      }
      parser->produceAggAlias();

    }
#line 6437 "grammar.cpp"
    break;

  case 329: /* $@27: %empty  */
#line 2845 "grammar.y"
                           {parser->produceAggregateStep1();}
#line 6443 "grammar.cpp"
    break;

  case 330: /* group_by_statements: group_by_variable_list $@27 having_statements  */
#line 2845 "grammar.y"
                                                                                {

      parser->setHaving((yyvsp[0].node));
      parser->processHaving();
      AstNode* aggNode=parser->produceAggregateStep2();

      auto scopes = parser->ast()->scopes();
      VarSet variablesIntroduced{};
      if (::startCollectScope(scopes)) {//开始一个新的CollectScope,要重新注册(实际上collect_variable_list和aggregate中已经注册在上一层的scopes了)
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, aggNode);
      }

      AstNode const* into = ::getIntoVariable(parser, nullptr);
      AstNode const* intoExpression = ::getIntoExpression(nullptr);

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node),aggNode,into, intoExpression, nullptr, nullptr);
      parser->ast()->addOperation(node);

      parser->produceAggAlias();
      //添加having
      if((yyvsp[0].node)!=nullptr){
        auto filterNode = parser->ast()->createNodeFilter((yyvsp[0].node));
        parser->ast()->addOperation(filterNode);
      }
    }
#line 6474 "grammar.cpp"
    break;

  case 331: /* $@28: %empty  */
#line 2873 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 6483 "grammar.cpp"
    break;

  case 332: /* group_by_variable_list: "group" "by" $@28 group_by_list  */
#line 2876 "grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 6493 "grammar.cpp"
    break;

  case 333: /* group_by_list: group_by_element  */
#line 2883 "grammar.y"
                    {

    }
#line 6501 "grammar.cpp"
    break;

  case 334: /* group_by_list: group_by_list "," group_by_element  */
#line 2887 "grammar.y"
                                          {

    }
#line 6509 "grammar.cpp"
    break;

  case 335: /* group_by_element: expression  */
#line 2892 "grammar.y"
              {
      std::string vName = parser->ast()->variables()->nextName();
      auto node = parser->ast()->createNodeAssign(vName.c_str(), vName.size(), (yyvsp[0].node),false);
      parser->updateWillReturnNode(node);
      parser->pushArrayElement(node);
    }
#line 6520 "grammar.cpp"
    break;

  case 336: /* having_statements: %empty  */
#line 2900 "grammar.y"
             {
      (yyval.node)=nullptr;
    }
#line 6528 "grammar.cpp"
    break;

  case 337: /* having_statements: "having" expression  */
#line 2903 "grammar.y"
                        {
      (yyval.node)=(yyvsp[0].node);
    }
#line 6536 "grammar.cpp"
    break;

  case 338: /* order_by_statements: %empty  */
#line 2908 "grammar.y"
                 {
    }
#line 6543 "grammar.cpp"
    break;

  case 339: /* $@29: %empty  */
#line 2910 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 6552 "grammar.cpp"
    break;

  case 340: /* order_by_statements: "order" "by" $@29 sort_list  */
#line 2913 "grammar.y"
                {
      auto list = static_cast<AstNode*>(parser->popStack());
      parser->processOrderBy(list);
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 6563 "grammar.cpp"
    break;

  case 341: /* limit_statements: %empty  */
#line 2921 "grammar.y"
                   {
    }
#line 6570 "grammar.cpp"
    break;

  case 342: /* limit_statements: limit_statement  */
#line 2923 "grammar.y"
                   {

  }
#line 6578 "grammar.cpp"
    break;


#line 6582 "grammar.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      {
        yypcontext_t yyctx
          = {yyssp, yytoken, &yylloc};
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == -1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *,
                             YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (yymsg)
              {
                yysyntax_error_status
                  = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
                yymsgp = yymsg;
              }
            else
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = YYENOMEM;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == YYENOMEM)
          YYNOMEM;
      }
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= T_END)
        {
          /* Return failure if at end of input.  */
          if (yychar == T_END)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
  return yyresult;
}

