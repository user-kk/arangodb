/* clang-format off */
/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         Aqlparse
#define yylex           Aqllex
#define yyerror         Aqlerror
#define yydebug         Aqldebug
#define yynerrs         Aqlnerrs

/* First part of user prologue.  */
#line 9 "grammar.y"

// we are using alloca here explicitly because we may
// otherwise leak error messages that are generated by Bison.
// Bison reports all its errors via the function `Aqlerror`, which
// will receive the error message as a constant string. So we
// must not free the string inside `Aqlerror`, and we cannot even
// tell if the error message is a dynamically allocated error
// message or a hard-coded error message that resides in some
// static part of the program.
// Even worse, `Aqlerror` does not return control to Bison but throws
// an exception... So the best thing we can do here is to not use
// dynamically memory allocation by Bison, but make it use alloca.
#define YYSTACK_USE_ALLOCA 1

#include "Aql/Aggregator.h"
#include "Aql/AstNode.h"
#include "Aql/Function.h"
#include "Aql/Parser.h"
#include "Aql/Quantifier.h"
#include "Aql/QueryContext.h"
#include "Aql/types.h"
#include "Basics/StaticStrings.h"
#include "Basics/StringUtils.h"
#include "Containers/HashSet.h"
#include "Containers/SmallVector.h"
#include "Graph/PathType.h"
#include "VocBase/AccessMode.h"

#include <absl/strings/str_cat.h>

#include <algorithm>
#include <cstdint>
#include <string>
#include <string_view>


#line 113 "grammar.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "grammar.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of query string"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_T_FOR = 3,                      /* "FOR declaration"  */
  YYSYMBOL_T_LET = 4,                      /* "LET declaration"  */
  YYSYMBOL_T_FILTER = 5,                   /* "FILTER declaration"  */
  YYSYMBOL_T_RETURN = 6,                   /* "RETURN declaration"  */
  YYSYMBOL_T_COLLECT = 7,                  /* "COLLECT declaration"  */
  YYSYMBOL_T_SORT = 8,                     /* "SORT declaration"  */
  YYSYMBOL_T_LIMIT = 9,                    /* "LIMIT declaration"  */
  YYSYMBOL_T_WINDOW = 10,                  /* "WINDOW declaration"  */
  YYSYMBOL_T_ASC = 11,                     /* "ASC keyword"  */
  YYSYMBOL_T_DESC = 12,                    /* "DESC keyword"  */
  YYSYMBOL_T_IN = 13,                      /* "IN keyword"  */
  YYSYMBOL_T_WITH = 14,                    /* "WITH keyword"  */
  YYSYMBOL_T_INTO = 15,                    /* "INTO keyword"  */
  YYSYMBOL_T_AGGREGATE = 16,               /* "AGGREGATE keyword"  */
  YYSYMBOL_T_GRAPH = 17,                   /* "GRAPH keyword"  */
  YYSYMBOL_T_SHORTEST_PATH = 18,           /* "SHORTEST_PATH keyword"  */
  YYSYMBOL_T_K_SHORTEST_PATHS = 19,        /* "K_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_K_PATHS = 20,                 /* "K_PATHS keyword"  */
  YYSYMBOL_T_ALL_SHORTEST_PATHS = 21,      /* "ALL_SHORTEST_PATHS keyword"  */
  YYSYMBOL_T_DISTINCT = 22,                /* "DISTINCT modifier"  */
  YYSYMBOL_T_REMOVE = 23,                  /* "REMOVE command"  */
  YYSYMBOL_T_INSERT = 24,                  /* "INSERT command"  */
  YYSYMBOL_T_UPDATE = 25,                  /* "UPDATE command"  */
  YYSYMBOL_T_REPLACE = 26,                 /* "REPLACE command"  */
  YYSYMBOL_T_UPSERT = 27,                  /* "UPSERT command"  */
  YYSYMBOL_T_NULL = 28,                    /* "null"  */
  YYSYMBOL_T_TRUE = 29,                    /* "true"  */
  YYSYMBOL_T_FALSE = 30,                   /* "false"  */
  YYSYMBOL_T_STRING = 31,                  /* "identifier"  */
  YYSYMBOL_T_QUOTED_STRING = 32,           /* "quoted string"  */
  YYSYMBOL_T_INTEGER = 33,                 /* "integer number"  */
  YYSYMBOL_T_DOUBLE = 34,                  /* "number"  */
  YYSYMBOL_T_PARAMETER = 35,               /* "bind parameter"  */
  YYSYMBOL_T_DATA_SOURCE_PARAMETER = 36,   /* "bind data source parameter"  */
  YYSYMBOL_T_ASSIGN = 37,                  /* "assignment"  */
  YYSYMBOL_T_NOT = 38,                     /* "not operator"  */
  YYSYMBOL_T_AND = 39,                     /* "and operator"  */
  YYSYMBOL_T_OR = 40,                      /* "or operator"  */
  YYSYMBOL_T_NOT_IN = 41,                  /* "not in operator"  */
  YYSYMBOL_T_REGEX_MATCH = 42,             /* "~= operator"  */
  YYSYMBOL_T_REGEX_NON_MATCH = 43,         /* "~! operator"  */
  YYSYMBOL_T_EQ = 44,                      /* "== operator"  */
  YYSYMBOL_T_NE = 45,                      /* "!= operator"  */
  YYSYMBOL_T_LT = 46,                      /* "< operator"  */
  YYSYMBOL_T_GT = 47,                      /* "> operator"  */
  YYSYMBOL_T_LE = 48,                      /* "<= operator"  */
  YYSYMBOL_T_GE = 49,                      /* ">= operator"  */
  YYSYMBOL_T_LIKE = 50,                    /* "like operator"  */
  YYSYMBOL_T_PLUS = 51,                    /* "+ operator"  */
  YYSYMBOL_T_MINUS = 52,                   /* "- operator"  */
  YYSYMBOL_T_TIMES = 53,                   /* "* operator"  */
  YYSYMBOL_T_DIV = 54,                     /* "/ operator"  */
  YYSYMBOL_T_MOD = 55,                     /* "% operator"  */
  YYSYMBOL_T_QUESTION = 56,                /* "?"  */
  YYSYMBOL_T_COLON = 57,                   /* ":"  */
  YYSYMBOL_T_SCOPE = 58,                   /* "::"  */
  YYSYMBOL_T_RANGE = 59,                   /* ".."  */
  YYSYMBOL_T_COMMA = 60,                   /* ","  */
  YYSYMBOL_T_OPEN = 61,                    /* "("  */
  YYSYMBOL_T_CLOSE = 62,                   /* ")"  */
  YYSYMBOL_T_OBJECT_OPEN = 63,             /* "{"  */
  YYSYMBOL_T_OBJECT_CLOSE = 64,            /* "}"  */
  YYSYMBOL_T_ARRAY_OPEN = 65,              /* "["  */
  YYSYMBOL_T_ARRAY_CLOSE = 66,             /* "]"  */
  YYSYMBOL_T_SEMICOLON = 67,               /* ";"  */
  YYSYMBOL_T_OUTBOUND = 68,                /* "outbound modifier"  */
  YYSYMBOL_T_INBOUND = 69,                 /* "inbound modifier"  */
  YYSYMBOL_T_ANY = 70,                     /* "any modifier"  */
  YYSYMBOL_T_ALL = 71,                     /* "all modifier"  */
  YYSYMBOL_T_NONE = 72,                    /* "none modifier"  */
  YYSYMBOL_T_AT_LEAST = 73,                /* "at least modifier"  */
  YYSYMBOL_T_SELECT = 74,                  /* "select"  */
  YYSYMBOL_T_FROM = 75,                    /* "from"  */
  YYSYMBOL_T_AS = 76,                      /* "as"  */
  YYSYMBOL_T_WHERE = 77,                   /* "where"  */
  YYSYMBOL_T_GROUP = 78,                   /* "group"  */
  YYSYMBOL_T_ORDER = 79,                   /* "order"  */
  YYSYMBOL_T_BY = 80,                      /* "by"  */
  YYSYMBOL_T_HAVING = 81,                  /* "having"  */
  YYSYMBOL_T_UNNEST = 82,                  /* "unnest"  */
  YYSYMBOL_T_UNNEST_ALL = 83,              /* "unnest_all"  */
  YYSYMBOL_T_DOLLAR = 84,                  /* "$"  */
  YYSYMBOL_T_JOIN = 85,                    /* "join"  */
  YYSYMBOL_T_ON = 86,                      /* "on"  */
  YYSYMBOL_T_MATCH = 87,                   /* "match"  */
  YYSYMBOL_T_START_AS = 88,                /* "start_as"  */
  YYSYMBOL_WITH_COLLECTION_LIST = 89,      /* WITH_COLLECTION_LIST  */
  YYSYMBOL_UMINUS = 90,                    /* UMINUS  */
  YYSYMBOL_UPLUS = 91,                     /* UPLUS  */
  YYSYMBOL_UNEGATION = 92,                 /* UNEGATION  */
  YYSYMBOL_FUNCCALL = 93,                  /* FUNCCALL  */
  YYSYMBOL_REFERENCE = 94,                 /* REFERENCE  */
  YYSYMBOL_INDEXED = 95,                   /* INDEXED  */
  YYSYMBOL_EXPANSION = 96,                 /* EXPANSION  */
  YYSYMBOL_97_ = 97,                       /* '.'  */
  YYSYMBOL_YYACCEPT = 98,                  /* $accept  */
  YYSYMBOL_optional_prune_variable = 99,   /* optional_prune_variable  */
  YYSYMBOL_with_collection = 100,          /* with_collection  */
  YYSYMBOL_with_collection_list = 101,     /* with_collection_list  */
  YYSYMBOL_optional_with = 102,            /* optional_with  */
  YYSYMBOL_with_key = 103,                 /* with_key  */
  YYSYMBOL_queryStart = 104,               /* queryStart  */
  YYSYMBOL_query = 105,                    /* query  */
  YYSYMBOL_aql_statements = 106,           /* aql_statements  */
  YYSYMBOL_final_statement = 107,          /* final_statement  */
  YYSYMBOL_optional_statement_block_statements = 108, /* optional_statement_block_statements  */
  YYSYMBOL_statement_block_statement = 109, /* statement_block_statement  */
  YYSYMBOL_more_output_variables = 110,    /* more_output_variables  */
  YYSYMBOL_for_output_variables = 111,     /* for_output_variables  */
  YYSYMBOL_prune_and_options = 112,        /* prune_and_options  */
  YYSYMBOL_traversal_graph_info = 113,     /* traversal_graph_info  */
  YYSYMBOL_shortest_path_graph_info = 114, /* shortest_path_graph_info  */
  YYSYMBOL_k_shortest_paths_graph_info = 115, /* k_shortest_paths_graph_info  */
  YYSYMBOL_k_paths_graph_info = 116,       /* k_paths_graph_info  */
  YYSYMBOL_all_shortest_paths_graph_info = 117, /* all_shortest_paths_graph_info  */
  YYSYMBOL_for_statement = 118,            /* for_statement  */
  YYSYMBOL_119_1 = 119,                    /* $@1  */
  YYSYMBOL_120_2 = 120,                    /* $@2  */
  YYSYMBOL_filter_statement = 121,         /* filter_statement  */
  YYSYMBOL_let_statement = 122,            /* let_statement  */
  YYSYMBOL_let_list = 123,                 /* let_list  */
  YYSYMBOL_let_element = 124,              /* let_element  */
  YYSYMBOL_count_into = 125,               /* count_into  */
  YYSYMBOL_collect_variable_list = 126,    /* collect_variable_list  */
  YYSYMBOL_127_3 = 127,                    /* $@3  */
  YYSYMBOL_collect_statement = 128,        /* collect_statement  */
  YYSYMBOL_collect_list = 129,             /* collect_list  */
  YYSYMBOL_collect_element = 130,          /* collect_element  */
  YYSYMBOL_collect_optional_into = 131,    /* collect_optional_into  */
  YYSYMBOL_variable_list = 132,            /* variable_list  */
  YYSYMBOL_keep = 133,                     /* keep  */
  YYSYMBOL_134_4 = 134,                    /* $@4  */
  YYSYMBOL_aggregate = 135,                /* aggregate  */
  YYSYMBOL_136_5 = 136,                    /* $@5  */
  YYSYMBOL_aggregate_list = 137,           /* aggregate_list  */
  YYSYMBOL_aggregate_element = 138,        /* aggregate_element  */
  YYSYMBOL_aggregate_function_call = 139,  /* aggregate_function_call  */
  YYSYMBOL_140_6 = 140,                    /* $@6  */
  YYSYMBOL_sort_statement = 141,           /* sort_statement  */
  YYSYMBOL_142_7 = 142,                    /* $@7  */
  YYSYMBOL_sort_list = 143,                /* sort_list  */
  YYSYMBOL_sort_element = 144,             /* sort_element  */
  YYSYMBOL_sort_direction = 145,           /* sort_direction  */
  YYSYMBOL_limit_statement = 146,          /* limit_statement  */
  YYSYMBOL_window_statement = 147,         /* window_statement  */
  YYSYMBOL_return_statement = 148,         /* return_statement  */
  YYSYMBOL_in_or_into_collection = 149,    /* in_or_into_collection  */
  YYSYMBOL_remove_statement = 150,         /* remove_statement  */
  YYSYMBOL_insert_statement = 151,         /* insert_statement  */
  YYSYMBOL_update_parameters = 152,        /* update_parameters  */
  YYSYMBOL_update_statement = 153,         /* update_statement  */
  YYSYMBOL_replace_parameters = 154,       /* replace_parameters  */
  YYSYMBOL_replace_statement = 155,        /* replace_statement  */
  YYSYMBOL_update_or_replace = 156,        /* update_or_replace  */
  YYSYMBOL_upsert_input = 157,             /* upsert_input  */
  YYSYMBOL_upsert_statement = 158,         /* upsert_statement  */
  YYSYMBOL_159_8 = 159,                    /* $@8  */
  YYSYMBOL_160_9 = 160,                    /* $@9  */
  YYSYMBOL_161_10 = 161,                   /* $@10  */
  YYSYMBOL_quantifier = 162,               /* quantifier  */
  YYSYMBOL_distinct_expression = 163,      /* distinct_expression  */
  YYSYMBOL_164_11 = 164,                   /* $@11  */
  YYSYMBOL_expression = 165,               /* expression  */
  YYSYMBOL_function_name = 166,            /* function_name  */
  YYSYMBOL_function_call = 167,            /* function_call  */
  YYSYMBOL_168_12 = 168,                   /* $@12  */
  YYSYMBOL_169_13 = 169,                   /* $@13  */
  YYSYMBOL_operator_unary = 170,           /* operator_unary  */
  YYSYMBOL_operator_binary = 171,          /* operator_binary  */
  YYSYMBOL_operator_ternary = 172,         /* operator_ternary  */
  YYSYMBOL_optional_function_call_arguments = 173, /* optional_function_call_arguments  */
  YYSYMBOL_function_arguments_list = 174,  /* function_arguments_list  */
  YYSYMBOL_compound_value = 175,           /* compound_value  */
  YYSYMBOL_array = 176,                    /* array  */
  YYSYMBOL_177_14 = 177,                   /* $@14  */
  YYSYMBOL_optional_array_elements = 178,  /* optional_array_elements  */
  YYSYMBOL_array_elements_list = 179,      /* array_elements_list  */
  YYSYMBOL_array_element = 180,            /* array_element  */
  YYSYMBOL_for_options = 181,              /* for_options  */
  YYSYMBOL_options = 182,                  /* options  */
  YYSYMBOL_object = 183,                   /* object  */
  YYSYMBOL_184_15 = 184,                   /* $@15  */
  YYSYMBOL_optional_object_elements = 185, /* optional_object_elements  */
  YYSYMBOL_object_elements_list = 186,     /* object_elements_list  */
  YYSYMBOL_object_element = 187,           /* object_element  */
  YYSYMBOL_array_filter_operator = 188,    /* array_filter_operator  */
  YYSYMBOL_array_map_operator = 189,       /* array_map_operator  */
  YYSYMBOL_optional_array_filter = 190,    /* optional_array_filter  */
  YYSYMBOL_optional_array_limit = 191,     /* optional_array_limit  */
  YYSYMBOL_optional_array_return = 192,    /* optional_array_return  */
  YYSYMBOL_graph_collection = 193,         /* graph_collection  */
  YYSYMBOL_graph_collection_list = 194,    /* graph_collection_list  */
  YYSYMBOL_graph_subject = 195,            /* graph_subject  */
  YYSYMBOL_196_16 = 196,                   /* $@16  */
  YYSYMBOL_graph_direction = 197,          /* graph_direction  */
  YYSYMBOL_graph_direction_steps = 198,    /* graph_direction_steps  */
  YYSYMBOL_reference = 199,                /* reference  */
  YYSYMBOL_200_17 = 200,                   /* $@17  */
  YYSYMBOL_201_18 = 201,                   /* $@18  */
  YYSYMBOL_202_19 = 202,                   /* $@19  */
  YYSYMBOL_203_20 = 203,                   /* $@20  */
  YYSYMBOL_ndarray_expression_list = 204,  /* ndarray_expression_list  */
  YYSYMBOL_ndarray_expression = 205,       /* ndarray_expression  */
  YYSYMBOL_range_index = 206,              /* range_index  */
  YYSYMBOL_expression_or_none = 207,       /* expression_or_none  */
  YYSYMBOL_interval_element = 208,         /* interval_element  */
  YYSYMBOL_simple_value = 209,             /* simple_value  */
  YYSYMBOL_numeric_value = 210,            /* numeric_value  */
  YYSYMBOL_value_literal = 211,            /* value_literal  */
  YYSYMBOL_in_or_into_collection_name = 212, /* in_or_into_collection_name  */
  YYSYMBOL_bind_parameter = 213,           /* bind_parameter  */
  YYSYMBOL_bind_parameter_datasource_expected = 214, /* bind_parameter_datasource_expected  */
  YYSYMBOL_object_element_name = 215,      /* object_element_name  */
  YYSYMBOL_variable_name = 216,            /* variable_name  */
  YYSYMBOL_sql_statements = 217,           /* sql_statements  */
  YYSYMBOL_218_21 = 218,                   /* $@21  */
  YYSYMBOL_219_22 = 219,                   /* $@22  */
  YYSYMBOL_220_23 = 220,                   /* $@23  */
  YYSYMBOL_with_statements = 221,          /* with_statements  */
  YYSYMBOL_with_list = 222,                /* with_list  */
  YYSYMBOL_with_element = 223,             /* with_element  */
  YYSYMBOL_from_statements = 224,          /* from_statements  */
  YYSYMBOL_collection_pair_list = 225,     /* collection_pair_list  */
  YYSYMBOL_collection_element = 226,       /* collection_element  */
  YYSYMBOL_collection_pair = 227,          /* collection_pair  */
  YYSYMBOL_228_24 = 228,                   /* $@24  */
  YYSYMBOL_229_25 = 229,                   /* $@25  */
  YYSYMBOL_230_26 = 230,                   /* $@26  */
  YYSYMBOL_graph_info = 231,               /* graph_info  */
  YYSYMBOL_point = 232,                    /* point  */
  YYSYMBOL_edge = 233,                     /* edge  */
  YYSYMBOL_step = 234,                     /* step  */
  YYSYMBOL_unnest_statement = 235,         /* unnest_statement  */
  YYSYMBOL_236_27 = 236,                   /* $@27  */
  YYSYMBOL_expression_list = 237,          /* expression_list  */
  YYSYMBOL_expression_element = 238,       /* expression_element  */
  YYSYMBOL_optional_axis_name_list = 239,  /* optional_axis_name_list  */
  YYSYMBOL_axis_name_list = 240,           /* axis_name_list  */
  YYSYMBOL_axis_name = 241,                /* axis_name  */
  YYSYMBOL_distinct_label = 242,           /* distinct_label  */
  YYSYMBOL_select_list = 243,              /* select_list  */
  YYSYMBOL_select_element = 244,           /* select_element  */
  YYSYMBOL_where_statements = 245,         /* where_statements  */
  YYSYMBOL_group_by_statements = 246,      /* group_by_statements  */
  YYSYMBOL_247_28 = 247,                   /* $@28  */
  YYSYMBOL_group_by_variable_list = 248,   /* group_by_variable_list  */
  YYSYMBOL_249_29 = 249,                   /* $@29  */
  YYSYMBOL_group_by_list = 250,            /* group_by_list  */
  YYSYMBOL_group_by_element = 251,         /* group_by_element  */
  YYSYMBOL_having_statements = 252,        /* having_statements  */
  YYSYMBOL_order_by_statements = 253,      /* order_by_statements  */
  YYSYMBOL_254_30 = 254,                   /* $@30  */
  YYSYMBOL_limit_statements = 255          /* limit_statements  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;


/* Second part of user prologue.  */
#line 56 "grammar.y"

#include <iostream>
using namespace arangodb::aql;

#define scanner parser->scanner()

/// @brief forward for lexer function defined in Aql/tokens.ll
int Aqllex(YYSTYPE*, YYLTYPE*, void*);

/// @brief register parse error (this will also abort the currently running query)
void Aqlerror(YYLTYPE* locp,
              arangodb::aql::Parser* parser,
              char const* message) {
  parser->registerParseError(TRI_ERROR_QUERY_PARSE, message, locp->first_line, locp->first_column);
}

namespace {
  struct strval {
  char*                  value;
  size_t                 length;
  };

bool caseInsensitiveEqual(std::string_view lhs, std::string_view rhs) noexcept {
  return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end(), [](char l, char r) {
    return arangodb::basics::StringUtils::tolower(l) == arangodb::basics::StringUtils::tolower(r);
  });
}

void handleUpsertOptions(AstNode const* options, AstNode* forNode, AstNode* forOptionsNode, AstNode* upsertOptionsNode, bool& canReadOwnWrites) {
  TRI_ASSERT(canReadOwnWrites);
  if (options != nullptr && options->type == NODE_TYPE_OBJECT) {
    for (size_t i = 0; i < options->numMembers(); ++i) {
      auto nodeMember = options->getMember(i);
      if (nodeMember->type == NODE_TYPE_OBJECT_ELEMENT) {
        std::string_view nodeMemberName = nodeMember->getStringView();
        if (nodeMemberName == arangodb::StaticStrings::IndexHintOption || 
          nodeMemberName == arangodb::StaticStrings::IndexHintOptionForce ||
          nodeMemberName == arangodb::StaticStrings::IndexHintDisableIndex ||
          nodeMemberName == arangodb::StaticStrings::UseCache) {
          forOptionsNode->addMember(nodeMember);
        } else {
          upsertOptionsNode->addMember(nodeMember);
        }

        if (nodeMemberName == arangodb::StaticStrings::ReadOwnWrites) {
          canReadOwnWrites = nodeMember->getMember(0)->isTrue();
        }
      }
    }
    forNode->changeMember(2, forOptionsNode);
  }
  if (canReadOwnWrites) {
    forNode->setFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES);
  }
}

AstNode* buildShortestPathInfo(Parser* parser,
                               char const* seperator,
                               AstNode* direction,
                               AstNode* startNode,
                               AstNode* endNode,
                               AstNode* graph,
                               AstNode* options,
                               YYLTYPE const& yyloc) {
  if (!caseInsensitiveEqual(seperator, "TO")) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'TO'", seperator, yyloc.first_line, yyloc.first_column);
  }
  auto infoNode = parser->ast()->createNodeArray();
  infoNode->addMember(direction);
  infoNode->addMember(startNode);
  infoNode->addMember(endNode);
  infoNode->addMember(graph);
  
  auto opts = parser->ast()->createNodeOptions(options);
  TRI_ASSERT(opts != nullptr);
  infoNode->addMember(opts);
  return infoNode;
}

void checkOutVariables(Parser* parser,
                       AstNode const* variableNamesNode,
                       size_t minVariables, size_t maxVariables,
                       char const* errorMessage,
                       YYLTYPE const& yyloc) {
  TRI_ASSERT(variableNamesNode != nullptr);
  TRI_ASSERT(variableNamesNode->type == NODE_TYPE_ARRAY);
  if (variableNamesNode->numMembers() < minVariables ||
      variableNamesNode->numMembers() > maxVariables) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, errorMessage, yyloc.first_line, yyloc.first_column);
  }
}

void validateOptions(Parser* parser, AstNode const* node,
                     int line, int column) {
  TRI_ASSERT(node != nullptr);
  if (!node->isObject()) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "'OPTIONS' have to be an object", line, column);
  }
  if (!node->isConstant()) {
    parser->registerParseError(TRI_ERROR_QUERY_COMPILE_TIME_OPTIONS, "'OPTIONS' have to be known at query compile time", line, column);
  }
}

/// @brief check if any of the variables used in the INTO expression were
/// introduced by the COLLECT itself, in which case it would fail
void checkCollectVariables(Parser* parser, char const* context, 
                           AstNode const* expression,
                           int line, int column,
                           VarSet const& variablesIntroduced) {
  if (expression == nullptr) {
    return;
  }

  arangodb::containers::SmallVector<AstNode const*, 4> toTraverse = { expression };
 
  // recursively find all variables in expression
  auto preVisitor = [](AstNode const* node) -> bool {
    // ignore constant nodes, as they can't contain variables
    return !node->isConstant();
  };
  auto visitor = [&](AstNode const* node) {
    // reference to a variable
    if (node != nullptr && node->type == NODE_TYPE_REFERENCE) {
      auto variable = static_cast<Variable const*>(node->getData());

      if (variable == nullptr) {
        THROW_ARANGO_EXCEPTION_MESSAGE(TRI_ERROR_INTERNAL,
                                       "invalid reference in AST");
      }

      if (variable->needsRegister()) {
        if (variablesIntroduced.contains(variable)) {
          auto msg = absl::StrCat("use of COLLECT variable '", variable->name, "' inside same COLLECT's expression");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), variable->name, line, column);
        }
        if (auto subquery = parser->ast()->getSubqueryForVariable(variable); subquery != nullptr) {
          toTraverse.push_back(subquery);
        }
      }
    }
  };

  size_t pos = 0;
  while (pos < toTraverse.size()) {
    AstNode const* node = toTraverse[pos++];
    // note: the traverseReadOnly may add to the toTraverse vector!
    Ast::traverseReadOnly(node, preVisitor, visitor);
  }
}

/// @brief register variables in the scope
void registerAssignVariables(Parser* parser, arangodb::aql::Scopes* scopes,
                             int line, int column,
                             VarSet& variablesIntroduced,
                             AstNode const* vars) {
  size_t const n = vars->numMembers();

  for (size_t i = 0; i < n; ++i) {
    auto member = vars->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      scopes->addVariable(v);
      variablesIntroduced.emplace(v);
    }
  }
}

/// @brief validate the aggregate variables expressions
bool validateAggregates(Parser* parser, AstNode const* aggregates,
                        int line, int column) {
  VarSet variablesIntroduced{};
  VarSet varsInAssignment{};
  
  size_t const n = aggregates->numMembers();
  for (size_t i = 0; i < n; ++i) {
    auto member = aggregates->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
      
      // keep track of the variable for our assignment
      auto v = static_cast<Variable*>(member->getMember(0)->getData());
      variablesIntroduced.emplace(v);

      auto func = member->getMember(1);
      if (func->type != NODE_TYPE_FCALL) {
        // aggregate expression must be a function call
        constexpr std::string_view error = "aggregate expression must be a function call";
        parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
      } else {
        auto f = static_cast<arangodb::aql::Function*>(func->getData());
        if (!Aggregator::isValid(f->name)) {
          // aggregate expression must be a call to MIN|MAX|LENGTH...
          constexpr std::string_view error = "unknown aggregate function used";
          parser->registerParseError(TRI_ERROR_QUERY_INVALID_AGGREGATE_EXPRESSION, error, line, column);
        }
      }
      
      // check if any of the assignment refers to a variable introduced by this very
      // same COLLECT, e.g. COLLECT aggregate x = .., y = x
      varsInAssignment.clear();
      Ast::getReferencedVariables(member->getMember(1), varsInAssignment);
      for (auto const& it : varsInAssignment) {
        if (variablesIntroduced.contains(it)) {
          auto msg = absl::StrCat("use of COLLECT variable '", it->name, "' inside same COLLECT");
          parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, msg.c_str(), it->name, line, column);
        }
      }
    }
  }

  return true;
}


/// @brief validate the WINDOW specification
bool validateWindowSpec(Parser* parser, AstNode const* spec,
                        int line, int column) {
  bool preceding = false;
  bool following = false;
  
  size_t const n = spec->numMembers();
  if (n == 0) {
    parser->registerParseError(TRI_ERROR_QUERY_PARSE, "At least one WINDOW bound must be specified ('preceding'/'following')", line, column);
  }
  
  for (size_t i = 0; i < n; ++i) {
    auto member = spec->getMemberUnchecked(i);

    if (member != nullptr) {
      TRI_ASSERT(member->type == NODE_TYPE_OBJECT_ELEMENT);
      bool* attr{};
      auto name = member->getString();
      if (name == "preceding") {
        attr = &preceding;
      } else if (name == "following") {
        attr = &following;
      } else  {
        char const* error = "Invalid WINDOW attribute '%s'; only \"preceding\" and \"following\" are supported";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      if (*attr) {
        char const* error = "WINDOW attribute '%s' is specified multiple times";
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, error, name, line, column);
      }
      
      // mark this attribute as "seen"
      *attr = true;
    }
  }
  return true;
}

/// @brief start a new scope for the collect
bool startCollectScope(arangodb::aql::Scopes* scopes) {
  // check if we are in the main scope
  if (scopes->type() == arangodb::aql::AQL_SCOPE_MAIN ||
      scopes->type() == arangodb::aql::AQL_SCOPE_SUBQUERY) {
    return false;
  }


  // end the active scopes
  scopes->endNested();
  // start a new scope
  scopes->start(arangodb::aql::AQL_SCOPE_COLLECT);
  return true;
}

/// @brief get the INTO variable stored in a node (may not exist)
AstNode const* getIntoVariable(Parser* parser, AstNode const* node) {
  if (node == nullptr) {
    return nullptr;
  }

  if (node->type == NODE_TYPE_VALUE) {
    // node is a string containing the variable name
    return parser->ast()->createNodeVariable(node->getStringView(), true);
  }

  // node is an array with the variable name as the first member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  auto v = node->getMember(0);
  TRI_ASSERT(v->type == NODE_TYPE_VALUE);
  return parser->ast()->createNodeVariable(v->getStringView(), true);
}

/// @brief get the INTO variable = expression stored in a node (may not exist)
AstNode const* getIntoExpression(AstNode const* node) {
  if (node == nullptr || node->type == NODE_TYPE_VALUE) {
    return nullptr;
  }

  // node is an array with the expression as the second member
  TRI_ASSERT(node->type == NODE_TYPE_ARRAY);
  TRI_ASSERT(node->numMembers() == 2);

  return node->getMember(1);
}

AstNode* transformOutputVariables(Parser* parser, AstNode const* names) {
  auto wrapperNode = parser->ast()->createNodeArray();
  for (size_t i = 0; i < names->numMembers(); ++i) {
    AstNode* variableNameNode = names->getMemberUnchecked(i);
    TRI_ASSERT(variableNameNode->isStringValue());
    AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
    wrapperNode->addMember(variableNode);
  }
  return wrapperNode;
}

} // namespace


#line 723 "grammar.cpp"


#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if 1

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* 1 */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  19
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   2325

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  98
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  158
/* YYNRULES -- Number of rules.  */
#define YYNRULES  353
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  617

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   351


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    97,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   603,   603,   609,   619,   622,   628,   632,   636,   643,
     645,   653,   659,   661,   667,   669,   674,   679,   681,   684,
     687,   690,   693,   699,   702,   707,   709,   711,   713,   715,
     717,   719,   721,   723,   725,   727,   729,   734,   741,   748,
     754,   761,   785,   808,   821,   827,   833,   839,   848,   848,
     899,   899,   933,   945,   957,   969,   984,   992,   997,   999,
    1004,  1011,  1022,  1022,  1033,  1043,  1056,  1080,  1135,  1154,
    1185,  1187,  1192,  1199,  1202,  1205,  1214,  1227,  1243,  1243,
    1258,  1258,  1268,  1270,  1275,  1282,  1282,  1294,  1294,  1305,
    1308,  1314,  1320,  1323,  1326,  1329,  1335,  1340,  1347,  1362,
    1380,  1388,  1391,  1397,  1407,  1417,  1425,  1436,  1441,  1449,
    1460,  1465,  1468,  1474,  1477,  1483,  1499,  1483,  1546,  1546,
    1605,  1608,  1611,  1617,  1617,  1627,  1633,  1636,  1639,  1642,
    1645,  1648,  1654,  1657,  1670,  1670,  1679,  1679,  1689,  1692,
    1695,  1701,  1704,  1707,  1710,  1713,  1716,  1719,  1722,  1725,
    1728,  1731,  1734,  1737,  1740,  1743,  1746,  1753,  1760,  1766,
    1772,  1778,  1785,  1788,  1791,  1794,  1797,  1800,  1803,  1806,
    1809,  1813,  1817,  1821,  1825,  1829,  1833,  1837,  1844,  1847,
    1853,  1855,  1860,  1863,  1869,  1872,  1878,  1878,  1887,  1889,
    1891,  1896,  1898,  1903,  1909,  1912,  1937,  1957,  1960,  1975,
    1975,  1984,  1986,  1988,  1993,  1995,  2000,  2016,  2020,  2030,
    2037,  2040,  2046,  2049,  2055,  2058,  2062,  2066,  2070,  2078,
    2081,  2084,  2090,  2093,  2099,  2102,  2105,  2109,  2115,  2119,
    2126,  2132,  2132,  2141,  2145,  2149,  2158,  2161,  2164,  2170,
    2173,  2179,  2218,  2221,  2224,  2228,  2237,  2237,  2253,  2268,
    2281,  2285,  2285,  2301,  2301,  2339,  2339,  2390,  2393,  2398,
    2401,  2404,  2407,  2412,  2418,  2421,  2426,  2429,  2436,  2439,
    2445,  2449,  2456,  2459,  2462,  2465,  2468,  2474,  2479,  2484,
    2495,  2503,  2510,  2518,  2525,  2528,  2533,  2544,  2550,  2550,
    2544,  2593,  2596,  2602,  2605,  2611,  2617,  2620,  2626,  2630,
    2636,  2639,  2643,  2652,  2652,  2667,  2667,  2702,  2702,  2718,
    2726,  2732,  2740,  2747,  2752,  2758,  2761,  2768,  2771,  2774,
    2774,  2782,  2785,  2790,  2806,  2809,  2812,  2818,  2821,  2826,
    2830,  2837,  2840,  2846,  2849,  2854,  2864,  2890,  2892,  2900,
    2920,  2920,  2948,  2948,  2958,  2962,  2967,  2975,  2978,  2983,
    2985,  2985,  2996,  2998
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if 1
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of query string\"", "error", "\"invalid token\"",
  "\"FOR declaration\"", "\"LET declaration\"", "\"FILTER declaration\"",
  "\"RETURN declaration\"", "\"COLLECT declaration\"",
  "\"SORT declaration\"", "\"LIMIT declaration\"",
  "\"WINDOW declaration\"", "\"ASC keyword\"", "\"DESC keyword\"",
  "\"IN keyword\"", "\"WITH keyword\"", "\"INTO keyword\"",
  "\"AGGREGATE keyword\"", "\"GRAPH keyword\"",
  "\"SHORTEST_PATH keyword\"", "\"K_SHORTEST_PATHS keyword\"",
  "\"K_PATHS keyword\"", "\"ALL_SHORTEST_PATHS keyword\"",
  "\"DISTINCT modifier\"", "\"REMOVE command\"", "\"INSERT command\"",
  "\"UPDATE command\"", "\"REPLACE command\"", "\"UPSERT command\"",
  "\"null\"", "\"true\"", "\"false\"", "\"identifier\"",
  "\"quoted string\"", "\"integer number\"", "\"number\"",
  "\"bind parameter\"", "\"bind data source parameter\"", "\"assignment\"",
  "\"not operator\"", "\"and operator\"", "\"or operator\"",
  "\"not in operator\"", "\"~= operator\"", "\"~! operator\"",
  "\"== operator\"", "\"!= operator\"", "\"< operator\"", "\"> operator\"",
  "\"<= operator\"", "\">= operator\"", "\"like operator\"",
  "\"+ operator\"", "\"- operator\"", "\"* operator\"", "\"/ operator\"",
  "\"% operator\"", "\"?\"", "\":\"", "\"::\"", "\"..\"", "\",\"", "\"(\"",
  "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\";\"",
  "\"outbound modifier\"", "\"inbound modifier\"", "\"any modifier\"",
  "\"all modifier\"", "\"none modifier\"", "\"at least modifier\"",
  "\"select\"", "\"from\"", "\"as\"", "\"where\"", "\"group\"",
  "\"order\"", "\"by\"", "\"having\"", "\"unnest\"", "\"unnest_all\"",
  "\"$\"", "\"join\"", "\"on\"", "\"match\"", "\"start_as\"",
  "WITH_COLLECTION_LIST", "UMINUS", "UPLUS", "UNEGATION", "FUNCCALL",
  "REFERENCE", "INDEXED", "EXPANSION", "'.'", "$accept",
  "optional_prune_variable", "with_collection", "with_collection_list",
  "optional_with", "with_key", "queryStart", "query", "aql_statements",
  "final_statement", "optional_statement_block_statements",
  "statement_block_statement", "more_output_variables",
  "for_output_variables", "prune_and_options", "traversal_graph_info",
  "shortest_path_graph_info", "k_shortest_paths_graph_info",
  "k_paths_graph_info", "all_shortest_paths_graph_info", "for_statement",
  "$@1", "$@2", "filter_statement", "let_statement", "let_list",
  "let_element", "count_into", "collect_variable_list", "$@3",
  "collect_statement", "collect_list", "collect_element",
  "collect_optional_into", "variable_list", "keep", "$@4", "aggregate",
  "$@5", "aggregate_list", "aggregate_element", "aggregate_function_call",
  "$@6", "sort_statement", "$@7", "sort_list", "sort_element",
  "sort_direction", "limit_statement", "window_statement",
  "return_statement", "in_or_into_collection", "remove_statement",
  "insert_statement", "update_parameters", "update_statement",
  "replace_parameters", "replace_statement", "update_or_replace",
  "upsert_input", "upsert_statement", "$@8", "$@9", "$@10", "quantifier",
  "distinct_expression", "$@11", "expression", "function_name",
  "function_call", "$@12", "$@13", "operator_unary", "operator_binary",
  "operator_ternary", "optional_function_call_arguments",
  "function_arguments_list", "compound_value", "array", "$@14",
  "optional_array_elements", "array_elements_list", "array_element",
  "for_options", "options", "object", "$@15", "optional_object_elements",
  "object_elements_list", "object_element", "array_filter_operator",
  "array_map_operator", "optional_array_filter", "optional_array_limit",
  "optional_array_return", "graph_collection", "graph_collection_list",
  "graph_subject", "$@16", "graph_direction", "graph_direction_steps",
  "reference", "$@17", "$@18", "$@19", "$@20", "ndarray_expression_list",
  "ndarray_expression", "range_index", "expression_or_none",
  "interval_element", "simple_value", "numeric_value", "value_literal",
  "in_or_into_collection_name", "bind_parameter",
  "bind_parameter_datasource_expected", "object_element_name",
  "variable_name", "sql_statements", "$@21", "$@22", "$@23",
  "with_statements", "with_list", "with_element", "from_statements",
  "collection_pair_list", "collection_element", "collection_pair", "$@24",
  "$@25", "$@26", "graph_info", "point", "edge", "step",
  "unnest_statement", "$@27", "expression_list", "expression_element",
  "optional_axis_name_list", "axis_name_list", "axis_name",
  "distinct_label", "select_list", "select_element", "where_statements",
  "group_by_statements", "$@28", "group_by_variable_list", "$@29",
  "group_by_list", "group_by_element", "having_statements",
  "order_by_statements", "$@30", "limit_statements", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-481)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-308)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      -8,     2,  -481,   181,    40,  -481,   -24,  -481,   -14,    80,
    -481,  -481,  2298,  -481,  -481,  -481,  -481,   113,  -481,  -481,
    -481,  2134,     2,     2,     2,  2134,   581,    12,  -481,  2134,
    2134,  2134,  2134,  2134,  2134,    68,  -481,  -481,  -481,  -481,
    -481,   299,  -481,  -481,  -481,  -481,  -481,     3,    17,    20,
      27,    38,   181,  -481,   123,  -481,  -481,  -481,   -10,  -481,
    -481,  -481,  -481,  -481,  2134,    92,  2134,  2134,  2134,  -481,
    -481,  1920,    48,  -481,  -481,  -481,  -481,  -481,  -481,  -481,
     -30,  -481,  -481,  -481,  -481,   106,   159,  -481,   126,  -481,
     174,  1920,  -481,  -481,  1920,   207,  -481,   214,     2,   238,
    2134,  1125,  1169,   243,  1214,  1214,  -481,   941,  -481,   988,
    -481,  -481,  -481,  -481,     2,   214,   233,   238,  -481,  -481,
    2134,  -481,  -481,  -481,  -481,  1258,     4,    70,  2134,  2134,
     157,  2134,  2134,  2134,  2134,  2134,  2134,  2134,  2134,  2134,
    2134,  2134,  2134,  2134,  2134,  2134,  2134,  2134,  2096,  2134,
    -481,  -481,  -481,   204,   134,   241,  -481,   149,   178,     2,
    2053,     2,  2134,  2134,   264,     2,   217,  -481,   237,  -481,
     261,   214,   260,  -481,   850,  2134,   217,  -481,  2172,   102,
     214,   214,  2134,   214,  2134,   214,  2134,   277,   280,  -481,
     217,   214,  -481,   214,   713,   281,  -481,  2134,  -481,     2,
     262,  -481,  -481,   283,  -481,   285,  2134,   279,   290,  -481,
     287,  1920,   292,   291,  -481,   257,  2134,  2134,  2134,  2007,
    1964,   257,   222,   222,   222,   222,   308,   308,   308,   308,
     222,   284,   284,  -481,  -481,  -481,  2134,  1302,   240,  2134,
    2134,  2134,  2134,  2134,  2134,  2134,  2134,  2134,  -481,  2134,
    -481,  -481,   300,   311,  2210,  -481,  -481,  -481,  -481,  -481,
    -481,  -481,  -481,  -481,  -481,  -481,  -481,  1032,   228,   535,
    -481,  1920,  1920,     2,   305,  -481,   331,  -481,     2,  2134,
    -481,  2134,  -481,  -481,  -481,  -481,  -481,  -481,  1920,   243,
     322,   484,   527,  -481,  -481,  -481,  -481,  -481,  -481,  -481,
    1214,  -481,  1214,  -481,  1920,  2134,  2134,     2,  -481,  -481,
       2,  2134,   294,  1920,   309,   310,  -481,  2134,  1347,  -481,
      70,  2134,  -481,  2134,   222,   222,   222,  1920,  2134,  1391,
     257,   257,   222,   222,   308,   308,   308,   308,   317,  -481,
      25,  -481,    25,   140,  1435,   -37,  -481,  -481,   316,   319,
     354,   143,   355,  -481,  2134,  2134,  2134,  2134,   894,  -481,
       2,   356,  -481,  1920,  -481,  -481,   214,   214,   364,  1081,
    1920,   329,  -481,  -481,  -481,  2248,  -481,  -481,  2134,  1920,
     333,  -481,  1920,  -481,  1920,   195,  -481,  2134,   330,   387,
     669,   328,   386,  2210,  -481,  2134,  2134,  2210,  -481,  2134,
    -481,  1480,  1524,  1568,  1612,   220,  -481,   337,  -481,   226,
    -481,  -481,  -481,  -481,    97,  -481,  -481,  2134,  -481,  -481,
    2134,     2,   -17,   757,   338,  -481,   315,   324,  1920,  2134,
    2134,  2134,  2134,  2134,  2134,  2134,  2134,  2134,  1920,  2134,
    2134,  2134,  -481,  2134,   396,  -481,  1920,   346,  1656,   342,
     376,  1920,   380,  1700,  2134,  2134,  2134,  2134,  -481,  -481,
    -481,  -481,  -481,  -481,  -481,  1081,  1214,  -481,   334,     2,
     111,  2248,  2248,  2134,   345,  1920,   257,   257,   222,   222,
     308,   308,   308,   308,  1744,  1920,  1920,  1788,  2134,   362,
    2134,  -481,  -481,  -481,   217,  2134,  2134,   894,   894,   894,
     894,   101,  2134,  2134,   214,   368,  -481,  2134,  -481,  -481,
    -481,   344,  1920,   351,   353,  -481,   432,  2134,  1920,  -481,
    1920,  -481,  1920,  1920,   214,   214,   214,   214,  -481,   379,
     378,  1214,  -481,     2,  -481,   -15,   111,   801,   389,  -481,
     367,  2134,  -481,   365,   435,   366,  2134,  1920,  -481,  -481,
    -481,  -481,   101,  -481,   214,   384,   397,   383,  -481,     2,
     406,   206,  -481,   617,  2134,  -481,  -481,  -481,  2134,  -481,
    1920,  -481,  -481,  -481,   383,    18,   403,  -481,  2134,  -481,
    -481,   395,     2,  1920,   399,  -481,  2134,  1920,   405,  -481,
     394,   104,  -481,   206,  -481,  2134,   260,   398,  -481,   398,
    2134,   368,    32,  -481,  -481,   368,   368,  1832,  -481,   206,
    -481,  -481,  -481,  2134,  -481,  1876,  -481
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       9,    11,    23,     0,     0,    13,     0,   286,     0,   292,
     293,    12,     0,     4,   283,   282,     6,    10,     5,     1,
     287,     0,     0,     0,     0,     0,     0,    62,    87,     0,
       0,     0,     0,     0,     0,     0,    16,    24,    25,    27,
      26,    73,    28,    29,    30,    31,    17,    32,    33,    34,
      35,    36,     0,     8,   331,   274,   275,   276,   241,   272,
     270,   271,   281,   280,     0,     0,     0,     0,   246,   199,
     186,   295,     0,   244,   126,   127,   128,   242,   184,   185,
     130,   273,   129,   243,   294,    39,     0,    37,    57,    58,
       0,    56,   123,   100,   125,     0,    80,   197,     0,    73,
       0,    96,     0,   185,     0,     0,   107,     0,   110,     0,
     115,   118,   113,   114,     0,   197,   197,    73,     7,   332,
       0,   140,   136,   138,   139,     0,    23,   201,   188,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     121,   120,   122,     0,     0,     0,   134,   251,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    64,    63,    70,
       0,   197,    88,    89,    92,     0,     0,    98,     0,     0,
     197,   197,     0,   197,     0,   197,     0,     0,    74,    65,
      78,   197,    68,   197,   336,   288,   333,   180,   245,     0,
       0,    14,    15,   206,   285,     0,     0,     0,   202,   204,
       0,   193,     0,   189,   191,   154,     0,     0,     0,   142,
     141,   155,   160,   161,   148,   149,   150,   151,   152,   153,
     159,   143,   144,   145,   146,   147,     0,     0,   131,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   133,   180,
     212,   210,   253,   255,   264,   248,   250,   249,    38,   236,
     237,   238,    50,    52,    53,    54,    55,    48,   239,     0,
      59,    60,   124,     0,    81,    82,     0,   198,     0,     0,
      66,     0,    93,    94,    91,    95,   268,   269,    97,     0,
     241,   272,   280,   101,   277,   278,   279,   102,   103,   104,
       0,   105,     0,   108,   116,     0,     0,     0,    69,    67,
       0,     0,   296,   182,     0,   181,   247,     0,     0,   200,
     203,     0,   187,   190,   157,   158,   156,   179,     0,     0,
     168,   169,   162,   163,   164,   165,   166,   167,     0,   211,
     214,   213,   214,   241,   259,     0,   257,   260,     0,     0,
      40,   238,   194,   240,     0,     0,     0,     0,     0,    61,
       0,     0,    71,    72,    90,    99,   197,   197,     0,     0,
      75,    79,    76,   335,   334,     0,   289,   137,     0,   208,
       0,   205,   207,   192,   178,     0,   135,     0,     0,     0,
       0,     0,   219,   264,   252,   264,   264,     0,    51,     0,
      49,     0,     0,     0,     0,     0,   224,   230,    43,     0,
     225,    83,   132,    84,     0,   106,   109,     0,   111,   112,
       0,     0,   241,   305,   297,   298,   300,   337,   183,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   215,     0,
       0,     0,   254,     0,   222,   258,   265,   266,   265,     0,
      41,     2,     0,   195,     0,     0,     0,     0,   235,   234,
     233,   231,   226,   227,    85,     0,     0,    77,     0,     0,
     317,     0,     0,     0,   339,   209,   176,   177,   170,   171,
     172,   173,   174,   175,     0,   216,   218,   220,     0,     0,
       0,   263,   261,   262,     0,     0,     0,     0,     0,     0,
       0,     0,   180,     0,   197,     0,   303,     0,   319,   306,
     299,     0,   338,     0,   349,   340,     0,     0,   223,   256,
     267,    42,     3,   196,   197,   197,   197,   197,   228,   232,
       0,     0,   119,     0,   308,     0,   317,     0,   318,   321,
     324,     0,   342,     0,   352,   347,     0,   221,    44,    45,
      47,    46,     0,    86,   197,     0,     0,     0,   304,     0,
       0,     0,   320,   301,     0,   350,   353,   290,     0,   341,
     217,   229,   117,   312,     0,     0,     0,   323,     0,   329,
     330,   325,     0,   346,   343,   344,     0,   348,     0,   314,
       0,   315,   322,     0,   302,     0,   351,   315,   313,   315,
       0,     0,     0,   327,   345,     0,     0,     0,   311,     0,
     326,   310,   309,     0,   328,     0,   316
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -481,  -481,    35,  -481,  -481,  -481,  -481,  -481,   336,  -481,
    -481,  -481,  -481,  -481,  -481,  -481,  -481,  -481,  -481,  -481,
    -481,  -481,  -481,  -481,  -481,  -481,   302,   423,  -481,  -481,
    -481,  -481,   187,   -75,  -481,  -481,  -481,   -39,  -481,  -481,
     108,  -481,  -481,  -481,  -481,  -116,   190,  -481,   -72,  -481,
    -481,   -73,  -481,  -481,  -481,  -481,  -481,  -481,     8,  -481,
    -481,  -481,  -481,  -481,  -178,  -481,  -481,   -21,   115,  -481,
    -481,  -481,  -481,  -481,  -481,  -248,  -481,  -481,  -481,  -481,
    -481,  -481,   154,  -481,  -100,   -16,  -481,  -481,  -481,   160,
    -481,  -481,   137,  -481,  -481,  -480,  -481,  -211,  -481,  -138,
    -481,  -481,  -481,  -481,  -481,  -481,  -481,    90,    89,   100,
    -481,  -481,  -481,   323,   320,   -28,    22,  -481,    45,   372,
    -481,  -481,  -481,  -481,  -481,   478,  -481,  -481,    30,    31,
    -481,  -481,  -481,  -481,  -323,   -70,  -367,   -34,  -481,  -481,
     -66,  -481,  -481,  -441,  -481,  -481,   194,  -481,  -481,  -481,
    -481,  -481,  -481,   -89,  -481,  -481,  -481,  -481
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,   450,    16,    17,     2,     3,     4,   200,    11,    36,
      12,    37,    85,    86,   398,   262,   263,   264,   265,   266,
      38,   352,   350,    39,    40,    88,    89,    97,    41,    98,
      42,   168,   169,   116,   371,   191,   307,    99,   165,   274,
     275,   413,   502,    43,   100,   172,   173,   284,    44,    45,
      46,   180,    47,    48,   106,    49,   108,    50,   420,   111,
      51,   186,   368,   187,   154,    93,   163,   174,    72,    73,
     249,   197,    74,    75,    76,   314,   315,    77,    78,   128,
     212,   213,   214,   400,   167,    79,   127,   207,   208,   209,
     252,   253,   391,   444,   489,   407,   529,   408,   501,   409,
     269,    80,   126,   254,   340,   342,   345,   346,   347,   348,
     491,   285,    81,    82,   293,    83,   410,   210,     8,     5,
      54,   312,   427,     6,     9,    10,   376,   424,   425,   426,
     536,   470,   468,   534,   535,   576,   601,   509,   540,   538,
     539,   562,   602,   581,   120,   195,   196,   474,   514,   545,
     515,   564,   584,   585,   569,   544,   586,   567
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      71,   338,   117,   -18,    91,    94,     1,   113,   101,   102,
     104,   105,   107,   109,   103,   189,   192,   -19,   199,   112,
     -20,   528,   268,   393,   171,    18,    95,   -21,    96,   394,
     387,   556,   181,     7,   183,   157,   185,   557,   -22,    18,
      19,  -132,   193,   121,  -132,   123,   124,   125,  -132,     7,
      20,  -132,    53,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    21,    64,   177,   -18,  -291,   158,    87,    90,
    -307,   280,   571,   110,    18,    65,    66,    67,  -291,   -19,
     298,   299,   -20,   301,   589,   303,    68,   118,    69,   -21,
      70,   308,   609,   309,   610,   150,   151,   152,   388,   194,
     -22,   203,   204,    62,    63,   205,   155,   211,   215,   156,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   237,   238,   353,
     257,    69,   406,   294,   295,   206,    14,    15,   296,   267,
      22,   271,   272,   170,    13,   119,   287,   240,    14,    15,
     277,   599,   603,   122,   288,   155,  -121,   215,   464,   188,
     289,   300,   389,   302,   389,   304,   159,   600,   614,   259,
     260,   261,   160,    52,   277,   241,   313,  -286,   242,   243,
     244,   245,   246,   247,  -121,   318,   161,  -121,  -121,  -121,
    -121,  -121,  -121,   507,   508,   324,   325,   326,  -132,   216,
     217,  -132,   250,  -286,   258,   251,    90,   218,   430,   255,
     276,   162,    13,    62,    63,   327,    14,    15,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   366,   313,   367,
     605,   256,   606,   344,   579,   129,   431,     7,   164,   432,
     433,   434,   435,   436,   437,   166,   354,   355,   358,   356,
     365,   458,   459,   114,   530,    62,    63,   462,   363,    96,
     130,    62,    63,   133,   190,   239,   415,   416,   138,   139,
     140,   141,   248,   143,   144,   145,   146,   147,   608,   273,
      69,   149,   611,   612,   369,   370,   524,   525,   526,   527,
     194,   143,   144,   145,   146,   147,   379,   278,   279,   349,
     382,   305,   211,   138,   139,   140,   141,   384,   143,   144,
     145,   146,   147,    95,   114,    96,   149,   306,   359,   390,
     281,   390,  -277,   170,   316,  -277,  -277,  -277,  -277,  -277,
    -277,  -277,  -277,   401,   402,   403,   404,   145,   146,   147,
    -284,   311,   317,   319,   321,  -277,  -277,  -277,  -277,  -277,
     320,   323,   372,  -277,   423,   373,   339,   428,   322,   143,
     144,   145,   146,   147,   341,   360,   438,   149,   361,   375,
     378,   377,   344,   395,   446,   448,   451,   460,   453,   386,
    -132,   463,   396,  -132,  -277,   397,   399,   412,   417,   421,
     429,   439,   440,   504,   442,   443,   465,   461,   471,   466,
     472,   473,   488,   490,   532,   276,   493,   494,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   495,   484,   485,
     486,   505,   487,   513,   548,   549,   550,   551,   519,   533,
     541,   542,   543,   497,   498,   499,   500,   546,   349,   552,
     553,   560,   452,   561,    29,   565,   573,   568,   575,   574,
     423,   423,   512,   578,   572,   591,   593,   597,   554,   595,
     598,   600,   201,   270,   115,   362,   467,   518,   411,   520,
     596,   364,   566,   503,   522,   523,   414,   383,   521,   392,
     381,   313,   531,   445,  -278,   449,   537,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,   447,   547,   286,   202,   297,
      84,   510,   558,   511,   588,   374,   604,  -278,  -278,  -278,
    -278,  -278,   592,     0,   506,  -278,     0,     0,     0,     0,
     563,     0,     0,     0,     0,   570,     0,  -279,     0,     0,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,     0,     0,
       0,     0,     0,   583,     0,     0,  -278,   587,     0,     0,
    -279,  -279,  -279,  -279,  -279,   357,     0,   537,  -279,     0,
       0,     0,     0,    55,    56,    57,    58,    59,    60,    61,
      62,    63,     0,    64,   583,     0,     0,     0,   555,   607,
       0,     0,     0,     0,     0,    65,    66,    67,     0,  -279,
       0,     0,   615,     0,     0,     0,    68,     0,    69,     0,
      70,     0,     0,    92,   577,     0,   580,     0,     0,    55,
      56,    57,    58,    59,    60,    61,    62,    63,     0,    64,
     590,     0,     0,     0,     0,     0,     0,   594,     0,     0,
     129,    65,    66,    67,     0,     0,     0,     0,   580,     0,
       0,     0,    68,     0,    69,     0,    70,     0,     0,     0,
       0,     0,     0,     0,   580,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   441,     0,   149,     0,     0,     0,
       0,     0,   129,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   582,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   129,     0,   149,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     129,     0,   149,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,   151,   152,   153,     0,     0,   310,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   129,     0,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,   152,
     153,     0,     0,   469,     0,     0,     0,     0,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,     0,     0,
     149,   282,   283,   129,     0,     0,     0,     0,     0,     0,
       0,   150,   151,   152,   153,     0,     0,   559,    55,    56,
      57,     0,    59,    60,    61,    62,    63,     0,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   129,     0,   149,
       0,   405,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   152,   153,     0,   406,     0,     0,     0,    14,
      15,     0,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,     0,     0,   149,   178,   182,   179,     0,     0,     0,
       0,     0,   259,   260,   351,   151,   152,   153,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,     0,     0,
     149,   178,   184,   179,     0,     0,     0,     0,     0,     0,
       0,   150,   151,   152,   153,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   129,     0,   149,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,   151,
     152,   153,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,   129,     0,     0,     0,     0,     0,
     259,   260,   351,   151,   152,   153,   418,   419,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   129,     0,
     149,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   150,   151,   152,   153,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   129,   176,   149,   175,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,   152,   153,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,     0,   178,   149,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   150,
     151,   152,   153,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   129,     0,   149,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,   151,   152,   153,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   129,     0,   149,     0,     0,
     198,     0,     0,     0,     0,     0,     0,     0,   150,   151,
     152,   153,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   328,
     129,   149,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,   151,   152,   153,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   129,     0,   149,     0,     0,     0,
       0,     0,     0,   380,     0,     0,     0,   150,   151,   152,
     153,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   129,     0,
     149,     0,     0,   385,     0,     0,     0,     0,     0,     0,
       0,   150,   151,   152,   153,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,  -265,   129,   149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   150,   151,   152,   153,     0,
       0,   454,     0,     0,     0,     0,     0,     0,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   129,     0,   149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   152,   153,     0,   455,     0,     0,     0,     0,
       0,     0,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   129,     0,   149,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,   151,   152,   153,     0,   456,
       0,     0,     0,     0,     0,     0,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   129,     0,   149,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,   151,
     152,   153,     0,   457,     0,     0,     0,     0,     0,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   129,
       0,   149,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,   151,   152,   153,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   129,     0,   149,     0,     0,     0,     0,
     492,     0,     0,     0,     0,     0,   150,   151,   152,   153,
       0,   496,     0,     0,     0,     0,     0,     0,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   129,     0,   149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   152,   153,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   129,     0,   149,     0,     0,   516,     0,     0,     0,
       0,     0,     0,     0,   150,   151,   152,   153,     0,     0,
       0,     0,     0,     0,     0,     0,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   129,     0,   149,   517,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,   151,
     152,   153,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   129,
       0,   149,   613,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,   151,   152,   153,     0,     0,     0,     0,
       0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   129,     0,   149,     0,     0,     0,     0,
     616,     0,     0,     0,     0,     0,   150,   151,   152,   153,
       0,     0,     0,     0,     0,     0,     0,     0,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   129,     0,   149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     150,   151,   152,   153,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   131,     0,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     129,     0,     0,   149,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   150,   151,   152,   153,     0,     0,
       0,     0,     0,     0,     0,   130,     0,     0,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     0,     0,     0,   149,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   150,   151,   152,
     153,    55,    56,    57,    58,    59,    60,    61,    62,    63,
       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    65,    66,    67,     0,     0,     0,     0,
       0,     0,     0,     0,    68,     0,    69,     0,    70,     0,
       0,   259,   260,   261,    55,    56,    57,    58,    59,    60,
      61,    62,    63,     0,    64,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    65,    66,    67,     0,
       0,     0,     0,   236,     0,     0,     0,    68,     0,    69,
       0,    70,    55,    56,    57,    58,    59,    60,    61,    62,
      63,     0,    64,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    65,    66,    67,     0,     0,     0,
       0,     0,     0,     0,     0,    68,     0,    69,     0,    70,
      55,    56,    57,   290,   291,    60,    61,    62,   292,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,    66,    67,     0,     0,     0,     0,     0,
       0,     0,     0,    68,     0,    69,     0,    70,    55,    56,
      57,   343,    59,    60,    61,    62,    63,     0,    64,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,    66,    67,     0,     0,     0,     0,     0,     0,     0,
       0,    68,     0,    69,     0,    70,    55,    56,    57,   422,
      59,    60,    61,    62,    63,     0,    64,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,    66,
      67,    23,    24,    25,    26,    27,    28,    29,    30,    68,
       0,    69,     0,    70,     0,     0,     0,     0,     0,     0,
       0,    31,    32,    33,    34,    35
};

static const yytype_int16 yycheck[] =
{
      21,   249,    41,     0,    25,    26,    14,    35,    29,    30,
      31,    32,    33,    34,    30,   115,   116,     0,    14,    35,
       0,   501,   160,    60,    99,     3,    14,     0,    16,    66,
       5,    46,   105,    31,   107,    65,   109,    52,     0,    17,
       0,    58,   117,    64,    61,    66,    67,    68,    58,    31,
      74,    61,    17,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    76,    38,   103,    62,    74,    97,    23,    24,
      87,   171,   552,     5,    52,    50,    51,    52,    74,    62,
     180,   181,    62,   183,    66,   185,    61,    52,    63,    62,
      65,   191,    60,   193,    62,    70,    71,    72,    73,   120,
      62,    31,    32,    35,    36,    35,    58,   128,   129,    61,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   267,
     158,    63,    31,    31,    32,    65,    35,    36,    36,   160,
      60,   162,   163,    98,    31,    22,   174,    13,    35,    36,
     166,    47,   593,    61,   175,    58,    13,   178,    61,   114,
     176,   182,   340,   184,   342,   186,    60,    63,   609,    68,
      69,    70,    13,    60,   190,    41,   197,    37,    44,    45,
      46,    47,    48,    49,    41,   206,    60,    44,    45,    46,
      47,    48,    49,    82,    83,   216,   217,   218,    58,    42,
      43,    61,    53,    63,   159,    56,   161,    50,    13,    31,
     165,    37,    31,    35,    36,   236,    35,    36,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   300,   249,   302,
     597,    53,   599,   254,    28,    13,    41,    31,    31,    44,
      45,    46,    47,    48,    49,    31,    18,    19,   269,    21,
     289,    31,    32,    15,   502,    35,    36,    31,   279,    16,
      38,    35,    36,    41,    31,    61,   366,   367,    46,    47,
      48,    49,    31,    51,    52,    53,    54,    55,   601,    15,
      63,    59,   605,   606,   305,   306,   497,   498,   499,   500,
     311,    51,    52,    53,    54,    55,   317,    60,    37,   254,
     321,    24,   323,    46,    47,    48,    49,   328,    51,    52,
      53,    54,    55,    14,    15,    16,    59,    37,   273,   340,
      60,   342,     0,   278,    62,     3,     4,     5,     6,     7,
       8,     9,    10,   354,   355,   356,   357,    53,    54,    55,
      57,    60,    57,    64,    57,    23,    24,    25,    26,    27,
      60,    60,   307,    31,   375,   310,    56,   378,    66,    51,
      52,    53,    54,    55,    53,    60,   387,    59,    37,    75,
      60,    62,   393,    57,   395,   396,   397,   405,   399,    62,
      58,   409,    63,    61,    62,    31,    31,    31,    24,    60,
      57,    61,     5,   466,    66,     9,   417,    60,    60,   420,
      85,    77,     6,    57,   504,   360,    64,    31,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    37,   439,   440,
     441,    87,   443,    78,   524,   525,   526,   527,    66,    61,
      86,    80,    79,   454,   455,   456,   457,     5,   393,    60,
      62,    52,   397,    76,     9,    80,    62,    81,    65,    52,
     471,   472,   473,    47,   554,    52,    61,    52,   531,    60,
      66,    63,   126,   161,    41,   278,   421,   488,   360,   490,
     586,   281,   544,   465,   495,   496,   361,   323,   494,   342,
     320,   502,   503,   393,     0,   396,   507,     3,     4,     5,
       6,     7,     8,     9,    10,   395,   517,   174,   126,   179,
      22,   471,   536,   472,   574,   311,   595,    23,    24,    25,
      26,    27,   578,    -1,   469,    31,    -1,    -1,    -1,    -1,
     541,    -1,    -1,    -1,    -1,   546,    -1,     0,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,   564,    -1,    -1,    62,   568,    -1,    -1,
      23,    24,    25,    26,    27,    20,    -1,   578,    31,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    -1,    38,   595,    -1,    -1,    -1,   533,   600,
      -1,    -1,    -1,    -1,    -1,    50,    51,    52,    -1,    62,
      -1,    -1,   613,    -1,    -1,    -1,    61,    -1,    63,    -1,
      65,    -1,    -1,    22,   559,    -1,   561,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    -1,    38,
     575,    -1,    -1,    -1,    -1,    -1,    -1,   582,    -1,    -1,
      13,    50,    51,    52,    -1,    -1,    -1,    -1,   593,    -1,
      -1,    -1,    61,    -1,    63,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   609,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,     5,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    13,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    13,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    76,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    -1,
      59,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    -1,    76,    28,    29,
      30,    -1,    32,    33,    34,    35,    36,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    31,    -1,    -1,    -1,    35,
      36,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    -1,    -1,    59,    13,    14,    15,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    -1,    -1,
      59,    13,    14,    15,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    13,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    -1,
      -1,    59,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    71,    72,    73,    25,    26,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    13,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    13,    14,    59,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    -1,    13,    59,    15,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    13,    -1,    59,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      13,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    13,    -1,
      59,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    13,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    13,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    13,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
      72,    73,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,
      64,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    13,    -1,    59,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    13,    -1,    59,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    13,
      -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    13,    -1,    59,    -1,    -1,    -1,    -1,
      64,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    13,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      13,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    63,    -1,    65,    -1,
      -1,    68,    69,    70,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    52,    -1,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    61,    -1,    63,
      -1,    65,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    63,    -1,    65,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    63,    -1,    65,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    -1,    63,    -1,    65,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,
      52,     3,     4,     5,     6,     7,     8,     9,    10,    61,
      -1,    63,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    14,   102,   103,   104,   217,   221,    31,   216,   222,
     223,   106,   108,    31,    35,    36,   100,   101,   214,     0,
      74,    76,    60,     3,     4,     5,     6,     7,     8,     9,
      10,    23,    24,    25,    26,    27,   107,   109,   118,   121,
     122,   126,   128,   141,   146,   147,   148,   150,   151,   153,
     155,   158,    60,   100,   218,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    38,    50,    51,    52,    61,    63,
      65,   165,   166,   167,   170,   171,   172,   175,   176,   183,
     199,   210,   211,   213,   223,   110,   111,   216,   123,   124,
     216,   165,    22,   163,   165,    14,    16,   125,   127,   135,
     142,   165,   165,   183,   165,   165,   152,   165,   154,   165,
       5,   157,   183,   213,    15,   125,   131,   135,   100,    22,
     242,   165,    61,   165,   165,   165,   200,   184,   177,    13,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    59,
      70,    71,    72,    73,   162,    58,    61,    65,    97,    60,
      13,    60,    37,   164,    31,   136,    31,   182,   129,   130,
     216,   131,   143,   144,   165,    60,    14,   135,    13,    15,
     149,   149,    14,   149,    14,   149,   159,   161,   216,   182,
      31,   133,   182,   131,   165,   243,   244,   169,    62,    14,
     105,   106,   217,    31,    32,    35,    65,   185,   186,   187,
     215,   165,   178,   179,   180,   165,    42,    43,    50,   165,
     165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
     165,   165,   165,   165,   165,   165,    57,   165,   165,    61,
      13,    41,    44,    45,    46,    47,    48,    49,    31,   168,
      53,    56,   188,   189,   201,    31,    53,   213,   216,    68,
      69,    70,   113,   114,   115,   116,   117,   165,   197,   198,
     124,   165,   165,    15,   137,   138,   216,   183,    60,    37,
     182,    60,    11,    12,   145,   209,   211,   213,   165,   183,
      31,    32,    36,   212,    31,    32,    36,   212,   182,   182,
     165,   182,   165,   182,   165,    24,    37,   134,   182,   182,
      76,    60,   219,   165,   173,   174,    62,    57,   165,    64,
      60,    57,    66,    60,   165,   165,   165,   165,    57,   165,
     165,   165,   165,   165,   165,   165,   165,   165,   173,    56,
     202,    53,   203,    31,   165,   204,   205,   206,   207,   216,
     120,    70,   119,   197,    18,    19,    21,    20,   165,   216,
      60,    37,   130,   165,   144,   135,   149,   149,   160,   165,
     165,   132,   216,   216,   244,    75,   224,    62,    60,   165,
      66,   187,   165,   180,   165,    62,    62,     5,    73,   162,
     165,   190,   190,    60,    66,    57,    63,    31,   112,    31,
     181,   165,   165,   165,   165,    17,    31,   193,   195,   197,
     214,   138,    31,   139,   166,   182,   182,    24,    25,    26,
     156,    60,    31,   165,   225,   226,   227,   220,   165,    57,
      13,    41,    44,    45,    46,    47,    48,    49,   165,    61,
       5,     5,    66,     9,   191,   205,   165,   207,   165,   206,
      99,   165,   216,   165,    31,    31,    31,    31,    31,    32,
     213,    60,    31,   213,    61,   165,   165,   216,   230,    76,
     229,    60,    85,    77,   245,   165,   165,   165,   165,   165,
     165,   165,   165,   165,   165,   165,   165,   165,     6,   192,
      57,   208,    64,    64,    31,    37,    31,   165,   165,   165,
     165,   196,   140,   156,   149,    87,   216,    82,    83,   235,
     226,   227,   165,    78,   246,   248,    62,    60,   165,    66,
     165,   183,   165,   165,   195,   195,   195,   195,   193,   194,
     173,   165,   182,    61,   231,   232,   228,   165,   237,   238,
     236,    86,    80,    79,   253,   247,     5,   165,   182,   182,
     182,   182,    60,    62,   149,   216,    46,    52,   235,    76,
      52,    76,   239,   165,   249,    80,   146,   255,    81,   252,
     165,   193,   182,    62,    52,    65,   233,   216,    47,    28,
     216,   241,    88,   165,   250,   251,   254,   165,   233,    66,
     216,    52,   238,    61,   216,    60,   143,    52,    66,    47,
      63,   234,   240,   241,   251,   234,   234,   165,   232,    60,
      62,   232,   232,    60,   241,   165,    64
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_uint8 yyr1[] =
{
       0,    98,    99,    99,   100,   100,   101,   101,   101,   102,
     102,   103,   104,   104,   105,   105,   106,   107,   107,   107,
     107,   107,   107,   108,   108,   109,   109,   109,   109,   109,
     109,   109,   109,   109,   109,   109,   109,   110,   110,   111,
     112,   112,   112,   113,   114,   115,   116,   117,   119,   118,
     120,   118,   118,   118,   118,   118,   121,   122,   123,   123,
     124,   125,   127,   126,   128,   128,   128,   128,   128,   128,
     129,   129,   130,   131,   131,   131,   132,   132,   134,   133,
     136,   135,   137,   137,   138,   140,   139,   142,   141,   143,
     143,   144,   145,   145,   145,   145,   146,   146,   147,   147,
     148,   149,   149,   150,   151,   152,   152,   153,   154,   154,
     155,   156,   156,   157,   157,   159,   160,   158,   161,   158,
     162,   162,   162,   164,   163,   163,   165,   165,   165,   165,
     165,   165,   166,   166,   168,   167,   169,   167,   170,   170,
     170,   171,   171,   171,   171,   171,   171,   171,   171,   171,
     171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
     171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
     171,   171,   171,   171,   171,   171,   171,   171,   172,   172,
     173,   173,   174,   174,   175,   175,   177,   176,   178,   178,
     178,   179,   179,   180,   181,   181,   181,   182,   182,   184,
     183,   185,   185,   185,   186,   186,   187,   187,   187,   187,
     188,   188,   189,   189,   190,   190,   190,   190,   190,   191,
     191,   191,   192,   192,   193,   193,   193,   193,   194,   194,
     195,   196,   195,   195,   195,   195,   197,   197,   197,   198,
     198,   199,   199,   199,   199,   199,   200,   199,   199,   199,
     199,   201,   199,   202,   199,   203,   199,   204,   204,   205,
     205,   205,   205,   206,   207,   207,   208,   208,   209,   209,
     210,   210,   211,   211,   211,   211,   211,   212,   212,   212,
     213,   213,   214,   214,   215,   215,   216,   218,   219,   220,
     217,   221,   221,   222,   222,   223,   224,   224,   225,   225,
     226,   226,   226,   228,   227,   229,   227,   230,   227,   231,
     231,   231,   232,   233,   233,   234,   234,   235,   235,   236,
     235,   237,   237,   238,   239,   239,   239,   240,   240,   241,
     241,   242,   242,   243,   243,   244,   244,   245,   245,   246,
     247,   246,   249,   248,   250,   250,   251,   252,   252,   253,
     254,   253,   255,   255
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     3,     2,     0,
       2,     1,     2,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       0,     2,     4,     3,     7,     7,     7,     7,     0,     6,
       0,     6,     4,     4,     4,     4,     2,     2,     1,     3,
       3,     4,     0,     3,     3,     3,     4,     4,     3,     4,
       1,     3,     3,     0,     2,     4,     1,     3,     0,     3,
       0,     3,     1,     3,     3,     0,     5,     0,     3,     1,
       3,     2,     0,     1,     1,     1,     2,     4,     3,     5,
       2,     2,     2,     4,     4,     3,     5,     2,     3,     5,
       2,     1,     1,     1,     1,     0,     0,    11,     0,     9,
       1,     1,     1,     0,     3,     1,     1,     1,     1,     1,
       1,     3,     1,     3,     0,     5,     0,     5,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     4,     3,
       3,     3,     4,     4,     4,     4,     4,     4,     4,     4,
       7,     7,     7,     7,     7,     7,     7,     7,     5,     4,
       0,     1,     1,     3,     1,     1,     0,     4,     0,     1,
       2,     1,     3,     1,     0,     2,     4,     0,     2,     0,
       4,     0,     1,     2,     1,     3,     1,     3,     3,     5,
       1,     2,     1,     2,     0,     2,     3,     6,     3,     0,
       2,     4,     0,     2,     1,     1,     2,     2,     1,     3,
       1,     0,     4,     2,     2,     2,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     3,     0,     4,     3,     3,
       3,     0,     5,     0,     6,     0,     8,     1,     3,     1,
       1,     4,     4,     4,     0,     1,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     0,     0,
      12,     0,     2,     1,     3,     3,     0,     2,     1,     3,
       1,     5,     7,     0,     5,     0,     3,     0,     4,     7,
       7,     6,     3,     3,     2,     0,     5,     0,     2,     0,
       3,     1,     4,     3,     0,     2,     5,     1,     3,     1,
       1,     0,     1,     1,     3,     3,     1,     0,     2,     0,
       0,     3,     0,     4,     1,     3,     1,     0,     2,     0,
       0,     4,     0,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, parser, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, parser); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, arangodb::aql::Parser* parser)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, parser);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, arangodb::aql::Parser* parser)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), parser);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, parser); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


/* Context of a parse error.  */
typedef struct
{
  yy_state_t *yyssp;
  yysymbol_kind_t yytoken;
  YYLTYPE *yylloc;
} yypcontext_t;

/* Put in YYARG at most YYARGN of the expected tokens given the
   current YYCTX, and return the number of tokens stored in YYARG.  If
   YYARG is null, return the number of expected tokens (guaranteed to
   be less than YYNTOKENS).  Return YYENOMEM on memory exhaustion.
   Return 0 if there are more than YYARGN expected tokens, yet fill
   YYARG up to YYARGN. */
static int
yypcontext_expected_tokens (const yypcontext_t *yyctx,
                            yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  int yyn = yypact[+*yyctx->yyssp];
  if (!yypact_value_is_default (yyn))
    {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYSYMBOL_YYerror
            && !yytable_value_is_error (yytable[yyx + yyn]))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = YY_CAST (yysymbol_kind_t, yyx);
          }
    }
  if (yyarg && yycount == 0 && 0 < yyargn)
    yyarg[0] = YYSYMBOL_YYEMPTY;
  return yycount;
}




#ifndef yystrlen
# if defined __GLIBC__ && defined _STRING_H
#  define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
# else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
# endif
#endif

#ifndef yystpcpy
# if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#  define yystpcpy stpcpy
# else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
# endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;
      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
#endif


static int
yy_syntax_error_arguments (const yypcontext_t *yyctx,
                           yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yyctx->yytoken != YYSYMBOL_YYEMPTY)
    {
      int yyn;
      if (yyarg)
        yyarg[yycount] = yyctx->yytoken;
      ++yycount;
      yyn = yypcontext_expected_tokens (yyctx,
                                        yyarg ? yyarg + 1 : yyarg, yyargn - 1);
      if (yyn == YYENOMEM)
        return YYENOMEM;
      else
        yycount += yyn;
    }
  return yycount;
}

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return -1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return YYENOMEM if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                const yypcontext_t *yyctx)
{
  enum { YYARGS_MAX = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  yysymbol_kind_t yyarg[YYARGS_MAX];
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* Actual size of YYARG. */
  int yycount = yy_syntax_error_arguments (yyctx, yyarg, YYARGS_MAX);
  if (yycount == YYENOMEM)
    return YYENOMEM;

  switch (yycount)
    {
#define YYCASE_(N, S)                       \
      case N:                               \
        yyformat = S;                       \
        break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
    }

  /* Compute error message size.  Don't count the "%s"s, but reserve
     room for the terminator.  */
  yysize = yystrlen (yyformat) - 2 * yycount + 1;
  {
    int yyi;
    for (yyi = 0; yyi < yycount; ++yyi)
      {
        YYPTRDIFF_T yysize1
          = yysize + yytnamerr (YY_NULLPTR, yytname[yyarg[yyi]]);
        if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
          yysize = yysize1;
        else
          return YYENOMEM;
      }
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return -1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yytname[yyarg[yyi++]]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, arangodb::aql::Parser* parser)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (parser);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (arangodb::aql::Parser* parser)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, scanner);
    }

  if (yychar <= T_END)
    {
      yychar = T_END;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* optional_prune_variable: expression  */
#line 603 "grammar.y"
               {
      AstNode* node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeNop());
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 2927 "grammar.cpp"
    break;

  case 3: /* optional_prune_variable: variable_name "assignment" expression  */
#line 609 "grammar.y"
                                      {
      AstNode* node = parser->ast()->createNodeArray();
      AstNode* variableNode = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      node->addMember(variableNode);
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;    
  }
#line 2939 "grammar.cpp"
    break;

  case 4: /* with_collection: "identifier"  */
#line 619 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 2947 "grammar.cpp"
    break;

  case 5: /* with_collection: bind_parameter_datasource_expected  */
#line 622 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 2955 "grammar.cpp"
    break;

  case 6: /* with_collection_list: with_collection  */
#line 628 "grammar.y"
                     {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2964 "grammar.cpp"
    break;

  case 7: /* with_collection_list: with_collection_list "," with_collection  */
#line 632 "grammar.y"
                                                  {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2973 "grammar.cpp"
    break;

  case 8: /* with_collection_list: with_collection_list with_collection  */
#line 636 "grammar.y"
                                          {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 2982 "grammar.cpp"
    break;

  case 9: /* optional_with: %empty  */
#line 643 "grammar.y"
                 {
     }
#line 2989 "grammar.cpp"
    break;

  case 10: /* optional_with: with_key with_collection_list  */
#line 645 "grammar.y"
                                                              {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      auto withNode = parser->ast()->createNodeWithCollections(node, resolver);
      parser->ast()->addOperation(withNode);
     }
#line 3000 "grammar.cpp"
    break;

  case 11: /* with_key: "WITH keyword"  */
#line 653 "grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3009 "grammar.cpp"
    break;

  case 12: /* queryStart: optional_with aql_statements  */
#line 659 "grammar.y"
                                 {
    }
#line 3016 "grammar.cpp"
    break;

  case 13: /* queryStart: sql_statements  */
#line 661 "grammar.y"
                  {

    }
#line 3024 "grammar.cpp"
    break;

  case 14: /* query: aql_statements  */
#line 667 "grammar.y"
                   {
    }
#line 3031 "grammar.cpp"
    break;

  case 15: /* query: sql_statements  */
#line 669 "grammar.y"
                   {
    }
#line 3038 "grammar.cpp"
    break;

  case 16: /* aql_statements: optional_statement_block_statements final_statement  */
#line 674 "grammar.y"
                                                       {

    }
#line 3046 "grammar.cpp"
    break;

  case 17: /* final_statement: return_statement  */
#line 679 "grammar.y"
                     {
    }
#line 3053 "grammar.cpp"
    break;

  case 18: /* final_statement: remove_statement  */
#line 681 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3061 "grammar.cpp"
    break;

  case 19: /* final_statement: insert_statement  */
#line 684 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3069 "grammar.cpp"
    break;

  case 20: /* final_statement: update_statement  */
#line 687 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3077 "grammar.cpp"
    break;

  case 21: /* final_statement: replace_statement  */
#line 690 "grammar.y"
                      {
      parser->ast()->scopes()->endNested();
    }
#line 3085 "grammar.cpp"
    break;

  case 22: /* final_statement: upsert_statement  */
#line 693 "grammar.y"
                     {
      parser->ast()->scopes()->endNested();
    }
#line 3093 "grammar.cpp"
    break;

  case 23: /* optional_statement_block_statements: %empty  */
#line 699 "grammar.y"
                {
      parser->setAQL();
    }
#line 3101 "grammar.cpp"
    break;

  case 24: /* optional_statement_block_statements: optional_statement_block_statements statement_block_statement  */
#line 702 "grammar.y"
                                                                  {
    }
#line 3108 "grammar.cpp"
    break;

  case 25: /* statement_block_statement: for_statement  */
#line 707 "grammar.y"
                  {
    }
#line 3115 "grammar.cpp"
    break;

  case 26: /* statement_block_statement: let_statement  */
#line 709 "grammar.y"
                  {
    }
#line 3122 "grammar.cpp"
    break;

  case 27: /* statement_block_statement: filter_statement  */
#line 711 "grammar.y"
                     {
    }
#line 3129 "grammar.cpp"
    break;

  case 28: /* statement_block_statement: collect_statement  */
#line 713 "grammar.y"
                      {
    }
#line 3136 "grammar.cpp"
    break;

  case 29: /* statement_block_statement: sort_statement  */
#line 715 "grammar.y"
                   {
    }
#line 3143 "grammar.cpp"
    break;

  case 30: /* statement_block_statement: limit_statement  */
#line 717 "grammar.y"
                    {
    }
#line 3150 "grammar.cpp"
    break;

  case 31: /* statement_block_statement: window_statement  */
#line 719 "grammar.y"
                     {
    }
#line 3157 "grammar.cpp"
    break;

  case 32: /* statement_block_statement: remove_statement  */
#line 721 "grammar.y"
                     {
    }
#line 3164 "grammar.cpp"
    break;

  case 33: /* statement_block_statement: insert_statement  */
#line 723 "grammar.y"
                     {
    }
#line 3171 "grammar.cpp"
    break;

  case 34: /* statement_block_statement: update_statement  */
#line 725 "grammar.y"
                     {
    }
#line 3178 "grammar.cpp"
    break;

  case 35: /* statement_block_statement: replace_statement  */
#line 727 "grammar.y"
                      {
    }
#line 3185 "grammar.cpp"
    break;

  case 36: /* statement_block_statement: upsert_statement  */
#line 729 "grammar.y"
                     {
    }
#line 3192 "grammar.cpp"
    break;

  case 37: /* more_output_variables: variable_name  */
#line 734 "grammar.y"
                  {
      auto wrapperNode = parser->ast()->createNodeArray();
      parser->pushArray(wrapperNode);
      // This is guaranteed to be called on the first variable
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3204 "grammar.cpp"
    break;

  case 38: /* more_output_variables: more_output_variables "," variable_name  */
#line 741 "grammar.y"
                                                  {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 3213 "grammar.cpp"
    break;

  case 39: /* for_output_variables: more_output_variables  */
#line 748 "grammar.y"
                          {
      (yyval.node) = parser->popArray();
    }
#line 3221 "grammar.cpp"
    break;

  case 40: /* prune_and_options: %empty  */
#line 754 "grammar.y"
                                                   {
      auto node = static_cast<AstNode*>(parser->peekStack());
      // Prune
      node->addMember(parser->ast()->createNodeNop());
      // Options
      node->addMember(parser->ast()->createNodeNop());
    }
#line 3233 "grammar.cpp"
    break;

  case 41: /* prune_and_options: "identifier" optional_prune_variable  */
#line 761 "grammar.y"
                                     {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);

      auto node = static_cast<AstNode*>(parser->peekStack());
      if (::caseInsensitiveEqual(operation, "PRUNE")) {
        /* Only Prune */
        TRI_ASSERT((yyvsp[0].node) != nullptr);
        // Prune
        node->addMember((yyvsp[0].node));
        // Options
        node->addMember(parser->ast()->createNodeNop());
      } else if (::caseInsensitiveEqual(operation, "OPTIONS")) {
        auto const* optionsArgument = (yyvsp[0].node)->getMember(1);
        /* Only Options */
        TRI_ASSERT(optionsArgument != nullptr);
        ::validateOptions(parser, optionsArgument, yylloc.first_line, yylloc.first_column);
        // Prune
        node->addMember(parser->ast()->createNodeNop());
        // Options
        node->addMember(optionsArgument);
      } else {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
    }
#line 3262 "grammar.cpp"
    break;

  case 42: /* prune_and_options: "identifier" optional_prune_variable "identifier" object  */
#line 785 "grammar.y"
                                                     {
      /* prune and options */
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      auto node = static_cast<AstNode*>(parser->peekStack());
      if (!::caseInsensitiveEqual(operation, "PRUNE")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'PRUNE'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      operation = {(yyvsp[-1].strval).value, (yyvsp[-1].strval).length};
      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      // Prune
      node->addMember((yyvsp[-2].node));
      // Options
      node->addMember((yyvsp[0].node));
    }
#line 3287 "grammar.cpp"
    break;

  case 43: /* traversal_graph_info: graph_direction_steps expression graph_subject  */
#line 808 "grammar.y"
                                                   {
      auto infoNode = parser->ast()->createNodeArray();
      // Direction
      infoNode->addMember((yyvsp[-2].node));
      // Source
      infoNode->addMember((yyvsp[-1].node));
      // Graph
      infoNode->addMember((yyvsp[0].node));
      (yyval.node) = infoNode;
    }
#line 3302 "grammar.cpp"
    break;

  case 44: /* shortest_path_graph_info: graph_direction "SHORTEST_PATH keyword" expression "identifier" expression graph_subject options  */
#line 821 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3310 "grammar.cpp"
    break;

  case 45: /* k_shortest_paths_graph_info: graph_direction "K_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 827 "grammar.y"
                                                                                            {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), 1), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3318 "grammar.cpp"
    break;

  case 46: /* k_paths_graph_info: graph_direction_steps "K_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 833 "grammar.y"
                                                                                         {
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, (yyvsp[-6].node), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3326 "grammar.cpp"
    break;

  case 47: /* all_shortest_paths_graph_info: graph_direction "ALL_SHORTEST_PATHS keyword" expression "identifier" expression graph_subject options  */
#line 839 "grammar.y"
                                                                                              {
      auto nodeStart = parser->ast()->createNodeValueInt(0);
      auto nodeEnd = parser->ast()->createNodeValueInt(INT64_MAX-1);
      auto nodeRange = parser->ast()->createNodeRange(nodeStart, nodeEnd);
      (yyval.node) = ::buildShortestPathInfo(parser, (yyvsp[-3].strval).value, parser->ast()->createNodeDirection((yyvsp[-6].intval), nodeRange), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node), yyloc);
    }
#line 3337 "grammar.cpp"
    break;

  case 48: /* $@1: %empty  */
#line 848 "grammar.y"
                                               {
      AstNode* variablesNode = static_cast<AstNode*>((yyvsp[-2].node));//这个是数组节点
      ::checkOutVariables(parser, variablesNode, 1, 1, "Collections and views FOR loops only allow a single return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      // now create an out variable for the FOR statement
      // this prepares us to handle the optional SEARCH condition, which may
      // or may not refer to the FOR's variable
      AstNode* variableNameNode = variablesNode->getMemberUnchecked(0);
      TRI_ASSERT(variableNameNode->isStringValue());
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);//现在创建了一个变量节点(同时也创建一个变量)
      parser->pushStack(variableNode);
    }
#line 3354 "grammar.cpp"
    break;

  case 49: /* for_statement: "FOR declaration" for_output_variables "IN keyword" expression $@1 for_options  */
#line 859 "grammar.y"
                  {
      // now we can handle the optional SEARCH condition and OPTIONS.
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());

      Variable* variable = static_cast<Variable*>(variableNode->getData());

      AstNode* node = nullptr;
      AstNode* search = nullptr;
      AstNode* options = nullptr;

      if ((yyvsp[0].node) != nullptr) {
        // we got a SEARCH and/or OPTIONS clause
        TRI_ASSERT((yyvsp[0].node)->type == NODE_TYPE_ARRAY);
        TRI_ASSERT((yyvsp[0].node)->numMembers() == 2);

        search = (yyvsp[0].node)->getMemberUnchecked(0);
        if (search->type == NODE_TYPE_NOP) {
          search = nullptr;
        }
        options = (yyvsp[0].node)->getMemberUnchecked(1);
        if (options->type == NODE_TYPE_NOP) {
          options = nullptr;
        }
      }

      if (search != nullptr) {
        // we got a SEARCH clause. this is always a view.
        node = parser->ast()->createNodeForView(variable, (yyvsp[-2].node), search, options);

        if ((yyvsp[-2].node)->type != NODE_TYPE_PARAMETER_DATASOURCE &&
            (yyvsp[-2].node)->type != NODE_TYPE_VIEW &&
            (yyvsp[-2].node)->type != NODE_TYPE_COLLECTION) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "SEARCH condition used on non-view", yylloc.first_line, yylloc.first_column);
        }
      } else {
        node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);//创建整个Node_type_for节点
      }

      parser->ast()->addOperation(node);//向整个ast的_root添加member
    }
#line 3399 "grammar.cpp"
    break;

  case 50: /* $@2: %empty  */
#line 899 "grammar.y"
                                                         {
      // Traversal
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 3, "Traversals only have one, two or three return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      parser->pushStack(variablesNode);
      parser->pushStack(graphInfoNode);
      // This stack push/pop magic is necessary to allow v, e, and p in the prune condition
    }
#line 3417 "grammar.cpp"
    break;

  case 51: /* for_statement: "FOR declaration" for_output_variables "IN keyword" traversal_graph_info $@2 prune_and_options  */
#line 911 "grammar.y"
                        {
      auto graphInfoNode = static_cast<AstNode*>(parser->popStack());
      auto variablesNode = static_cast<AstNode*>(parser->popStack());

      auto prune = graphInfoNode->getMember(3);
      TRI_ASSERT(prune != nullptr);
      if (prune->type == NODE_TYPE_ARRAY) {
        TRI_ASSERT(prune->numMembers() == 2);
        Ast::traverseReadOnly(prune->getMember(1), [&](AstNode const* node) {
          if (node->type == NODE_TYPE_REFERENCE && node->hasFlag(AstNodeFlagType::FLAG_SUBQUERY_REFERENCE)) {
            parser->registerParseError(TRI_ERROR_QUERY_PARSE, "PRUNE condition must not use a subquery", yylloc.first_line, yylloc.first_column);
          }
        });
        graphInfoNode->changeMember(3, prune->getMember(1));
      }
      auto node = parser->ast()->createNodeTraversal(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
      if(prune->type == NODE_TYPE_ARRAY && prune->getMember(0)->type != NODE_TYPE_NOP) {
        auto pruneLetVariableName = prune->getMember(0);
        parser->ast()->addOperation(pruneLetVariableName);
      }
    }
#line 3444 "grammar.cpp"
    break;

  case 52: /* for_statement: "FOR declaration" for_output_variables "IN keyword" shortest_path_graph_info  */
#line 933 "grammar.y"
                                                             {
      // Shortest Path
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 2, "SHORTEST_PATH must have one or two return variables", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeShortestPath(variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3461 "grammar.cpp"
    break;

  case 53: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_shortest_paths_graph_info  */
#line 945 "grammar.y"
                                                                {
      // K Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3478 "grammar.cpp"
    break;

  case 54: /* for_statement: "FOR declaration" for_output_variables "IN keyword" k_paths_graph_info  */
#line 957 "grammar.y"
                                                       {
      // K Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "K_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::KPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3495 "grammar.cpp"
    break;

  case 55: /* for_statement: "FOR declaration" for_output_variables "IN keyword" all_shortest_paths_graph_info  */
#line 969 "grammar.y"
                                                                  {
      // All Shortest Paths
      auto variableNamesNode = static_cast<AstNode*>((yyvsp[-2].node));
      ::checkOutVariables(parser, variableNamesNode, 1, 1, "ALL_SHORTEST_PATHS only has one return variable", yyloc);
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      auto variablesNode = ::transformOutputVariables(parser, variableNamesNode);
      auto graphInfoNode = static_cast<AstNode*>((yyvsp[0].node));
      TRI_ASSERT(graphInfoNode != nullptr);
      TRI_ASSERT(graphInfoNode->type == NODE_TYPE_ARRAY);
      auto node = parser->ast()->createNodeEnumeratePaths(arangodb::graph::PathType::Type::AllShortestPaths, variablesNode, graphInfoNode);
      parser->ast()->addOperation(node);
    }
#line 3512 "grammar.cpp"
    break;

  case 56: /* filter_statement: "FILTER declaration" expression  */
#line 984 "grammar.y"
                        {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3522 "grammar.cpp"
    break;

  case 57: /* let_statement: "LET declaration" let_list  */
#line 992 "grammar.y"
                   {
    }
#line 3529 "grammar.cpp"
    break;

  case 58: /* let_list: let_element  */
#line 997 "grammar.y"
                {
    }
#line 3536 "grammar.cpp"
    break;

  case 59: /* let_list: let_list "," let_element  */
#line 999 "grammar.y"
                                 {
    }
#line 3543 "grammar.cpp"
    break;

  case 60: /* let_element: variable_name "assignment" expression  */
#line 1004 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 3552 "grammar.cpp"
    break;

  case 61: /* count_into: "WITH keyword" "identifier" "INTO keyword" variable_name  */
#line 1011 "grammar.y"
                                         {
      std::string_view operation((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if (!::caseInsensitiveEqual(operation, "COUNT")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'COUNT'", operation, yylloc.first_line, yylloc.first_column);
      }

      (yyval.strval) = (yyvsp[0].strval);
    }
#line 3565 "grammar.cpp"
    break;

  case 62: /* $@3: %empty  */
#line 1022 "grammar.y"
              {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3574 "grammar.cpp"
    break;

  case 63: /* collect_variable_list: "COLLECT declaration" $@3 collect_list  */
#line 1025 "grammar.y"
                   {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 3584 "grammar.cpp"
    break;

  case 64: /* collect_statement: "COLLECT declaration" count_into options  */
#line 1033 "grammar.y"
                                 {
      /* COLLECT WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      ::startCollectScope(scopes);

      // in the AST this is transformed to COLLECT AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount(parser->ast()->createNodeArray(), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3599 "grammar.cpp"
    break;

  case 65: /* collect_statement: collect_variable_list count_into options  */
#line 1043 "grammar.y"
                                             {
      /* COLLECT var = expr WITH COUNT INTO var OPTIONS ... */
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        VarSet variables{};
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variables, (yyvsp[-2].node));
      }

      // in the AST this is transformed to COLLECT var = expr AGGREGATE var = COUNT()
      auto node = parser->ast()->createNodeCollectCount((yyvsp[-2].node), (yyvsp[-1].strval).value, (yyvsp[-1].strval).length, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3617 "grammar.cpp"
    break;

  case 66: /* collect_statement: "COLLECT declaration" aggregate collect_optional_into options  */
#line 1056 "grammar.y"
                                                      {
      /* AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3646 "grammar.cpp"
    break;

  case 67: /* collect_statement: collect_variable_list aggregate collect_optional_into options  */
#line 1080 "grammar.y"
                                                                  {//这个
      /* COLLECT var = expr AGGREGATE var = expr OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {//开始一个新的CollectScope,要重新注册(实际上collect_variable_list和aggregate中已经注册在上一层的scopes了)
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }
        //检查聚集函数的有效性(用的是聚集函数而不是普通函数)
      if (!::validateAggregates(parser, (yyvsp[-2].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      // note all group variables
      VarSet groupVars{};
      size_t n = (yyvsp[-3].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-3].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          groupVars.emplace(static_cast<Variable const*>(member->getMember(0)->getData()));
        }
      }
      // 组变量不能在聚集涉及到的变量中出现
      // now validate if any aggregate refers to one of the group variables
      n = (yyvsp[-2].node)->numMembers();
      for (size_t i = 0; i < n; ++i) {
        auto member = (yyvsp[-2].node)->getMember(i);

        if (member != nullptr) {
          TRI_ASSERT(member->type == NODE_TYPE_ASSIGN);
          VarSet variablesUsed{};
          Ast::getReferencedVariables(member->getMember(1), variablesUsed);

          for (auto& it : groupVars) {
            if (variablesUsed.contains(it)) {
              parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN,
                "use of unknown variable '%s' in AGGREGATE expression", it->name, yylloc.first_line, yylloc.first_column);
            }
          }
        }
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), (yyvsp[-2].node), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3706 "grammar.cpp"
    break;

  case 68: /* collect_statement: collect_variable_list collect_optional_into options  */
#line 1135 "grammar.y"
                                                        {
      /* COLLECT var = expr INTO var OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
      }

      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-1].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-1].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-1].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node), parser->ast()->createNodeArray(), into, intoExpression, nullptr, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3730 "grammar.cpp"
    break;

  case 69: /* collect_statement: collect_variable_list collect_optional_into keep options  */
#line 1154 "grammar.y"
                                                             {
      /* COLLECT var = expr INTO var KEEP ... OPTIONS ... */
      VarSet variablesIntroduced{};
      auto scopes = parser->ast()->scopes();

      if (::startCollectScope(scopes)) {
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-3].node));
      }

      if ((yyvsp[-2].node) == nullptr &&
          (yyvsp[-1].node) != nullptr) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of 'KEEP' without 'INTO'", yylloc.first_line, yylloc.first_column);
      }

      if ((yyvsp[-2].node) != nullptr && (yyvsp[-2].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "INTO", (yyvsp[-2].node)->getMember(1), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }
        
      if ((yyvsp[-1].node) != nullptr && (yyvsp[-1].node)->type == NODE_TYPE_ARRAY) {
        ::checkCollectVariables(parser, "KEEP", (yyvsp[-1].node), yylloc.first_line, yylloc.first_column, variablesIntroduced);
      }

      AstNode const* into = ::getIntoVariable(parser, (yyvsp[-2].node));
      AstNode const* intoExpression = ::getIntoExpression((yyvsp[-2].node));

      auto node = parser->ast()->createNodeCollect((yyvsp[-3].node), parser->ast()->createNodeArray(), into, intoExpression, (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 3763 "grammar.cpp"
    break;

  case 70: /* collect_list: collect_element  */
#line 1185 "grammar.y"
                    {
    }
#line 3770 "grammar.cpp"
    break;

  case 71: /* collect_list: collect_list "," collect_element  */
#line 1187 "grammar.y"
                                         {
    }
#line 3777 "grammar.cpp"
    break;

  case 72: /* collect_element: variable_name "assignment" expression  */
#line 1192 "grammar.y"
                                      {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3786 "grammar.cpp"
    break;

  case 73: /* collect_optional_into: %empty  */
#line 1199 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 3794 "grammar.cpp"
    break;

  case 74: /* collect_optional_into: "INTO keyword" variable_name  */
#line 1202 "grammar.y"
                         {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 3802 "grammar.cpp"
    break;

  case 75: /* collect_optional_into: "INTO keyword" variable_name "assignment" expression  */
#line 1205 "grammar.y"
                                             {
      auto node = parser->ast()->createNodeArray();
      node->addMember(parser->ast()->createNodeValueString((yyvsp[-2].strval).value, (yyvsp[-2].strval).length));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 3813 "grammar.cpp"
    break;

  case 76: /* variable_list: variable_name  */
#line 1214 "grammar.y"
                  {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3831 "grammar.cpp"
    break;

  case 77: /* variable_list: variable_list "," variable_name  */
#line 1227 "grammar.y"
                                        {
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!parser->ast()->scopes()->existsVariable(variableName)) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "use of unknown variable '%s' for KEEP", variableName, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeReference(variableName);
      TRI_ASSERT(node != nullptr);

      // indicate the this node is a reference to the variable name, not the variable value
      node->setFlag(FLAG_KEEP_VARIABLENAME);
      parser->pushArrayElement(node);
    }
#line 3849 "grammar.cpp"
    break;

  case 78: /* $@4: %empty  */
#line 1243 "grammar.y"
             {
      std::string_view operation((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (!::caseInsensitiveEqual(operation, "KEEP")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'KEEP'", operation, yylloc.first_line, yylloc.first_column);
      }

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3863 "grammar.cpp"
    break;

  case 79: /* keep: "identifier" $@4 variable_list  */
#line 1251 "grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3872 "grammar.cpp"
    break;

  case 80: /* $@5: %empty  */
#line 1258 "grammar.y"
                {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3881 "grammar.cpp"
    break;

  case 81: /* aggregate: "AGGREGATE keyword" $@5 aggregate_list  */
#line 1261 "grammar.y"
                     {
      auto list = static_cast<AstNode*>(parser->popStack());
      (yyval.node) = list;
    }
#line 3890 "grammar.cpp"
    break;

  case 82: /* aggregate_list: aggregate_element  */
#line 1268 "grammar.y"
                      {
    }
#line 3897 "grammar.cpp"
    break;

  case 83: /* aggregate_list: aggregate_list "," aggregate_element  */
#line 1270 "grammar.y"
                                             {
    }
#line 3904 "grammar.cpp"
    break;

  case 84: /* aggregate_element: variable_name "assignment" aggregate_function_call  */
#line 1275 "grammar.y"
                                                   {
      auto node = parser->ast()->createNodeAssign((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
      parser->pushArrayElement(node);
    }
#line 3913 "grammar.cpp"
    break;

  case 85: /* $@6: %empty  */
#line 1282 "grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3923 "grammar.cpp"
    break;

  case 86: /* aggregate_function_call: function_name "(" $@6 optional_function_call_arguments ")"  */
#line 1286 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      // this works because the function name here is always NUL-terminated
      (yyval.node) = parser->ast()->createNodeAggregateFunctionCall(static_cast<char const*>(parser->popStack()), list);
    }
#line 3933 "grammar.cpp"
    break;

  case 87: /* $@7: %empty  */
#line 1294 "grammar.y"
           {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 3942 "grammar.cpp"
    break;

  case 88: /* sort_statement: "SORT declaration" $@7 sort_list  */
#line 1297 "grammar.y"
                {
      auto list = static_cast<AstNode const*>(parser->popStack());
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 3952 "grammar.cpp"
    break;

  case 89: /* sort_list: sort_element  */
#line 1305 "grammar.y"
                 {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3960 "grammar.cpp"
    break;

  case 90: /* sort_list: sort_list "," sort_element  */
#line 1308 "grammar.y"
                                   {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 3968 "grammar.cpp"
    break;

  case 91: /* sort_element: expression sort_direction  */
#line 1314 "grammar.y"
                              {
      (yyval.node) = parser->ast()->createNodeSortElement((yyvsp[-1].node), (yyvsp[0].node));
    }
#line 3976 "grammar.cpp"
    break;

  case 92: /* sort_direction: %empty  */
#line 1320 "grammar.y"
                {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3984 "grammar.cpp"
    break;

  case 93: /* sort_direction: "ASC keyword"  */
#line 1323 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 3992 "grammar.cpp"
    break;

  case 94: /* sort_direction: "DESC keyword"  */
#line 1326 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 4000 "grammar.cpp"
    break;

  case 95: /* sort_direction: simple_value  */
#line 1329 "grammar.y"
                 {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4008 "grammar.cpp"
    break;

  case 96: /* limit_statement: "LIMIT declaration" expression  */
#line 1335 "grammar.y"
                       {
      auto offset = parser->ast()->createNodeValueInt(0);
      auto node = parser->ast()->createNodeLimit(offset, (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4018 "grammar.cpp"
    break;

  case 97: /* limit_statement: "LIMIT declaration" expression "," expression  */
#line 1340 "grammar.y"
                                          {
      auto node = parser->ast()->createNodeLimit((yyvsp[-2].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4027 "grammar.cpp"
    break;

  case 98: /* window_statement: "WINDOW declaration" object aggregate  */
#line 1347 "grammar.y"
                              {
      /* WINDOW {preceding:2, following:2} AGGREGATE x = AVG(x) */
      
      // validate aggregates
      if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
        YYABORT;
      }
      
      auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/nullptr, /*aggrs*/(yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4047 "grammar.cpp"
    break;

  case 99: /* window_statement: "WINDOW declaration" expression "WITH keyword" object aggregate  */
#line 1362 "grammar.y"
                                                {
    /* WINDOW rangeVar WITH {preceding:"1d", following:"1d"} AGGREGATE x = AVG(x) */
    
    // validate aggregates
    if (!::validateAggregates(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    if (!::validateWindowSpec(parser, (yyvsp[-1].node), yylloc.first_line, yylloc.first_column)) {
      YYABORT;
    }
    
    auto node = parser->ast()->createNodeWindow(/*spec*/(yyvsp[-1].node), /*range*/(yyvsp[-3].node), /*aggrs*/(yyvsp[0].node));
    parser->ast()->addOperation(node);
  }
#line 4067 "grammar.cpp"
    break;

  case 100: /* return_statement: "RETURN declaration" distinct_expression  */
#line 1380 "grammar.y"
                                 {
      auto node = parser->ast()->createNodeReturn((yyvsp[0].node));
      parser->ast()->addOperation(node);
      parser->ast()->scopes()->endNested();
    }
#line 4077 "grammar.cpp"
    break;

  case 101: /* in_or_into_collection: "IN keyword" in_or_into_collection_name  */
#line 1388 "grammar.y"
                                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4085 "grammar.cpp"
    break;

  case 102: /* in_or_into_collection: "INTO keyword" in_or_into_collection_name  */
#line 1391 "grammar.y"
                                      {
       (yyval.node) = (yyvsp[0].node);
     }
#line 4093 "grammar.cpp"
    break;

  case 103: /* remove_statement: "REMOVE command" expression in_or_into_collection options  */
#line 1397 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeRemove((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4105 "grammar.cpp"
    break;

  case 104: /* insert_statement: "INSERT command" expression in_or_into_collection options  */
#line 1407 "grammar.y"
                                                      {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }
      auto node = parser->ast()->createNodeInsert((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4117 "grammar.cpp"
    break;

  case 105: /* update_parameters: expression in_or_into_collection options  */
#line 1417 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4130 "grammar.cpp"
    break;

  case 106: /* update_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1425 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeUpdate((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4143 "grammar.cpp"
    break;

  case 107: /* update_statement: "UPDATE command" update_parameters  */
#line 1436 "grammar.y"
                               {
    }
#line 4150 "grammar.cpp"
    break;

  case 108: /* replace_parameters: expression in_or_into_collection options  */
#line 1441 "grammar.y"
                                             {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace(nullptr, (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4163 "grammar.cpp"
    break;

  case 109: /* replace_parameters: expression "WITH keyword" expression in_or_into_collection options  */
#line 1449 "grammar.y"
                                                               {
      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      AstNode* node = parser->ast()->createNodeReplace((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 4176 "grammar.cpp"
    break;

  case 110: /* replace_statement: "REPLACE command" replace_parameters  */
#line 1460 "grammar.y"
                                 {
    }
#line 4183 "grammar.cpp"
    break;

  case 111: /* update_or_replace: "UPDATE command"  */
#line 1465 "grammar.y"
             {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_UPDATE);
    }
#line 4191 "grammar.cpp"
    break;

  case 112: /* update_or_replace: "REPLACE command"  */
#line 1468 "grammar.y"
              {
      (yyval.intval) = static_cast<int64_t>(NODE_TYPE_REPLACE);
    }
#line 4199 "grammar.cpp"
    break;

  case 113: /* upsert_input: object  */
#line 1474 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4207 "grammar.cpp"
    break;

  case 114: /* upsert_input: bind_parameter  */
#line 1477 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4215 "grammar.cpp"
    break;

  case 115: /* $@8: %empty  */
#line 1483 "grammar.y"
                      {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);
      parser->pushStack(variableNode);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      auto forNode = parser->ast()->createNodeForUpsert(Variable::NAME_CURRENT.data(), Variable::NAME_CURRENT.size(), parser->ast()->createNodeArray(), false);
      scopes->stackCurrentVariable(scopes->getVariable(Variable::NAME_CURRENT));
      parser->ast()->addOperation(forNode);
      parser->pushStack(forNode);
    }
#line 4237 "grammar.cpp"
    break;

  case 116: /* $@9: %empty  */
#line 1499 "grammar.y"
                 {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      AstNode* variableNode = static_cast<AstNode*>(parser->popStack());
      auto filterNode = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(filterNode);
      
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(static_cast<Variable const*>(forNode->getMember(0)->getData()));
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.data(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4274 "grammar.cpp"
    break;

  case 117: /* upsert_statement: "UPSERT command" "FILTER declaration" $@8 expression $@9 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1530 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4295 "grammar.cpp"
    break;

  case 118: /* $@10: %empty  */
#line 1546 "grammar.y"
                          {
      // reserve a variable named "$OLD", we might need it in the update expression
      // and in a later return thing
      AstNode* variableNode = parser->ast()->createNodeVariable(Variable::NAME_OLD, false);

      auto scopes = parser->ast()->scopes();

      scopes->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();

      scopes->start(arangodb::aql::AQL_SCOPE_FOR);
      std::string const variableName = parser->ast()->variables()->nextName();
      auto forNode = parser->ast()->createNodeForUpsert(variableName.c_str(), variableName.size(), parser->ast()->createNodeArray(), false);
      parser->ast()->addOperation(forNode);

      auto filterNode = parser->ast()->createNodeUpsertFilter(parser->ast()->createNodeReference(variableName), (yyvsp[0].node));
      parser->ast()->addOperation(filterNode);

      auto offsetValue = parser->ast()->createNodeValueInt(0);
      auto limitValue = parser->ast()->createNodeValueInt(1);
      auto limitNode = parser->ast()->createNodeLimit(offsetValue, limitValue);
      parser->ast()->addOperation(limitNode);

      auto refNode = parser->ast()->createNodeReference(variableName);
      auto returnNode = parser->ast()->createNodeReturn(refNode);
      parser->ast()->addOperation(returnNode);
      scopes->endNested();

      AstNode* subqueryNode = parser->ast()->endSubQuery();
      scopes->endCurrent();

      std::string const subqueryName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(subqueryName.c_str(), subqueryName.size(), subqueryNode, false);
      parser->ast()->addOperation(subQuery);

      auto index = parser->ast()->createNodeValueInt(0);
      auto firstDoc = parser->ast()->createNodeLet(variableNode, parser->ast()->createNodeIndexedAccess(parser->ast()->createNodeReference(subqueryName), index));
      parser->ast()->addOperation(firstDoc);

      parser->pushStack(forNode);
    }
#line 4341 "grammar.cpp"
    break;

  case 119: /* upsert_statement: "UPSERT command" upsert_input $@10 "INSERT command" expression update_or_replace expression in_or_into_collection options  */
#line 1586 "grammar.y"
                                                                                     {
      AstNode* forNode = static_cast<AstNode*>(parser->popStack());
      forNode->changeMember(1, (yyvsp[-1].node));
      bool canReadOwnWrites = true;
      auto* forOptionsNode = parser->ast()->createNodeObject();
      auto* upsertOptionsNode = parser->ast()->createNodeObject();
      handleUpsertOptions((yyvsp[0].node), forNode, forOptionsNode, upsertOptionsNode, canReadOwnWrites);
      TRI_ASSERT(forNode->hasFlag(AstNodeFlagType::FLAG_READ_OWN_WRITES) || !canReadOwnWrites);

      if (!parser->configureWriteQuery((yyvsp[-1].node), (yyvsp[0].node))) {
        YYABORT;
      }

      auto node = parser->ast()->createNodeUpsert(static_cast<AstNodeType>((yyvsp[-3].intval)), parser->ast()->createNodeReference(Variable::NAME_OLD), (yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[-1].node), upsertOptionsNode, canReadOwnWrites);
      parser->ast()->addOperation(node);
    }
#line 4362 "grammar.cpp"
    break;

  case 120: /* quantifier: "all modifier"  */
#line 1605 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAll);
    }
#line 4370 "grammar.cpp"
    break;

  case 121: /* quantifier: "any modifier"  */
#line 1608 "grammar.y"
          {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kAny);
    }
#line 4378 "grammar.cpp"
    break;

  case 122: /* quantifier: "none modifier"  */
#line 1611 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeQuantifier(Quantifier::Type::kNone);
    }
#line 4386 "grammar.cpp"
    break;

  case 123: /* $@11: %empty  */
#line 1617 "grammar.y"
               {
      auto const scopeType = parser->ast()->scopes()->type();

      if (scopeType == AQL_SCOPE_MAIN ||
          scopeType == AQL_SCOPE_SUBQUERY) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
      }
    }
#line 4399 "grammar.cpp"
    break;

  case 124: /* distinct_expression: "DISTINCT modifier" $@11 expression  */
#line 1624 "grammar.y"
                 {
      (yyval.node) = parser->ast()->createNodeDistinct((yyvsp[0].node));
    }
#line 4407 "grammar.cpp"
    break;

  case 125: /* distinct_expression: expression  */
#line 1627 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4415 "grammar.cpp"
    break;

  case 126: /* expression: operator_unary  */
#line 1633 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4423 "grammar.cpp"
    break;

  case 127: /* expression: operator_binary  */
#line 1636 "grammar.y"
                    {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4431 "grammar.cpp"
    break;

  case 128: /* expression: operator_ternary  */
#line 1639 "grammar.y"
                     {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4439 "grammar.cpp"
    break;

  case 129: /* expression: value_literal  */
#line 1642 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4447 "grammar.cpp"
    break;

  case 130: /* expression: reference  */
#line 1645 "grammar.y"
              {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4455 "grammar.cpp"
    break;

  case 131: /* expression: expression ".." expression  */
#line 1648 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeRange((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4463 "grammar.cpp"
    break;

  case 132: /* function_name: "identifier"  */
#line 1654 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 4471 "grammar.cpp"
    break;

  case 133: /* function_name: function_name "::" "identifier"  */
#line 1657 "grammar.y"
                                   {
      std::string temp((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      temp.append("::");
      temp.append((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto p = parser->ast()->resources().registerString(temp);
      TRI_ASSERT(p != nullptr);

      (yyval.strval).value = p;
      (yyval.strval).length = temp.size();
    }
#line 4486 "grammar.cpp"
    break;

  case 134: /* $@12: %empty  */
#line 1670 "grammar.y"
                         {
      parser->pushStack((yyvsp[-1].strval).value);

      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4497 "grammar.cpp"
    break;

  case 135: /* function_call: function_name "(" $@12 optional_function_call_arguments ")"  */
#line 1675 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall(static_cast<char const*>(parser->popStack()), list, false);
    }
#line 4506 "grammar.cpp"
    break;

  case 136: /* $@13: %empty  */
#line 1679 "grammar.y"
                  {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 4515 "grammar.cpp"
    break;

  case 137: /* function_call: "like operator" "(" $@13 optional_function_call_arguments ")"  */
#line 1682 "grammar.y"
                                                              {
      auto list = static_cast<AstNode const*>(parser->popStack());
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", list, false);
    }
#line 4524 "grammar.cpp"
    break;

  case 138: /* operator_unary: "+ operator" expression  */
#line 1689 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_PLUS, (yyvsp[0].node)));
    }
#line 4532 "grammar.cpp"
    break;

  case 139: /* operator_unary: "- operator" expression  */
#line 1692 "grammar.y"
                                    {
      (yyval.node) = parser->ast()->optimizeUnaryOperatorArithmetic(parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_MINUS, (yyvsp[0].node)));
    }
#line 4540 "grammar.cpp"
    break;

  case 140: /* operator_unary: "not operator" expression  */
#line 1695 "grammar.y"
                                     {
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, (yyvsp[0].node));
    }
#line 4548 "grammar.cpp"
    break;

  case 141: /* operator_binary: expression "or operator" expression  */
#line 1701 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_OR, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4556 "grammar.cpp"
    break;

  case 142: /* operator_binary: expression "and operator" expression  */
#line 1704 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_AND, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4564 "grammar.cpp"
    break;

  case 143: /* operator_binary: expression "+ operator" expression  */
#line 1707 "grammar.y"
                                 {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_PLUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4572 "grammar.cpp"
    break;

  case 144: /* operator_binary: expression "- operator" expression  */
#line 1710 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MINUS, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4580 "grammar.cpp"
    break;

  case 145: /* operator_binary: expression "* operator" expression  */
#line 1713 "grammar.y"
                                  {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_TIMES, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4588 "grammar.cpp"
    break;

  case 146: /* operator_binary: expression "/ operator" expression  */
#line 1716 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_DIV, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4596 "grammar.cpp"
    break;

  case 147: /* operator_binary: expression "% operator" expression  */
#line 1719 "grammar.y"
                                {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_MOD, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4604 "grammar.cpp"
    break;

  case 148: /* operator_binary: expression "== operator" expression  */
#line 1722 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_EQ, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4612 "grammar.cpp"
    break;

  case 149: /* operator_binary: expression "!= operator" expression  */
#line 1725 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4620 "grammar.cpp"
    break;

  case 150: /* operator_binary: expression "< operator" expression  */
#line 1728 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4628 "grammar.cpp"
    break;

  case 151: /* operator_binary: expression "> operator" expression  */
#line 1731 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GT, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4636 "grammar.cpp"
    break;

  case 152: /* operator_binary: expression "<= operator" expression  */
#line 1734 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_LE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4644 "grammar.cpp"
    break;

  case 153: /* operator_binary: expression ">= operator" expression  */
#line 1737 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_GE, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4652 "grammar.cpp"
    break;

  case 154: /* operator_binary: expression "IN keyword" expression  */
#line 1740 "grammar.y"
                               {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_IN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4660 "grammar.cpp"
    break;

  case 155: /* operator_binary: expression "not in operator" expression  */
#line 1743 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeBinaryOperator(NODE_TYPE_OPERATOR_BINARY_NIN, (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4668 "grammar.cpp"
    break;

  case 156: /* operator_binary: expression "not operator" "like operator" expression  */
#line 1746 "grammar.y"
                                       {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4680 "grammar.cpp"
    break;

  case 157: /* operator_binary: expression "not operator" "~= operator" expression  */
#line 1753 "grammar.y"
                                              {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* expression = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, expression);
    }
#line 4692 "grammar.cpp"
    break;

  case 158: /* operator_binary: expression "not operator" "~! operator" expression  */
#line 1760 "grammar.y"
                                                  {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-3].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4703 "grammar.cpp"
    break;

  case 159: /* operator_binary: expression "like operator" expression  */
#line 1766 "grammar.y"
                                 {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("LIKE", arguments, false);
    }
#line 4714 "grammar.cpp"
    break;

  case 160: /* operator_binary: expression "~= operator" expression  */
#line 1772 "grammar.y"
                                        {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      (yyval.node) = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
    }
#line 4725 "grammar.cpp"
    break;

  case 161: /* operator_binary: expression "~! operator" expression  */
#line 1778 "grammar.y"
                                            {
      AstNode* arguments = parser->ast()->createNodeArray(2);
      arguments->addMember((yyvsp[-2].node));
      arguments->addMember((yyvsp[0].node));
      AstNode* node = parser->ast()->createNodeFunctionCall("REGEX_TEST", arguments, false);
      (yyval.node) = parser->ast()->createNodeUnaryOperator(NODE_TYPE_OPERATOR_UNARY_NOT, node);
    }
#line 4737 "grammar.cpp"
    break;

  case 162: /* operator_binary: expression quantifier "== operator" expression  */
#line 1785 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4745 "grammar.cpp"
    break;

  case 163: /* operator_binary: expression quantifier "!= operator" expression  */
#line 1788 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4753 "grammar.cpp"
    break;

  case 164: /* operator_binary: expression quantifier "< operator" expression  */
#line 1791 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4761 "grammar.cpp"
    break;

  case 165: /* operator_binary: expression quantifier "> operator" expression  */
#line 1794 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4769 "grammar.cpp"
    break;

  case 166: /* operator_binary: expression quantifier "<= operator" expression  */
#line 1797 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4777 "grammar.cpp"
    break;

  case 167: /* operator_binary: expression quantifier ">= operator" expression  */
#line 1800 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4785 "grammar.cpp"
    break;

  case 168: /* operator_binary: expression quantifier "IN keyword" expression  */
#line 1803 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4793 "grammar.cpp"
    break;

  case 169: /* operator_binary: expression quantifier "not in operator" expression  */
#line 1806 "grammar.y"
                                              {
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-3].node), (yyvsp[0].node), (yyvsp[-2].node));
    }
#line 4801 "grammar.cpp"
    break;

  case 170: /* operator_binary: expression "at least modifier" "(" expression ")" "== operator" expression  */
#line 1809 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_EQ, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4810 "grammar.cpp"
    break;

  case 171: /* operator_binary: expression "at least modifier" "(" expression ")" "!= operator" expression  */
#line 1813 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4819 "grammar.cpp"
    break;

  case 172: /* operator_binary: expression "at least modifier" "(" expression ")" "< operator" expression  */
#line 1817 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4828 "grammar.cpp"
    break;

  case 173: /* operator_binary: expression "at least modifier" "(" expression ")" "> operator" expression  */
#line 1821 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GT, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4837 "grammar.cpp"
    break;

  case 174: /* operator_binary: expression "at least modifier" "(" expression ")" "<= operator" expression  */
#line 1825 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_LE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4846 "grammar.cpp"
    break;

  case 175: /* operator_binary: expression "at least modifier" "(" expression ")" ">= operator" expression  */
#line 1829 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_GE, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4855 "grammar.cpp"
    break;

  case 176: /* operator_binary: expression "at least modifier" "(" expression ")" "IN keyword" expression  */
#line 1833 "grammar.y"
                                                                    {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_IN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4864 "grammar.cpp"
    break;

  case 177: /* operator_binary: expression "at least modifier" "(" expression ")" "not in operator" expression  */
#line 1837 "grammar.y"
                                                                        {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeBinaryArrayOperator(NODE_TYPE_OPERATOR_BINARY_ARRAY_NIN, (yyvsp[-6].node), (yyvsp[0].node), quantifier);
    }
#line 4873 "grammar.cpp"
    break;

  case 178: /* operator_ternary: expression "?" expression ":" expression  */
#line 1844 "grammar.y"
                                                        {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node));
    }
#line 4881 "grammar.cpp"
    break;

  case 179: /* operator_ternary: expression "?" ":" expression  */
#line 1847 "grammar.y"
                                             {
      (yyval.node) = parser->ast()->createNodeTernaryOperator((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 4889 "grammar.cpp"
    break;

  case 180: /* optional_function_call_arguments: %empty  */
#line 1853 "grammar.y"
                {
    }
#line 4896 "grammar.cpp"
    break;

  case 181: /* optional_function_call_arguments: function_arguments_list  */
#line 1855 "grammar.y"
                            {
    }
#line 4903 "grammar.cpp"
    break;

  case 182: /* function_arguments_list: expression  */
#line 1860 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4911 "grammar.cpp"
    break;

  case 183: /* function_arguments_list: function_arguments_list "," expression  */
#line 1863 "grammar.y"
                                               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4919 "grammar.cpp"
    break;

  case 184: /* compound_value: array  */
#line 1869 "grammar.y"
          {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4927 "grammar.cpp"
    break;

  case 185: /* compound_value: object  */
#line 1872 "grammar.y"
           {
      (yyval.node) = (yyvsp[0].node);
    }
#line 4935 "grammar.cpp"
    break;

  case 186: /* $@14: %empty  */
#line 1878 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 4944 "grammar.cpp"
    break;

  case 187: /* array: "[" $@14 optional_array_elements "]"  */
#line 1881 "grammar.y"
                                            {
      (yyval.node) = parser->popArray();
    }
#line 4952 "grammar.cpp"
    break;

  case 188: /* optional_array_elements: %empty  */
#line 1887 "grammar.y"
                {
    }
#line 4959 "grammar.cpp"
    break;

  case 189: /* optional_array_elements: array_elements_list  */
#line 1889 "grammar.y"
                        {
    }
#line 4966 "grammar.cpp"
    break;

  case 190: /* optional_array_elements: array_elements_list ","  */
#line 1891 "grammar.y"
                                {
    }
#line 4973 "grammar.cpp"
    break;

  case 191: /* array_elements_list: array_element  */
#line 1896 "grammar.y"
                  {
    }
#line 4980 "grammar.cpp"
    break;

  case 192: /* array_elements_list: array_elements_list "," array_element  */
#line 1898 "grammar.y"
                                              {
    }
#line 4987 "grammar.cpp"
    break;

  case 193: /* array_element: expression  */
#line 1903 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 4995 "grammar.cpp"
    break;

  case 194: /* for_options: %empty  */
#line 1909 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5003 "grammar.cpp"
    break;

  case 195: /* for_options: "identifier" expression  */
#line 1912 "grammar.y"
                        {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      // we always return an array with two values: SEARCH and OPTIONS
      // as only one of these values will be set here, the other value is NOP
      auto node = parser->ast()->createNodeArray(2);
      // only one extra qualifier. now we need to check if it is SEARCH or OPTIONS

      if (::caseInsensitiveEqual(operation, "SEARCH")) {
        // found SEARCH
        node->addMember((yyvsp[0].node));
        node->addMember(parser->ast()->createNodeNop());
      } else {
        // everything else must be OPTIONS
        if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' or 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
        }
        ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

        node->addMember(parser->ast()->createNodeNop());
        node->addMember((yyvsp[0].node));
      }

      (yyval.node) = node;
    }
#line 5033 "grammar.cpp"
    break;

  case 196: /* for_options: "identifier" expression "identifier" expression  */
#line 1937 "grammar.y"
                                            {
      std::string_view operation((yyvsp[-3].strval).value, (yyvsp[-3].strval).length);
      TRI_ASSERT((yyvsp[-2].node) != nullptr);
      // two extra qualifiers. we expect them in the order: SEARCH, then OPTIONS

      if (!::caseInsensitiveEqual(operation, "SEARCH") ||
          !::caseInsensitiveEqual({(yyvsp[-1].strval).value, (yyvsp[-1].strval).length}, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'SEARCH' and 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      auto node = parser->ast()->createNodeArray(2);
      node->addMember((yyvsp[-2].node));
      node->addMember((yyvsp[0].node));
      (yyval.node) = node;
    }
#line 5055 "grammar.cpp"
    break;

  case 197: /* options: %empty  */
#line 1957 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5063 "grammar.cpp"
    break;

  case 198: /* options: "identifier" object  */
#line 1960 "grammar.y"
                    {
      std::string_view operation((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      TRI_ASSERT((yyvsp[0].node) != nullptr);

      if (!::caseInsensitiveEqual(operation, "OPTIONS")) {
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected qualifier '%s', expecting 'OPTIONS'", operation, yylloc.first_line, yylloc.first_column);
      }
     
      ::validateOptions(parser, (yyvsp[0].node), yylloc.first_line, yylloc.first_column);

      (yyval.node) = (yyvsp[0].node);
    }
#line 5080 "grammar.cpp"
    break;

  case 199: /* $@15: %empty  */
#line 1975 "grammar.y"
                  {
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
    }
#line 5089 "grammar.cpp"
    break;

  case 200: /* object: "{" $@15 optional_object_elements "}"  */
#line 1978 "grammar.y"
                                              {
      (yyval.node) = static_cast<AstNode*>(parser->popStack());
    }
#line 5097 "grammar.cpp"
    break;

  case 201: /* optional_object_elements: %empty  */
#line 1984 "grammar.y"
                {
    }
#line 5104 "grammar.cpp"
    break;

  case 202: /* optional_object_elements: object_elements_list  */
#line 1986 "grammar.y"
                         {
    }
#line 5111 "grammar.cpp"
    break;

  case 203: /* optional_object_elements: object_elements_list ","  */
#line 1988 "grammar.y"
                                 {
    }
#line 5118 "grammar.cpp"
    break;

  case 204: /* object_elements_list: object_element  */
#line 1993 "grammar.y"
                   {
    }
#line 5125 "grammar.cpp"
    break;

  case 205: /* object_elements_list: object_elements_list "," object_element  */
#line 1995 "grammar.y"
                                                {
    }
#line 5132 "grammar.cpp"
    break;

  case 206: /* object_element: "identifier"  */
#line 2000 "grammar.y"
             {
      // attribute-name-only (comparable to JS enhanced object literals, e.g. { foo, bar })
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);

      auto ast = parser->ast();
      auto variable = ast->scopes()->getVariable(name, true);

      if (variable == nullptr) {
        // variable does not exist
        parser->registerParseError(TRI_ERROR_QUERY_VARIABLE_NAME_UNKNOWN, "use of unknown variable '%s' in object literal", name, yylloc.first_line, yylloc.first_column);
      }

      // create a reference to the variable
      auto node = ast->createNodeReference(variable);
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, node);
    }
#line 5153 "grammar.cpp"
    break;

  case 207: /* object_element: object_element_name ":" expression  */
#line 2016 "grammar.y"
                                           {
      // attribute-name : attribute-value
      parser->pushObjectElement((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node));
    }
#line 5162 "grammar.cpp"
    break;

  case 208: /* object_element: "bind parameter" ":" expression  */
#line 2020 "grammar.y"
                                   {
      // bind-parameter : attribute-value
      std::string_view name((yyvsp[-2].strval).value, (yyvsp[-2].strval).length);
      if ((yyvsp[-2].strval).length < 1 || (yyvsp[-2].strval).value[0] == '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      auto param = parser->ast()->createNodeParameter(name);
      parser->pushObjectElement(param, (yyvsp[0].node));
    }
#line 5177 "grammar.cpp"
    break;

  case 209: /* object_element: "[" expression "]" ":" expression  */
#line 2030 "grammar.y"
                                                             {
      // [ attribute-name-expression ] : attribute-value
      parser->pushObjectElement((yyvsp[-3].node), (yyvsp[0].node));
    }
#line 5186 "grammar.cpp"
    break;

  case 210: /* array_filter_operator: "?"  */
#line 2037 "grammar.y"
               {
      (yyval.intval) = 1;
    }
#line 5194 "grammar.cpp"
    break;

  case 211: /* array_filter_operator: array_filter_operator "?"  */
#line 2040 "grammar.y"
                                     {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5202 "grammar.cpp"
    break;

  case 212: /* array_map_operator: "* operator"  */
#line 2046 "grammar.y"
            {
      (yyval.intval) = 1;
    }
#line 5210 "grammar.cpp"
    break;

  case 213: /* array_map_operator: array_map_operator "* operator"  */
#line 2049 "grammar.y"
                               {
      (yyval.intval) = (yyvsp[-1].intval) + 1;
    }
#line 5218 "grammar.cpp"
    break;

  case 214: /* optional_array_filter: %empty  */
#line 2055 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5226 "grammar.cpp"
    break;

  case 215: /* optional_array_filter: "FILTER declaration" expression  */
#line 2058 "grammar.y"
                        {
      // FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter(nullptr, (yyvsp[0].node));
    }
#line 5235 "grammar.cpp"
    break;

  case 216: /* optional_array_filter: quantifier "FILTER declaration" expression  */
#line 2062 "grammar.y"
                                   {
      // ALL|ANY|NONE|AT LEAST FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5244 "grammar.cpp"
    break;

  case 217: /* optional_array_filter: "at least modifier" "(" expression ")" "FILTER declaration" expression  */
#line 2066 "grammar.y"
                                                             {
      AstNode* quantifier = parser->ast()->createNodeQuantifier(Quantifier::Type::kAtLeast, (yyvsp[-3].node));
      (yyval.node) = parser->ast()->createNodeArrayFilter(quantifier, (yyvsp[0].node));
    }
#line 5253 "grammar.cpp"
    break;

  case 218: /* optional_array_filter: expression "FILTER declaration" expression  */
#line 2070 "grammar.y"
                                   {
      // 1    FILTER filter-condition
      // 2..5 FILTER filter-condition
      (yyval.node) = parser->ast()->createNodeArrayFilter((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5263 "grammar.cpp"
    break;

  case 219: /* optional_array_limit: %empty  */
#line 2078 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5271 "grammar.cpp"
    break;

  case 220: /* optional_array_limit: "LIMIT declaration" expression  */
#line 2081 "grammar.y"
                       {
      (yyval.node) = parser->ast()->createNodeArrayLimit(nullptr, (yyvsp[0].node));
    }
#line 5279 "grammar.cpp"
    break;

  case 221: /* optional_array_limit: "LIMIT declaration" expression "," expression  */
#line 2084 "grammar.y"
                                          {
      (yyval.node) = parser->ast()->createNodeArrayLimit((yyvsp[-2].node), (yyvsp[0].node));
    }
#line 5287 "grammar.cpp"
    break;

  case 222: /* optional_array_return: %empty  */
#line 2090 "grammar.y"
                {
      (yyval.node) = nullptr;
    }
#line 5295 "grammar.cpp"
    break;

  case 223: /* optional_array_return: "RETURN declaration" expression  */
#line 2093 "grammar.y"
                        {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5303 "grammar.cpp"
    break;

  case 224: /* graph_collection: "identifier"  */
#line 2099 "grammar.y"
             {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5311 "grammar.cpp"
    break;

  case 225: /* graph_collection: bind_parameter_datasource_expected  */
#line 2102 "grammar.y"
                                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5319 "grammar.cpp"
    break;

  case 226: /* graph_collection: graph_direction "identifier"  */
#line 2105 "grammar.y"
                             {
      auto tmp = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), tmp);
    }
#line 5328 "grammar.cpp"
    break;

  case 227: /* graph_collection: graph_direction bind_parameter  */
#line 2109 "grammar.y"
                                   {
      (yyval.node) = parser->ast()->createNodeCollectionDirection((yyvsp[-1].intval), (yyvsp[0].node));
    }
#line 5336 "grammar.cpp"
    break;

  case 228: /* graph_collection_list: graph_collection  */
#line 2115 "grammar.y"
                      {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5345 "grammar.cpp"
    break;

  case 229: /* graph_collection_list: graph_collection_list "," graph_collection  */
#line 2119 "grammar.y"
                                                    {
       auto node = static_cast<AstNode*>(parser->peekStack());
       node->addMember((yyvsp[0].node));
     }
#line 5354 "grammar.cpp"
    break;

  case 230: /* graph_subject: graph_collection  */
#line 2126 "grammar.y"
                     {
      auto node = parser->ast()->createNodeArray();
      node->addMember((yyvsp[0].node));
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5365 "grammar.cpp"
    break;

  case 231: /* $@16: %empty  */
#line 2132 "grammar.y"
                             {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
      node->addMember((yyvsp[-1].node));
    }
#line 5375 "grammar.cpp"
    break;

  case 232: /* graph_subject: graph_collection "," $@16 graph_collection_list  */
#line 2136 "grammar.y"
                            {
      auto node = static_cast<AstNode*>(parser->popStack());
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollectionList(node, resolver);
    }
#line 5385 "grammar.cpp"
    break;

  case 233: /* graph_subject: "GRAPH keyword" bind_parameter  */
#line 2141 "grammar.y"
                           {
      // graph name
      (yyval.node) = (yyvsp[0].node);
    }
#line 5394 "grammar.cpp"
    break;

  case 234: /* graph_subject: "GRAPH keyword" "quoted string"  */
#line 2145 "grammar.y"
                            {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5403 "grammar.cpp"
    break;

  case 235: /* graph_subject: "GRAPH keyword" "identifier"  */
#line 2149 "grammar.y"
                     {
      // graph name
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5412 "grammar.cpp"
    break;

  case 236: /* graph_direction: "outbound modifier"  */
#line 2158 "grammar.y"
               {
      (yyval.intval) = 2;
    }
#line 5420 "grammar.cpp"
    break;

  case 237: /* graph_direction: "inbound modifier"  */
#line 2161 "grammar.y"
              {
      (yyval.intval) = 1;
    }
#line 5428 "grammar.cpp"
    break;

  case 238: /* graph_direction: "any modifier"  */
#line 2164 "grammar.y"
          {
      (yyval.intval) = 0;
    }
#line 5436 "grammar.cpp"
    break;

  case 239: /* graph_direction_steps: graph_direction  */
#line 2170 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), 1);
    }
#line 5444 "grammar.cpp"
    break;

  case 240: /* graph_direction_steps: expression graph_direction  */
#line 2173 "grammar.y"
                                                {
      (yyval.node) = parser->ast()->createNodeDirection((yyvsp[0].intval), (yyvsp[-1].node));
    }
#line 5452 "grammar.cpp"
    break;

  case 241: /* reference: "identifier"  */
#line 2179 "grammar.y"
             {
      AstNode* node = nullptr;

      auto ast = parser->ast();
      std::string_view variableName((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto variable = ast->scopes()->getVariable(variableName, true);

      if (variable == nullptr) {
        // variable does not exist
        // now try special variables
        if (parser->checkVariableNameIsCurrent(variableName)) {
          variable = ast->scopes()->getCurrentVariable();
        }
      }

      if (variable != nullptr) {
        // variable alias exists, now use it
        node = ast->createNodeReference(variable);
      }

      if (node == nullptr) {//为collection时
        // variable not found. so it must have been a collection or view
        auto const& resolver = parser->query().resolver();
        node = ast->createNodeDataSource(resolver, variableName, arangodb::AccessMode::Type::READ, true, false,parser->isSQL());
        if(parser->isSQL()){
          parser->addSQLCollectionNode(node);
        }
        if(parser->isSelectSubQuery()){
          parser->pushSelectSubQueryPending(node,std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
        }
      }
      TRI_ASSERT(node != nullptr);

      if(parser->isSelect()){
        parser->pushSelectPending(node,std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      }
      
      (yyval.node) = node;
    }
#line 5496 "grammar.cpp"
    break;

  case 242: /* reference: compound_value  */
#line 2218 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5504 "grammar.cpp"
    break;

  case 243: /* reference: bind_parameter  */
#line 2221 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5512 "grammar.cpp"
    break;

  case 244: /* reference: function_call  */
#line 2224 "grammar.y"
                  {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5521 "grammar.cpp"
    break;

  case 245: /* reference: "(" expression ")"  */
#line 2228 "grammar.y"
                              {
      if ((yyvsp[-1].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyval.node) = parser->ast()->createNodePassthru((yyvsp[-1].node));
      } else {
        (yyval.node) = (yyvsp[-1].node);
      }
    }
#line 5535 "grammar.cpp"
    break;

  case 246: /* $@17: %empty  */
#line 2237 "grammar.y"
           {
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_SUBQUERY);
      parser->ast()->startSubQuery();
    }
#line 5544 "grammar.cpp"
    break;

  case 247: /* reference: "(" $@17 query ")"  */
#line 2240 "grammar.y"
                    {
      AstNode* node = parser->ast()->endSubQuery();
      parser->ast()->scopes()->endCurrent();

      std::string const variableName = parser->ast()->variables()->nextName();
      auto subQuery = parser->ast()->createNodeLet(variableName.c_str(), variableName.size(), node, false);
      if(parser->isSelect()){
        parser->pushSelectSubQueryQueue(subQuery);
      }else{
        parser->ast()->addOperation(subQuery);
      }
      (yyval.node) = parser->ast()->createNodeSubqueryReference(variableName, node);
    }
#line 5562 "grammar.cpp"
    break;

  case 248: /* reference: reference '.' "identifier"  */
#line 2253 "grammar.y"
                                           {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      // named variable access, e.g. variable.reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // dive into the expansion's right-hand child nodes for further expansion and
        // patch the bottom-most one
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeAttributeAccess(current->getMember(1), name));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeAttributeAccess((yyvsp[-2].node), name);
      }
    }
#line 5582 "grammar.cpp"
    break;

  case 249: /* reference: reference '.' bind_parameter  */
#line 2268 "grammar.y"
                                                 {
      // named variable access, e.g. variable.@reference
      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-2].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeBoundAttributeAccess(current->getMember(1), (yyvsp[0].node)));
        (yyval.node) = (yyvsp[-2].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBoundAttributeAccess((yyvsp[-2].node), (yyvsp[0].node));
      }
    }
#line 5600 "grammar.cpp"
    break;

  case 250: /* reference: reference '.' "* operator"  */
#line 2281 "grammar.y"
                         {
    (yyvsp[-2].node)->setFlag(FLAG_TIMES);
    (yyval.node) = (yyvsp[-2].node);
  }
#line 5609 "grammar.cpp"
    break;

  case 251: /* $@18: %empty  */
#line 2285 "grammar.y"
                           {      
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node);
    }
#line 5618 "grammar.cpp"
    break;

  case 252: /* reference: reference "[" $@18 ndarray_expression_list "]"  */
#line 2288 "grammar.y"
                                                          {
      // indexed variable access, e.g. variable[index]
      if ((yyvsp[-4].node)->type == NODE_TYPE_EXPANSION) {
        // if left operand is an expansion already...
        // patch the existing expansion
        auto current = const_cast<AstNode*>(parser->ast()->findExpansionSubNode((yyvsp[-4].node)));
        TRI_ASSERT(current->type == NODE_TYPE_EXPANSION);
        current->changeMember(1, parser->ast()->createNodeIndexedAccess(current->getMember(1),parser->popArray()));
        (yyval.node) = (yyvsp[-4].node);
      } else {
        (yyval.node) = parser->ast()->createNodeIndexedAccess((yyvsp[-4].node), parser->popArray());
      }
    }
#line 5636 "grammar.cpp"
    break;

  case 253: /* $@19: %empty  */
#line 2301 "grammar.y"
                                                 {
      // variable expansion, e.g. variable[?], with optional FILTER clause
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5663 "grammar.cpp"
    break;

  case 254: /* reference: reference "[" array_filter_operator $@19 optional_array_filter "]"  */
#line 2322 "grammar.y"
                                                          {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-5].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
        (yyvsp[-5].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-5].node);
      } else {
        (yyval.node) = parser->ast()->createNodeBooleanExpansion((yyvsp[-3].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-1].node));
      }
    }
#line 5685 "grammar.cpp"
    break;

  case 255: /* $@20: %empty  */
#line 2339 "grammar.y"
                                              {
      // variable expansion, e.g. variable[*], with optional FILTER, LIMIT and RETURN clauses
      if ((yyvsp[0].intval) > 1 && (yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        // create a dummy passthru node that reduces and evaluates the expansion first
        // and the expansion on top of the stack won't be chained with any other expansions
        (yyvsp[-2].node) = parser->ast()->createNodePassthru((yyvsp[-2].node));
      }

      // create a temporary iterator variable
      std::string const nextName = parser->ast()->variables()->nextName() + "_";

      if ((yyvsp[-2].node)->type == NODE_TYPE_EXPANSION) {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node)->getMember(1));
        parser->pushStack(iterator);
      } else {
        auto iterator = parser->ast()->createNodeIterator(nextName.c_str(), nextName.size(), (yyvsp[-2].node));
        parser->pushStack(iterator);
      }

      auto scopes = parser->ast()->scopes();
      scopes->stackCurrentVariable(scopes->getVariable(nextName));
    }
#line 5712 "grammar.cpp"
    break;

  case 256: /* reference: reference "[" array_map_operator $@20 optional_array_filter optional_array_limit optional_array_return "]"  */
#line 2360 "grammar.y"
                                                                                                     {
      auto scopes = parser->ast()->scopes();
      scopes->unstackCurrentVariable();

      auto iterator = static_cast<AstNode const*>(parser->popStack());
      auto variableNode = iterator->getMember(0);
      TRI_ASSERT(variableNode->type == NODE_TYPE_VARIABLE);
      auto variable = static_cast<Variable const*>(variableNode->getData());

      if ((yyvsp[-3].node) != nullptr) {
        // array filter members are [quantifier, filter]
        // quantifier is optional.
        TRI_ASSERT((yyvsp[-3].node)->type == NODE_TYPE_ARRAY_FILTER);
        TRI_ASSERT((yyvsp[-3].node)->numMembers() == 2);
        if ((yyvsp[-3].node)->getMember(0) != nullptr && (yyvsp[-3].node)->getMember(0)->type != NODE_TYPE_NOP) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "unexpected quantifier value found for array expansion operation.", yylloc.first_line, yylloc.first_column);
        }
      }

      if ((yyvsp[-7].node)->type == NODE_TYPE_EXPANSION) {
        auto expand = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
        (yyvsp[-7].node)->changeMember(1, expand);
        (yyval.node) = (yyvsp[-7].node);
      } else {
        (yyval.node) = parser->ast()->createNodeExpansion((yyvsp[-5].intval), iterator, parser->ast()->createNodeReference(variable->name), (yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node));
      }
    }
#line 5744 "grammar.cpp"
    break;

  case 257: /* ndarray_expression_list: ndarray_expression  */
#line 2390 "grammar.y"
                       {

    }
#line 5752 "grammar.cpp"
    break;

  case 258: /* ndarray_expression_list: ndarray_expression_list "," ndarray_expression  */
#line 2393 "grammar.y"
                                                       {

    }
#line 5760 "grammar.cpp"
    break;

  case 259: /* ndarray_expression: expression  */
#line 2398 "grammar.y"
               {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5768 "grammar.cpp"
    break;

  case 260: /* ndarray_expression: range_index  */
#line 2401 "grammar.y"
                {
      parser->pushArrayElement((yyvsp[0].node));
    }
#line 5776 "grammar.cpp"
    break;

  case 261: /* ndarray_expression: variable_name "{" expression "}"  */
#line 2404 "grammar.y"
                                                         {
      parser->pushArrayElement(parser->ast()->createNodeNameIndex(std::string_view{(yyvsp[-3].strval).value, (yyvsp[-3].strval).length},(yyvsp[-1].node)));
    }
#line 5784 "grammar.cpp"
    break;

  case 262: /* ndarray_expression: variable_name "{" range_index "}"  */
#line 2407 "grammar.y"
                                                          {
      parser->pushArrayElement(parser->ast()->createNodeNameIndex(std::string_view{(yyvsp[-3].strval).value, (yyvsp[-3].strval).length},(yyvsp[-1].node)));
    }
#line 5792 "grammar.cpp"
    break;

  case 263: /* range_index: expression_or_none ":" expression_or_none interval_element  */
#line 2412 "grammar.y"
                                                                {
    (yyval.node)=parser->ast()->createNodeRangeIndexed((yyvsp[-3].node),(yyvsp[-1].node),(yyvsp[0].node));
  }
#line 5800 "grammar.cpp"
    break;

  case 264: /* expression_or_none: %empty  */
#line 2418 "grammar.y"
              {
      (yyval.node) = parser->ast()->createNodeNop();
    }
#line 5808 "grammar.cpp"
    break;

  case 265: /* expression_or_none: expression  */
#line 2421 "grammar.y"
               {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5816 "grammar.cpp"
    break;

  case 266: /* interval_element: %empty  */
#line 2426 "grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeNop();
    }
#line 5824 "grammar.cpp"
    break;

  case 267: /* interval_element: ":" expression  */
#line 2429 "grammar.y"
                       {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5832 "grammar.cpp"
    break;

  case 268: /* simple_value: value_literal  */
#line 2436 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5840 "grammar.cpp"
    break;

  case 269: /* simple_value: bind_parameter  */
#line 2439 "grammar.y"
                   {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5848 "grammar.cpp"
    break;

  case 270: /* numeric_value: "integer number"  */
#line 2445 "grammar.y"
              {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5857 "grammar.cpp"
    break;

  case 271: /* numeric_value: "number"  */
#line 2449 "grammar.y"
             {
      TRI_ASSERT((yyvsp[0].node) != nullptr);
      (yyval.node) = (yyvsp[0].node);
    }
#line 5866 "grammar.cpp"
    break;

  case 272: /* value_literal: "quoted string"  */
#line 2456 "grammar.y"
                    {
      (yyval.node) = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
    }
#line 5874 "grammar.cpp"
    break;

  case 273: /* value_literal: numeric_value  */
#line 2459 "grammar.y"
                  {
      (yyval.node) = (yyvsp[0].node);
    }
#line 5882 "grammar.cpp"
    break;

  case 274: /* value_literal: "null"  */
#line 2462 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueNull();
    }
#line 5890 "grammar.cpp"
    break;

  case 275: /* value_literal: "true"  */
#line 2465 "grammar.y"
           {
      (yyval.node) = parser->ast()->createNodeValueBool(true);
    }
#line 5898 "grammar.cpp"
    break;

  case 276: /* value_literal: "false"  */
#line 2468 "grammar.y"
            {
      (yyval.node) = parser->ast()->createNodeValueBool(false);
    }
#line 5906 "grammar.cpp"
    break;

  case 277: /* in_or_into_collection_name: "identifier"  */
#line 2474 "grammar.y"
             {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5916 "grammar.cpp"
    break;

  case 278: /* in_or_into_collection_name: "quoted string"  */
#line 2479 "grammar.y"
                    {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      auto const& resolver = parser->query().resolver();
      (yyval.node) = parser->ast()->createNodeCollection(resolver, name, arangodb::AccessMode::Type::WRITE);
    }
#line 5926 "grammar.cpp"
    break;

  case 279: /* in_or_into_collection_name: "bind data source parameter"  */
#line 2484 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5939 "grammar.cpp"
    break;

  case 280: /* bind_parameter: "bind data source parameter"  */
#line 2495 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), name, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5952 "grammar.cpp"
    break;

  case 281: /* bind_parameter: "bind parameter"  */
#line 2503 "grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameter(name);
    }
#line 5961 "grammar.cpp"
    break;

  case 282: /* bind_parameter_datasource_expected: "bind data source parameter"  */
#line 2510 "grammar.y"
                            {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      if (name.size() < 2 || name.front() != '@') {
        parser->registerParseError(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE, TRI_errno_string(TRI_ERROR_QUERY_BIND_PARAMETER_TYPE).data(), (yyvsp[0].strval).value, yylloc.first_line, yylloc.first_column);
      }

      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5974 "grammar.cpp"
    break;

  case 283: /* bind_parameter_datasource_expected: "bind parameter"  */
#line 2518 "grammar.y"
                {
      std::string_view name((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      (yyval.node) = parser->ast()->createNodeParameterDatasource(name);
    }
#line 5983 "grammar.cpp"
    break;

  case 284: /* object_element_name: "identifier"  */
#line 2525 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5991 "grammar.cpp"
    break;

  case 285: /* object_element_name: "quoted string"  */
#line 2528 "grammar.y"
                    {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 5999 "grammar.cpp"
    break;

  case 286: /* variable_name: "identifier"  */
#line 2533 "grammar.y"
             {
      (yyval.strval) = (yyvsp[0].strval);
    }
#line 6007 "grammar.cpp"
    break;

  case 287: /* $@21: %empty  */
#line 2544 "grammar.y"
                             {
      //开始sql
      parser->beginSQL();
      auto node = parser->ast()->createNodeObject();
      parser->pushStack(node);
      parser->beginSelect();
    }
#line 6019 "grammar.cpp"
    break;

  case 288: /* $@22: %empty  */
#line 2550 "grammar.y"
                                 {parser->endSelect(); }
#line 6025 "grammar.cpp"
    break;

  case 289: /* $@23: %empty  */
#line 2550 "grammar.y"
                                                                         {
      //设置let节点
      parser->executeSelectPendWithoutPop();
      parser->produceAlias();
    }
#line 6035 "grammar.cpp"
    break;

  case 290: /* sql_statements: with_statements "select" $@21 distinct_label select_list $@22 from_statements $@23 where_statements group_by_statements order_by_statements limit_statements  */
#line 2554 "grammar.y"
                                                                               {
      
      //如果select中有嵌套子查询,执行判定,产生子查询的let节点
      parser->executeSelectSubQueryPend();
      parser->produceSelectSubQuery();
      //设置return节点,
      parser->executeSelectPend();

      auto node =static_cast<AstNode*>(parser->popStack());
      AstNode* retNode = nullptr;

      TRI_ASSERT(node->type == NODE_TYPE_OBJECT);

      if(node->numMembers()==1){//不return对象,直接return对象中的一个内容
        node = node->getMemberUnchecked(0)->getMemberUnchecked(0);
      }

      if((yyvsp[-8].boolval)==true){//存在distinct
        auto const scopeType = parser->ast()->scopes()->type();

        if (scopeType == AQL_SCOPE_MAIN ||
            scopeType == AQL_SCOPE_SUBQUERY) {
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "cannot use DISTINCT modifier on top-level query element", yylloc.first_line, yylloc.first_column);
        }
        AstNode* disNode = parser->ast()->createNodeDistinct(node);
        retNode = parser->ast()->createNodeReturn(disNode);

      }else{
        retNode = parser->ast()->createNodeReturn(node);
      }
      
      parser->ast()->addOperation(retNode); 
      parser->ast()->scopes()->endNested();
      //结束sql
      parser->endSQL();
    }
#line 6076 "grammar.cpp"
    break;

  case 291: /* with_statements: %empty  */
#line 2593 "grammar.y"
             {

    }
#line 6084 "grammar.cpp"
    break;

  case 292: /* with_statements: "WITH keyword" with_list  */
#line 2596 "grammar.y"
                      {
      
    }
#line 6092 "grammar.cpp"
    break;

  case 293: /* with_list: with_element  */
#line 2602 "grammar.y"
                 {

    }
#line 6100 "grammar.cpp"
    break;

  case 294: /* with_list: with_list "," with_element  */
#line 2605 "grammar.y"
                                  {

    }
#line 6108 "grammar.cpp"
    break;

  case 295: /* with_element: variable_name "as" expression  */
#line 2611 "grammar.y"
                                 {
      auto node = parser->ast()->createNodeLet((yyvsp[-2].strval).value, (yyvsp[-2].strval).length, (yyvsp[0].node), true);
      parser->ast()->addOperation(node);
    }
#line 6117 "grammar.cpp"
    break;

  case 296: /* from_statements: %empty  */
#line 2617 "grammar.y"
               {

    }
#line 6125 "grammar.cpp"
    break;

  case 297: /* from_statements: "from" collection_pair_list  */
#line 2620 "grammar.y"
                                {

  }
#line 6133 "grammar.cpp"
    break;

  case 298: /* collection_pair_list: collection_element  */
#line 2626 "grammar.y"
                       {

    }
#line 6141 "grammar.cpp"
    break;

  case 299: /* collection_pair_list: collection_pair_list "," collection_element  */
#line 2630 "grammar.y"
                                                    {

    }
#line 6149 "grammar.cpp"
    break;

  case 300: /* collection_element: collection_pair  */
#line 2636 "grammar.y"
                    {

    }
#line 6157 "grammar.cpp"
    break;

  case 301: /* collection_element: collection_pair "join" collection_pair "on" expression  */
#line 2639 "grammar.y"
                                                           {
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 6166 "grammar.cpp"
    break;

  case 302: /* collection_element: collection_pair "join" collection_pair "on" expression "start_as" variable_name  */
#line 2643 "grammar.y"
                                                                                    {
     bool success= parser->updateStartNode((yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
     if(!success){
      parser->registerParseError(TRI_ERROR_QUERY_PARSE, "start_as error", yylloc.first_line, yylloc.first_column);
     }
    }
#line 6177 "grammar.cpp"
    break;

  case 303: /* $@24: %empty  */
#line 2652 "grammar.y"
                                  {
      //得到变量名
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      AstNode* variableNameNode = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      //现在创建了一个变量节点(同时也创建一个变量)
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      Variable* variable = static_cast<Variable*>(variableNode->getData());
      //创建整个Node_type_for节点
      AstNode* options = nullptr;
      AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      //向整个ast的_root添加member
      parser->ast()->addOperation(node);
    }
#line 6195 "grammar.cpp"
    break;

  case 304: /* collection_pair: expression "as" variable_name $@24 unnest_statement  */
#line 2664 "grammar.y"
                       {

    }
#line 6203 "grammar.cpp"
    break;

  case 305: /* $@25: %empty  */
#line 2667 "grammar.y"
               {
      if((yyvsp[0].node)->isValueType(arangodb::aql::AstNodeValueType::VALUE_TYPE_STRING)){
        //现在创建了一个变量节点(同时也创建一个变量)
        parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
        AstNode* variableNode = parser->ast()->createNodeVariable((yyvsp[0].node)->getStringView(), true);
        Variable* variable = static_cast<Variable*>(variableNode->getData());
        //创建整个Node_type_for节点
        AstNode* options = nullptr;
        AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[0].node), options);
        //向整个ast的_root添加member
        parser->ast()->addOperation(node);
      }else if((yyvsp[0].node)->type ==NODE_TYPE_REFERENCE) {
        //找到引用的变量
        const Variable* expVariable = static_cast<Variable*>((yyvsp[0].node)->getData());
        //可能找到被覆盖的变量，所以用变量名去找真正的变量
        expVariable=parser->ast()->scopes()->getRealVariable(expVariable->name, true);
        //重新生成引用节点
        AstNode* refNode = parser->ast()->createNodeReference(expVariable);
        parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
        //覆盖掉原有的变量
        AstNode* variableNode = parser->ast()->createNodeCoverVariable(expVariable->name, false);
        Variable* variable = static_cast<Variable*>(variableNode->getData());
        //创建整个Node_type_for节点
        AstNode* options = nullptr;
        AstNode* node = parser->ast()->createNodeFor(variable, refNode, options);
        //向整个ast的_root添加member
        parser->ast()->addOperation(node);

      }else{
        parser->kk();
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "you need an alia", yylloc.first_line, yylloc.first_column);
      }
    }
#line 6241 "grammar.cpp"
    break;

  case 306: /* collection_pair: expression $@25 unnest_statement  */
#line 2699 "grammar.y"
                       {

    }
#line 6249 "grammar.cpp"
    break;

  case 307: /* $@26: %empty  */
#line 2702 "grammar.y"
             {parser->beginGraph(); }
#line 6255 "grammar.cpp"
    break;

  case 308: /* collection_pair: "identifier" $@26 "match" graph_info  */
#line 2702 "grammar.y"
                                                         {

    parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);

    auto node = parser->ast()->createNodeArray();
    node->addMember(parser->ast()->createNodeValueString((yyvsp[-3].strval).value, (yyvsp[-3].strval).length));
    auto const& resolver = parser->query().resolver();
    auto collectionNode = parser->ast()->createNodeCollectionList(node, resolver);
    parser->sqlGraphInfo->collectionNode=collectionNode;
    auto traversalNode=parser->buildNodeTraversal();
    parser->ast()->addOperation(traversalNode);


  }
#line 6274 "grammar.cpp"
    break;

  case 309: /* graph_info: point "- operator" edge "- operator" "> operator" step point  */
#line 2718 "grammar.y"
                                              {
      //默认步长为1
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->buildNodeDirection(2, (yyvsp[-1].node));//OUTBOUND
      parser->setGraphVarNodes((yyvsp[-6].node),(yyvsp[-4].node),(yyvsp[0].node));
      

    }
#line 6287 "grammar.cpp"
    break;

  case 310: /* graph_info: point "< operator" "- operator" edge "- operator" step point  */
#line 2726 "grammar.y"
                                              {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->buildNodeDirection(1, (yyvsp[-1].node));//INBOUND
      parser->setGraphVarNodes((yyvsp[-6].node),(yyvsp[-3].node),(yyvsp[0].node));

    }
#line 6298 "grammar.cpp"
    break;

  case 311: /* graph_info: point "- operator" edge "- operator" step point  */
#line 2732 "grammar.y"
                                           {
      auto& info=parser->sqlGraphInfo;
      info->directionNode=parser->buildNodeDirection(0, (yyvsp[-1].node));//any
      parser->setGraphVarNodes((yyvsp[-5].node),(yyvsp[-3].node),(yyvsp[0].node));

    }
#line 6309 "grammar.cpp"
    break;

  case 312: /* point: "(" variable_name ")"  */
#line 2740 "grammar.y"
                               {
    AstNode* node = parser->ast()->createNodeValueString((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
    (yyval.node)=node;

  }
#line 6319 "grammar.cpp"
    break;

  case 313: /* edge: "[" variable_name "]"  */
#line 2747 "grammar.y"
                                            {
      AstNode* node = parser->ast()->createNodeValueString((yyvsp[-1].strval).value, (yyvsp[-1].strval).length);
      (yyval.node)=node;

    }
#line 6329 "grammar.cpp"
    break;

  case 314: /* edge: "[" "]"  */
#line 2752 "grammar.y"
                               {
      AstNode* node = parser->ast()->createNodeNop();
      (yyval.node)=node;
    }
#line 6338 "grammar.cpp"
    break;

  case 315: /* step: %empty  */
#line 2758 "grammar.y"
             {
      (yyval.node)=parser->ast()->createNodeNop();
    }
#line 6346 "grammar.cpp"
    break;

  case 316: /* step: "{" expression "," expression "}"  */
#line 2761 "grammar.y"
                                                               {
      (yyval.node)=parser->ast()->createNodeRange((yyvsp[-3].node), (yyvsp[-1].node));

    }
#line 6355 "grammar.cpp"
    break;

  case 317: /* unnest_statement: %empty  */
#line 2768 "grammar.y"
             {

    }
#line 6363 "grammar.cpp"
    break;

  case 318: /* unnest_statement: "unnest" expression_list  */
#line 2771 "grammar.y"
                             {

    }
#line 6371 "grammar.cpp"
    break;

  case 319: /* $@27: %empty  */
#line 2774 "grammar.y"
                 {       
      auto node = parser->ast()->createNodeArray();
      parser->pushArray(node); 
    }
#line 6380 "grammar.cpp"
    break;

  case 320: /* unnest_statement: "unnest_all" $@27 optional_axis_name_list  */
#line 2777 "grammar.y"
                              {
      parser->ast()->injectOptionForNodeFor(parser->popArray());
    }
#line 6388 "grammar.cpp"
    break;

  case 321: /* expression_list: expression_element  */
#line 2782 "grammar.y"
                       {

    }
#line 6396 "grammar.cpp"
    break;

  case 322: /* expression_list: expression_list "- operator" "> operator" expression_element  */
#line 2785 "grammar.y"
                                                     {

    }
#line 6404 "grammar.cpp"
    break;

  case 323: /* expression_element: expression "as" variable_name  */
#line 2790 "grammar.y"
                                 {
      //得到变量名
      parser->ast()->scopes()->start(arangodb::aql::AQL_SCOPE_FOR);
      AstNode* variableNameNode = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      //现在创建了一个变量节点(同时也创建一个变量)
      AstNode* variableNode = parser->ast()->createNodeVariable(variableNameNode->getStringView(), true);
      Variable* variable = static_cast<Variable*>(variableNode->getData());
      //创建整个Node_type_for节点
      AstNode* options = nullptr;
      AstNode* node = parser->ast()->createNodeFor(variable, (yyvsp[-2].node), options);
      //向整个ast的_root添加member
      parser->ast()->addOperation(node);
  }
#line 6422 "grammar.cpp"
    break;

  case 324: /* optional_axis_name_list: %empty  */
#line 2806 "grammar.y"
             {

    }
#line 6430 "grammar.cpp"
    break;

  case 325: /* optional_axis_name_list: "as" axis_name  */
#line 2809 "grammar.y"
                  {

  }
#line 6438 "grammar.cpp"
    break;

  case 326: /* optional_axis_name_list: "as" axis_name "(" axis_name_list ")"  */
#line 2812 "grammar.y"
                                                 {
      
   }
#line 6446 "grammar.cpp"
    break;

  case 327: /* axis_name_list: axis_name  */
#line 2818 "grammar.y"
              {

    }
#line 6454 "grammar.cpp"
    break;

  case 328: /* axis_name_list: axis_name_list "," axis_name  */
#line 2821 "grammar.y"
                                     {

    }
#line 6462 "grammar.cpp"
    break;

  case 329: /* axis_name: "null"  */
#line 2826 "grammar.y"
           {
      auto node = parser->ast()->createNodeNop();
      parser->pushArrayElement(node);
    }
#line 6471 "grammar.cpp"
    break;

  case 330: /* axis_name: variable_name  */
#line 2830 "grammar.y"
                  {
      auto node = parser->ast()->createNodeValueString((yyvsp[0].strval).value, (yyvsp[0].strval).length);
      parser->pushArrayElement(node);
    }
#line 6480 "grammar.cpp"
    break;

  case 331: /* distinct_label: %empty  */
#line 2837 "grammar.y"
             {
      (yyval.boolval)=false;
    }
#line 6488 "grammar.cpp"
    break;

  case 332: /* distinct_label: "DISTINCT modifier"  */
#line 2840 "grammar.y"
               {
      (yyval.boolval)=true;
    }
#line 6496 "grammar.cpp"
    break;

  case 333: /* select_list: select_element  */
#line 2846 "grammar.y"
                  {

    }
#line 6504 "grammar.cpp"
    break;

  case 334: /* select_list: select_list "," select_element  */
#line 2849 "grammar.y"
                                      {

    }
#line 6512 "grammar.cpp"
    break;

  case 335: /* select_element: expression "as" variable_name  */
#line 2854 "grammar.y"
                                  {
      if(parser->usedNULLAlia()){
        parser->registerParseError(TRI_ERROR_QUERY_PARSE, "The previous one requires an alias", yylloc.first_line, yylloc.first_column);
      }
      parser->disableNULLAlia();
      parser->pushObjectElement((yyvsp[0].strval).value, (yyvsp[0].strval).length, (yyvsp[-2].node));
      if(!(yyvsp[-2].node)->hasFlag(FLAG_TIMES)){//.*语法创建的不生成别名
        parser->pushAliasQueue((yyvsp[-2].node),std::string_view{(yyvsp[0].strval).value, (yyvsp[0].strval).length});
      }
    }
#line 6527 "grammar.cpp"
    break;

  case 336: /* select_element: expression  */
#line 2864 "grammar.y"
               {
      if((yyvsp[0].node)->type == NODE_TYPE_ATTRIBUTE_ACCESS|| (yyvsp[0].node)->type == NODE_TYPE_COLLECTION){
        if(parser->usedNULLAlia()){
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "The previous one requires an alias", yylloc.first_line, yylloc.first_column);
        }
        parser->disableNULLAlia();
        //TODO : 名称冲突换成临时名
        parser->pushObjectElement((yyvsp[0].node)->getStringValue(), (yyvsp[0].node)->getStringLength(), (yyvsp[0].node));
        //.*语法创建的不生成别名,NODE_TYPE_COLLECTION也不生成别名
        if(!(yyvsp[0].node)->hasFlag(FLAG_TIMES) && (yyvsp[0].node)->type != NODE_TYPE_COLLECTION){
          parser->pushAliasQueue((yyvsp[0].node),(yyvsp[0].node)->getStringView());
        }
      }else{
        if(parser->allowNULLAlia()){
          //如果select子句中只有一个元素,可以接受没有别名,随便注册一个别名(这个名称不会被使用)
          const char* name= parser->ast()->resources().registerString("_",1);
          parser->pushObjectElement(name, 1, (yyvsp[0].node));
          parser->useNULLAlia();
          parser->disableNULLAlia();
        }else{
          parser->registerParseError(TRI_ERROR_QUERY_PARSE, "you need an alias", yylloc.first_line, yylloc.first_column); 
        }
      }
    }
#line 6556 "grammar.cpp"
    break;

  case 337: /* where_statements: %empty  */
#line 2890 "grammar.y"
                {
    }
#line 6563 "grammar.cpp"
    break;

  case 338: /* where_statements: "where" expression  */
#line 2892 "grammar.y"
                       {
      // operand is a reference. can use it directly
      auto node = parser->ast()->createNodeFilter((yyvsp[0].node));
      parser->ast()->addOperation(node);
    }
#line 6573 "grammar.cpp"
    break;

  case 339: /* group_by_statements: %empty  */
#line 2900 "grammar.y"
                {
      //检查是否有聚集
      parser->produceAggregateStep1();
      AstNode* aggNode=parser->produceAggregateStep2();
      if(aggNode->numMembers()!=0){ //有聚集函数,创建聚集
        VarSet variablesIntroduced{};
        auto scopes = parser->ast()->scopes();

        if (::startCollectScope(scopes)) {
          ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, aggNode);
        }
        AstNode const* into = ::getIntoVariable(parser, nullptr);
        AstNode const* intoExpression = ::getIntoExpression(nullptr);

        auto node = parser->ast()->createNodeCollect(parser->ast()->createNodeArray(), aggNode, into, intoExpression, nullptr, nullptr);
        parser->ast()->addOperation(node);
      }
      parser->produceAggAlias();

    }
#line 6598 "grammar.cpp"
    break;

  case 340: /* $@28: %empty  */
#line 2920 "grammar.y"
                           {parser->produceAggregateStep1();}
#line 6604 "grammar.cpp"
    break;

  case 341: /* group_by_statements: group_by_variable_list $@28 having_statements  */
#line 2920 "grammar.y"
                                                                                {

      parser->setHaving((yyvsp[0].node));
      parser->processHaving();
      AstNode* aggNode=parser->produceAggregateStep2();

      auto scopes = parser->ast()->scopes();
      VarSet variablesIntroduced{};
      if (::startCollectScope(scopes)) {//开始一个新的CollectScope,要重新注册(实际上collect_variable_list和aggregate中已经注册在上一层的scopes了)
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, (yyvsp[-2].node));
        ::registerAssignVariables(parser, scopes, yylloc.first_line, yylloc.first_column, variablesIntroduced, aggNode);
      }

      AstNode const* into = ::getIntoVariable(parser, nullptr);
      AstNode const* intoExpression = ::getIntoExpression(nullptr);

      auto node = parser->ast()->createNodeCollect((yyvsp[-2].node),aggNode,into, intoExpression, nullptr, nullptr);
      parser->ast()->addOperation(node);

      parser->produceAggAlias();
      //添加having
      if((yyvsp[0].node)!=nullptr){
        auto filterNode = parser->ast()->createNodeFilter((yyvsp[0].node));
        parser->ast()->addOperation(filterNode);
      }
    }
#line 6635 "grammar.cpp"
    break;

  case 342: /* $@29: %empty  */
#line 2948 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 6644 "grammar.cpp"
    break;

  case 343: /* group_by_variable_list: "group" "by" $@29 group_by_list  */
#line 2951 "grammar.y"
                    {
      auto list = static_cast<AstNode*>(parser->popStack());
      TRI_ASSERT(list != nullptr);
      (yyval.node) = list;
    }
#line 6654 "grammar.cpp"
    break;

  case 344: /* group_by_list: group_by_element  */
#line 2958 "grammar.y"
                    {

    }
#line 6662 "grammar.cpp"
    break;

  case 345: /* group_by_list: group_by_list "," group_by_element  */
#line 2962 "grammar.y"
                                          {

    }
#line 6670 "grammar.cpp"
    break;

  case 346: /* group_by_element: expression  */
#line 2967 "grammar.y"
              {
      std::string vName = parser->ast()->variables()->nextName();
      auto node = parser->ast()->createNodeAssign(vName.c_str(), vName.size(), (yyvsp[0].node),false);
      parser->updateWillReturnNode(node);
      parser->pushArrayElement(node);
    }
#line 6681 "grammar.cpp"
    break;

  case 347: /* having_statements: %empty  */
#line 2975 "grammar.y"
             {
      (yyval.node)=nullptr;
    }
#line 6689 "grammar.cpp"
    break;

  case 348: /* having_statements: "having" expression  */
#line 2978 "grammar.y"
                        {
      (yyval.node)=(yyvsp[0].node);
    }
#line 6697 "grammar.cpp"
    break;

  case 349: /* order_by_statements: %empty  */
#line 2983 "grammar.y"
                 {
    }
#line 6704 "grammar.cpp"
    break;

  case 350: /* $@30: %empty  */
#line 2985 "grammar.y"
                 {
      auto node = parser->ast()->createNodeArray();
      parser->pushStack(node);
    }
#line 6713 "grammar.cpp"
    break;

  case 351: /* order_by_statements: "order" "by" $@30 sort_list  */
#line 2988 "grammar.y"
                {
      auto list = static_cast<AstNode*>(parser->popStack());
      parser->processOrderBy(list);
      auto node = parser->ast()->createNodeSort(list);
      parser->ast()->addOperation(node);
    }
#line 6724 "grammar.cpp"
    break;

  case 352: /* limit_statements: %empty  */
#line 2996 "grammar.y"
                   {
    }
#line 6731 "grammar.cpp"
    break;

  case 353: /* limit_statements: limit_statement  */
#line 2998 "grammar.y"
                   {

  }
#line 6739 "grammar.cpp"
    break;


#line 6743 "grammar.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      {
        yypcontext_t yyctx
          = {yyssp, yytoken, &yylloc};
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == -1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *,
                             YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (yymsg)
              {
                yysyntax_error_status
                  = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
                yymsgp = yymsg;
              }
            else
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = YYENOMEM;
              }
          }
        yyerror (&yylloc, parser, yymsgp);
        if (yysyntax_error_status == YYENOMEM)
          YYNOMEM;
      }
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= T_END)
        {
          /* Return failure if at end of input.  */
          if (yychar == T_END)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, parser);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, parser, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, parser);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, parser);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
  return yyresult;
}

